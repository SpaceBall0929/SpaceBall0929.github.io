<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>论文笔记-path_ORAM</title>
    <link href="/2023/01/12/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/path%20oram/"/>
    <url>/2023/01/12/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/path%20oram/</url>
    
    <content type="html"><![CDATA[<h1 id="path-ORAM"><a href="#path-ORAM" class="headerlink" title="path ORAM"></a><strong>path ORAM</strong></h1><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>先介绍一下结构：</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/imgimage-20230201204657872.png" alt="image-20230201204657872"></p><p>tree上的每个node都叫做bucket，每个bucket可以存Z个blocks，通常Z&#x3D;4</p><p>position map存储在客户端，存的是每个block对应的路径，在这个路径上一定可以找到这个block（如同上图）</p><p>也就是这两个符号：<img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/imgimage-20230201205123249.png" alt="image-20230201205123249" style="zoom: 37%;" />（就是字面意思啦）</p><blockquote><p>如果你知道二叉树，你就知道每个leaf node都可以指定一条唯一的从根到leaf node路径</p></blockquote><p>再看这个符号：<img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/imgimage-20230201205530430.png" alt="image-20230201205530430" style="zoom: 33%;" /></p><p>这个a就相当于上面结构图里的x啦，block a存在由x确定的路径里的某个bucket里哦。也可能在stash里，stash也储存在客户端，用来存放溢出来的block.</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>放一张符号表在这里对照:</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/imgimage-20230201204546419.png" alt="image-20230201204546419"></p><p>完整的算法是这样的:</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/imgimage-20230201210042728.png" alt="image-20230201210042728" style="zoom: 50%;" /><p>现在来分段解释.</p><p>这个算法完成的是 access block a,调用时这么调用:</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pascal">data ← Access(<span class="hljs-keyword">read</span>, a, None)<br></code></pre></td></tr></table></figure><p>表示把a的内容读到data</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">Access(<span class="hljs-params">write</span>, <span class="hljs-params">a</span>, <span class="hljs-params">data</span>∗)</span><br></code></pre></td></tr></table></figure><p>表示把data写入block a里.</p><h3 id="具体步骤如下"><a href="#具体步骤如下" class="headerlink" title="具体步骤如下:"></a>具体步骤如下:</h3><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/imgimage-20230201210405793.png" alt="image-20230201210405793" style="zoom:50%;" /><p>让把a的位置赋值给x, 给a随机一个路径.</p><blockquote><p>L是数的高度, $2^L-1$就是leaves node的数量,也即路径数量</p></blockquote><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/imgimage-20230201210951262.png" alt="image-20230201210951262" style="zoom:50%;" /><p>把这条路径的所有bucket读到客户端</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/imgimage-20230201211112474.png" alt="image-20230201211112474" style="zoom:50%;" /><p>如果命令是write, 替换a的内容为新的data*.(没内容的时候默认存的是0)</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/imgimage-20230201211345855.png" alt="image-20230201211345855" style="zoom: 45%;" /><p>接下来把文件写回去, 我们选好了新路径, 新路径存在<code>position[a’]</code>里. 但不能让别人知道新的路径. </p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/imgimage-20230201212750203.png" alt="image-20230201212750203"></p><p>假设我们选的新路径是黄色的, 如果我们选红色数字标出的任何一个bucket放置, 都会被发现新路径的信息. 因此我们可以把它放在<strong>和旧路径相交的最高层节点上</strong>, 就是这个代码:<img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/imgimage-20230201213242613.png" alt="image-20230201213242613" style="zoom:50%;" /></p><p>如果这个节点存不下, 就放在stash里, 但是position[a’]的值依旧是原来的. (所以找文件之前要先看看stash里有没有…)</p><p>比如这个例子里就是根节点啦. 因为旧路径已经被知道了, 所以没关系啦<del>这样它是猜不到我们给新路径选的x是谁的. 这次访问的是叶节点🍎确定的路径, 下次访问的是叶节点🍌确定的路径, 它猜不到我们访问的是同个文件的</del></p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/imgimage-20230201214128313.png" alt="image-20230201214128313" style="zoom: 33%;" /><blockquote><p>注意,路径🍌上也是会存别的文件的哦, 所以它猜不出我们是访问之前的那个文件,还是访问香蕉上的其他文件. 因为客户端是一次性把路径上的所有文件都取出来,然后把用户要的文件给ta.</p><p>客户端相当于一个代理, 用户给它的是找文件f的指令, 客户端给memory发的是让memory不知道客户要的是哪个文件的指令. like this:</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/imgimage-20230201214630246.png" alt="image-20230201214630246" style="zoom:50%;" /><p>关于oblivious的解释like this:</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/imgimage-20230201214711217.png" alt="image-20230201214711217" style="zoom: 33%;" /></blockquote><h3 id="eviction"><a href="#eviction" class="headerlink" title="eviction"></a>eviction</h3><p>一直放在和旧路径相交的最高层节点上,这不好罢, 所以有了eviction, 把我们的东西放到已经选好路径里的其他地方.</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/imgimage-20230201221501150.png" alt="image-20230201221501150" style="zoom: 33%;" /><p>从最底层开始, 每一层随机选两个bucket打开, 然后只选其中一个放. 这样就很难发现我们放在那里了捏.</p><h2 id="其他改进"><a href="#其他改进" class="headerlink" title="其他改进"></a>其他改进</h2><p>因为position map太大, 所以可以把它改成ORAM的二叉树结构, 具体还是看论文吧~</p><blockquote><p>新的感悟:原来到自己觉得完全可以通过代码解释出来才叫看懂了啊</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>ORAM解决的问题：从RAM到ORAM - 是不懂啊的文章 - 知乎 <a href="https://zhuanlan.zhihu.com/p/30050593">https://zhuanlan.zhihu.com/p/30050593</a></p><p>[(25) Oblivious RAM (Part 1) - Gilad Asharov - YouTube](</p><p>Path ORAM: An Extremely Simple Oblivious RAM Protocol</p><p>（懒得按格式写了，反正自己的网站，不怕啦）</p>]]></content>
    
    
    <categories>
      
      <category>Essay Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文笔记-Titanium</title>
    <link href="/2022/11/12/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/11/12/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Titanium-A-Metadata-Hiding-File-Sharing-System-with-Malicious-Security"><a href="#Titanium-A-Metadata-Hiding-File-Sharing-System-with-Malicious-Security" class="headerlink" title="Titanium: A Metadata-Hiding File-Sharing System with Malicious Security"></a>Titanium: A Metadata-Hiding File-Sharing System with Malicious Security</h1><h2 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h2><p>参考：<a href="https://www.youtube.com/watch?v=D4YktK9QZK8&list=PLfUWWM-POgQsS08uHJUJI6sawDO_3sNh0&index=2">NDSS 2022 Titanium: A Metadata-Hiding File-Sharing System with Malicious Security - YouTube</a></p><h4 id="Metal"><a href="#Metal" class="headerlink" title="Metal"></a>Metal</h4><blockquote><p><a href="https://www.ndss-symposium.org/ndss-paper/metal-a-metadata-hiding-file-sharing-system/">Metal: A Metadata-Hiding File-Sharing System – NDSS Symposium (ndss-symposium.org)</a></p></blockquote><h4 id="End-to-endencrypted-file-sharing-systems"><a href="#End-to-endencrypted-file-sharing-systems" class="headerlink" title="End-to-endencrypted file-sharing systems"></a>End-to-endencrypted file-sharing systems</h4><blockquote><p><a href="https://www.ibm.com/topics/end-to-end-encryption">What is end-to-end encryption? | IBM</a></p></blockquote><p><a href="https://www.ibm.com/topics/encryption">Data encryption</a> is the process of using an algorithm that transforms standard text characters into an <strong>unreadable</strong> format. </p><blockquote><p>Data encryption is a way of translating data from plaintext (unencrypted) to ciphertext (encrypted). Users can access encrypted data with an encryption key and decrypted data with a decryption key.</p></blockquote><p>this process uses <strong>encryption keys to scramble data</strong> so that <strong>only authorized users can read it</strong>. </p><p>End-to-end encryption uses this same process, too. However, it takes it a step farther by securing communications from one endpoint to another.</p><hr><p>In many messaging services, third parties store the data, which is encrypted only in transit. </p><ul><li>This server-side encryption method secures the data from unauthorized viewers only. </li><li>But as an effect of this method, <strong>the sender can view the information, too</strong>, which can be undesirable in cases where data privacy at all points is needed.</li></ul><p>所以出现了n2n:encrypted data is <strong>only viewable by those with decryption keys</strong>.</p><p>How it works:</p><ul><li>End-to-end encryption begins with cryptography, a method for protecting information by transforming it into an unreadable format called ciphertext.</li><li>Only users who possess a secret key can decipher, or decrypt, the message into plaintext.and only the intended receiver or reader can decrypt it.</li></ul><p>encrypts and decrypts the data using two separate cryptographic keys.</p><ul><li>The public key is used to encrypt a message and send it to the public key’s owner.</li><li>the message can only be decrypted using a corresponding private key, also known as a decryption key.</li></ul><p><strong>Challenges with E2EE</strong></p><ol><li><p>E2EE only encrypts data between the endpoints.This fact means <strong>the endpoints themselves are</strong> <strong>vulnerable to attack</strong>.</p></li><li><p>Hackers can insert themselves between two endpoints, eavesdrop and intercept messages. They impersonate the intended recipient, swap decryption keys and forward the message to the actual recipient without being detected.</p></li></ol><p></p><h4 id="meta-data"><a href="#meta-data" class="headerlink" title="meta data"></a>meta data</h4><blockquote><p>以文学领域为例，<a href="https://www.zhihu.com/search?q=%E5%90%8E%E7%8E%B0%E4%BB%A3%E4%B8%BB%E4%B9%89&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:65565699%7D">后现代主义</a>文学中有一种小说叫作“元小说”，也就是“关于小说的小说”</p></blockquote><p><a href="https://www.zhihu.com/search?q=%E5%85%83%E6%95%B0%E6%8D%AE&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:65565699%7D">元数据</a>(meta data)——“data about data” 关于数据的数据，一般是结构化数据（如存储在数据库里的数据，规定了字段的长度、类型等）。</p><p>元数据是指从信息资源中抽取出来的用于说明其特征、内容的结构化的数据(如题名,版本、出版数据、相关说明,包括检索点等)，用于组织、描述、检索、保存、管理信息和知识资源。</p><h4 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h4><blockquote><p><a href="https://zhuanlan.zhihu.com/p/375629961">密码学笔记 - Message Authentication Code（消息认证码） - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/mutourend/article/details/100576422">(105条消息) 密码学中的MAC(message authentication code)_mutourend的博客-CSDN博客_message authentication code</a></p><p><a href="https://www.fortinet.com/resources/cyberglossary/message-authentication-code">What Is a Message Authentication Code (MAC)? | Fortinet</a></p></blockquote><p>MAC ensures that the message is coming from the correct sender, has not been changed, and that the data transferred over a network or stored in or outside a system is legitimate and does not contain harmful code.</p><p>If the resulting MAC the receiver arrives at equals the one sent by the sender, the message is verified</p><p>when the recipient attempts to verify the authenticity of the data, the key will not work, and the end result will not match that of the sender.</p><p>​<img src="https://img-blog.csdnimg.cn/20190906115745598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211dG91cmVuZA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190906121317439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211dG91cmVuZA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>人话：a的消息和key经过算法得到一个mac，b收到之后再过一遍这个算法看看mac是否相同，相同的话证明就是俺要的message</p><h4 id="secret-sharing"><a href="#secret-sharing" class="headerlink" title="secret sharing"></a>secret sharing</h4><blockquote><p><a href="https://zhuanlan.zhihu.com/p/44999983">密钥分享Secret Sharing介绍 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/384759946">隐私计算技术之安全多方计算(MPC) - 知乎 (zhihu.com)</a></p></blockquote><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030115455275.png" alt="image-20221030115455275"></p><p>安全多方计算（Secure Multiparty Computation, MPC）旨在解决多个参与方之间的安全计算问题，目的是使各参与方在不知晓其他参与方输入信息的前提下完成计算，并可保证计算过程不泄漏输入信息。</p><p>每个参与者P1P1，有一个自己的保密输入信息X1X1，n个参与者要共同计算一个函数f(X1,X2,…,Xn)&#x3D;(Y1,Y2,…,Yn)f(X1,X2,…,Xn)&#x3D;(Y1,Y2,…,Yn),计算结束时，每个参与者PiPi只能了解YiYi，不能了解其他方的任何信息。”</p><h4 id="多级cache"><a href="#多级cache" class="headerlink" title="多级cache"></a>多级cache</h4><p><a href="https://blog.csdn.net/zgcjaxj/article/details/114970728">(107条消息) 多层次cache的包含关系_123axj的博客-CSDN博客</a></p><h4 id="ORAM"><a href="#ORAM" class="headerlink" title="ORAM"></a>ORAM</h4><p>还没看</p><p><a href="https://research.kudelskisecurity.com/2020/04/22/an-introduction-to-oblivious-ram-oram/">An Introduction to Oblivious RAM (ORAM) – Kudelski Security Research</a></p><p><a href="https://blog.csdn.net/c630843901/article/details/120655057">(108条消息) ORAM简介_Joey Liao的博客-CSDN博客</a></p><h4 id="沙米尔算法"><a href="#沙米尔算法" class="headerlink" title="沙米尔算法"></a>沙米尔算法</h4><p><a href="https://www.bilibili.com/video/BV1zy4y1u7cn/?spm_id_from=333.337.search-card.all.click&vd_source=3413af2c1f998ce457ec6cf9d0a1f7b6">【shamir 算法】富翁的烦心的那些事……_哔哩哔哩_bilibili</a></p><h4 id="random-oracle"><a href="#random-oracle" class="headerlink" title="random oracle"></a>random oracle</h4><blockquote><p><a href="https://crypto.stackexchange.com/questions/879/what-is-the-random-oracle-model-and-why-is-it-controversial">provable security - What is the “Random Oracle Model” and why is it controversial? - Cryptography Stack Exchange</a></p></blockquote><p>we know nothing about the output we could get for a given input message m, until we actually try m</p><h4 id="hash-function"><a href="#hash-function" class="headerlink" title="hash function"></a>hash function</h4><blockquote><p><a href="https://www.ionos.com/digitalguide/server/security/hash-function/">Hash functions: definition, usage, and examples - IONOS</a></p></blockquote><h2 id="论文笔记"><a href="#论文笔记" class="headerlink" title="论文笔记"></a>论文笔记</h2><h5 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h5><p>e2ee虽然在分享文件的时候不会像server透露content，但是server仍然可以获得metadata（比如user的itentties和access patterns，whom the user shares files with）</p><p>前人的工作有缺陷：</p><ul><li>Metal (NDSS ’20) is not secure against malicious servers.（对恶意服务器不安全）</li><li>MCORAM (ASIACRYPT ’20) provides confidentiality against malicious servers, but not integrity.（不完整）</li></ul><p>Titanium： a <strong>metadata-hiding</strong> file-sharing system that offers <strong>confidentiality and integrity</strong> against <strong>malicious users and servers</strong>.</p><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p> the impact of metadata leakage： a hacker or a malicious employee of the cloud may<br>already know the whistleblower’s identity.</p><p><strong>malicious security</strong>：</p><p>Malicious security should be the standard for distributed applications, rather than semi-honest security.</p><ul><li>handle malicious users</li><li>malicious servers</li></ul><p><strong>efficient file access</strong></p><p>Linear passing:expensive</p><p>Titanium avoids linear passes by using a <strong>sublinear</strong> <strong>oblivious access algorithm</strong> on the multi-server model, Circuit ORAM [45], and making improvements that reduce its eviction overhead by up to a half.</p><p><strong>Titanium’s goals and techniques</strong></p><ol><li>security against malicious users:</li></ol><p>   minimizing the users’ participation in the protocol, he can only sending requests and receiving the responses, through an API</p><p>   never touch the data stored on the servers. </p><blockquote><p>RAM:<a href="https://www.avast.com/c-what-is-ram-memory">What Is RAM? | Random Access Memory Definition | Avast</a></p></blockquote><ol start="2"><li><p>integrity for data storage:</p><p> Titanium uses authenticated secret sharing to store the data</p><p> at least one of the servers is assumed to be honest. The MACs enable t<strong>his server to detect if an incorrect version</strong> of the file is sent to the user or another file that the user did not request, thereby ensuring integrity</p></li><li><p>integrity for user inputs and outputs:</p></li></ol><pre><code class="hljs">design a maliciously secure input/output protocol users can confirm that the proxy receives the correct inputs and the user receives the correct outputs from the proxy</code></pre><ol start="4"><li>efficient file access.</li></ol><pre><code class="hljs">propose an optimized algorithm to perform the Circuit- ORAM eviction in secure computation more efficiently&gt; [Circuit ORAM - 腾讯云开发者社区-腾讯云 (tencent.com)](https://cloud.tencent.com/developer/article/1747284)</code></pre><h5 id="why-semi-honest-security-is-insuffi-cient-in-practice"><a href="#why-semi-honest-security-is-insuffi-cient-in-practice" class="headerlink" title="why semi-honest security is insuffi-cient in practice"></a>why semi-honest security is insuffi-cient in practice</h5><p>未！！！！！</p><h5 id="overview"><a href="#overview" class="headerlink" title="overview"></a>overview</h5><h6 id="System-model"><a href="#System-model" class="headerlink" title="System model"></a>System model</h6><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030101855046.png" alt="image-20221030101855046"></p><blockquote><p>?那你这proxy权力有点大啊</p></blockquote><ol><li>workflow</li><li>API</li><li>Randomized ID</li></ol><h6 id="Threat-model"><a href="#Threat-model" class="headerlink" title="Threat model"></a>Threat model</h6><ul><li>threat举例</li><li>security定义</li><li>assumptions：存在遗留问题供探讨</li></ul><h5 id="Making-the-proxy’s-access-to-the-storage-maliciously-secure"><a href="#Making-the-proxy’s-access-to-the-storage-maliciously-secure" class="headerlink" title="Making the proxy’s access to the storage maliciously secure"></a>Making the proxy’s access to the storage maliciously secure</h5><blockquote><p>开始对proxy下手2</p></blockquote><h6 id="File-storage-with-authenticated-secret-sharing"><a href="#File-storage-with-authenticated-secret-sharing" class="headerlink" title="File storage with authenticated secret sharing"></a>File storage with authenticated secret sharing</h6><h6 id="Running-the-proxy-in-secure-multiparty-computation"><a href="#Running-the-proxy-in-secure-multiparty-computation" class="headerlink" title="Running the proxy in secure multiparty computation"></a>Running the proxy in secure multiparty computation</h6><h2 id="思路总结"><a href="#思路总结" class="headerlink" title="思路总结"></a>思路总结</h2><h5 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h5><ul><li>e2ee虽然在分享文件的时候不会像server透露content，但是server仍然可以获得metadata（比如user的itentties和access patterns）</li><li>前人的工作各有缺陷（对恶意服务器不安全）（不完整）</li></ul><h2 id="PPT"><a href="#PPT" class="headerlink" title="PPT"></a>PPT</h2><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105094122896.png" alt="image-20221105094122896"></p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105094201996.png" alt="image-20221105094201996"></p><p>看似解决了，但是还有个问题，semi honest这个假设其实是个strong assuming</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105094313611.png" alt="image-20221105094313611"></p><p>无法鉴别这个server是不是follow了指示，无法鉴别它是不是恶意的（<strong>eg在paper中</strong>）</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105094520741.png" alt="image-20221105094520741"></p><hr><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105094938203.png" alt="image-20221105094938203"></p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105095231602.png" alt="image-20221105095231602"></p><p>ORAM藏匿了要的哪个文件</p><p><strong>Malicious security</strong></p><p>包括privacy和integrity</p><ol><li>server—ORAM</li></ol><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105100108690.png" alt="image-20221105100108690"></p><p>2.storage—authenticated secret sharing</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105100209752.png" alt="image-20221105100209752"></p><p>3.communication between servers and users—-黑客可以篡改request</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105100340718.png" alt="image-20221105100340718"></p><p><strong>关于overhead</strong></p><p>前人工作解决了malicious security会有overhead</p><p>但是titanium解决了这个问题</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105101102813.png" alt="image-20221105101102813"></p><p>efficient ORAM：</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105101420166.png" alt="image-20221105101420166"></p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105101555131.png" alt="image-20221105101555131"></p><p>传统方法：</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105101754461.png" alt="image-20221105101754461"></p><p>提出的升级版：</p><p>改成swap</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105102045180.png" alt="image-20221105102045180"></p><p>对于第四个case：</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105102537911.png" alt="image-20221105102537911"><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105102829326.png" alt="image-20221105102829326" style="zoom: 50%;" /></p><p>evaluation</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105103332649.png" alt="image-20221105103332649" style="zoom:67%;" /><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105103351303.png" alt="image-20221105103351303"></p>]]></content>
    
    
    <categories>
      
      <category>Essay Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译原理词法分析实验报告</title>
    <link href="/2022/09/21/%E8%AF%BE%E5%86%85/lab1/"/>
    <url>/2022/09/21/%E8%AF%BE%E5%86%85/lab1/</url>
    
    <content type="html"><![CDATA[<h1 id="编译原理实验报告"><a href="#编译原理实验报告" class="headerlink" title="编译原理实验报告"></a>编译原理实验报告</h1><h2 id="实验一-词法分析"><a href="#实验一-词法分析" class="headerlink" title="实验一 词法分析"></a>实验一 词法分析</h2><h3 id="一-实验要求"><a href="#一-实验要求" class="headerlink" title="一. 实验要求"></a>一. 实验要求</h3><p>编写一个程序对使用 C–语言书写的源代码进行词法分析，并打印分析结果。学习词法分析工具 Flex的使用方法，并使用 C 语言完成程序。</p><p>基本要求（6%）<br>a. 输出C–文法规定的基本词法分析结果（27种token）；<br>b. 输出未定义的标识符；<br>c. 识别单行注释。<br>附加要求（6%）<br>a. 识别八进制和十六进制数；<br>b. 识别指数形式浮点数；<br>c. 识别多行注释。</p><h3 id="二-实验分工"><a href="#二-实验分工" class="headerlink" title="二. 实验分工"></a>二. 实验分工</h3><p>在小组合作上，我的分工：完成识别单行注释和多行注释</p><p>(实际是自己也全部完成了一次,因为貌似分工没分好,我的内容太轻松了…)</p><h3 id="三-实验环境"><a href="#三-实验环境" class="headerlink" title="三. 实验环境"></a>三. 实验环境</h3><ol><li>虚拟机软件：GNU Linux Release:Ubuntu 12.04,kernel version 3.2.0-29</li><li>GCC version 4.6.3</li><li>GNU Flex version 2.5.35</li></ol><h3 id="四-实验设计"><a href="#四-实验设计" class="headerlink" title="四. 实验设计"></a>四. 实验设计</h3><h4 id="1-正则表达式的书写"><a href="#1-正则表达式的书写" class="headerlink" title="1. 正则表达式的书写"></a>1. 正则表达式的书写</h4><p>首先要掌握正则表达式的书写，对正则表达式书写规范笔记如下：</p><ol><li>符号 “.” 匹配除换行符 “\n” 之外的任何一个字符。</li><li>符号 “[” 和 “]” 共同匹配一个字符类，方括号之内<strong>只要有一个字符</strong>被匹配上了,那么方括号括起来的整个表达式都被匹配上了。</li><li>符号“^”表示排除某个字符.用在方括号之外则会匹配一行的开头，符号“$”用于匹配一行的结尾，符号“&lt;&lt; EOF &gt;&gt;”用于匹配文件的结尾。</li><li>符号“{”和“}”。如果花括号之内包含了一个或者两个数字，则代表花括号之前的那个表达式需要出现的次数。</li><li>符号 “*” 为 Kleene 闭包操作，匹配零个或者多个表达式。</li><li>符号 “+” 为正闭包操作，匹配一个或者多个表达式。</li><li>符号“?”匹配零个或者一个表达式。</li><li>符号“|”为选择操作，匹配其之前或之后的任一表达式。例如，faith | hope | charity 表示这三个串中的任何一个。</li><li>符号“\”用于表示各种转义字符，与 C 语言字符串里“\”的用法类似。</li><li>符号 “””（英文引号）将逐字匹配被引起来的内容（即无视各种特殊符号及转义字符）。</li><li>符号 “&#x2F;” 会查看输入字符的上下文。</li><li>任何不属于上面介绍过的有特殊含义的字符在正则表达式中都仅匹配该字符本身。</li></ol><h4 id="2-Flex代码编写"><a href="#2-Flex代码编写" class="headerlink" title="2. Flex代码编写"></a>2. Flex代码编写</h4><p>Flex的代码分为三个部分，<strong>定义部分</strong>：相当于定义变量；<strong>规则部分</strong>：编写检测到的表达式和对应的反应，格式为<code>正则表达式  &#123;响应&#125;</code> ，响应部分可以使用c语言；<strong>自定义部分</strong>：原封不动拷贝的部分。两个部分之间要用%%隔开。</p><hr><p>一些特殊参数的了解：</p><p>yylineno：作用:<strong>记录行号</strong>，每行结束后自动+1，想要读取 yylineno 的值，则需要在 Flex 源代码的定义部分加入语句“%option yylineno”。这样方便我们输出识别的内容的位置信息。</p><p>要注意，虽然 yylineno 会自动增加，但当我们在词法分析过程中调用 yyrestart()函数读取另一个输入文件时它却不会重新被初始化，因此我们需要自行添加初始化语句yylineno &#x3D; 1。</p><p>yyleng和yytext：扫描程序匹配标记时，标记的文本就存储在以空字符终止的字符串yytext中，而且它的长度存储在yyleng中。</p><hr><p>下面开始编写词法分析器，那么任务就变成先编写正则表达式，然后编写响应部分，相应部分用C语言代码就行。</p><h5 id="1-输出C–-文法规定的基本词法分析结果（27种token）和未定义的标识符"><a href="#1-输出C–-文法规定的基本词法分析结果（27种token）和未定义的标识符" class="headerlink" title="(1).输出C–-文法规定的基本词法分析结果（27种token）和未定义的标识符"></a>(1).<strong>输出C–-文法规定的基本词法分析结果（27种token）和未定义的标识符</strong></h5><p>先分析并写出27种token的正则表达式，可得出：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++">digit [<span class="hljs-number">0</span><span class="hljs-number">-9</span>]<br>letter [a-zA-Z]<br>unsignedint [<span class="hljs-number">1</span><span class="hljs-number">-9</span>]&#123;digit&#125;*<br>SPACE [ ]<br>LF [\n\r\f\v\t]<br>([+-]?(&#123;digit&#125;+)?[eE]&#123;letter&#125;*)<br><span class="hljs-built_in">ID</span> (&#123;letter&#125;|_)(&#123;letter&#125;|_|&#123;digit&#125;)*<br>SEMI ;<br>COMMA ,<br>ASSIGNOP =<br><span class="hljs-built_in">RELOP</span> (&gt;|&lt;|&gt;=|&lt;=|==|!=)<br>PLUS \+<br>MINUS \-<br>STAR \*<br>DIV \/<br>AND &amp;&amp;<br>OR \|\|<br>DOT \.<br>NOT !<br><span class="hljs-built_in">TYPE</span> (<span class="hljs-type">int</span>|<span class="hljs-type">float</span>)<br>LP \(<br>RP \)<br>LB \[<br>RB \]<br>LC \&#123;<br>RC \&#125;<br>KEYWORD <span class="hljs-keyword">if</span>|<span class="hljs-keyword">else</span>|<span class="hljs-keyword">struct</span>|<span class="hljs-keyword">return</span>|<span class="hljs-keyword">while</span><br>unsignedint [<span class="hljs-number">1</span><span class="hljs-number">-9</span>]&#123;digit&#125;*<br>INT [+-]?(<span class="hljs-number">0</span>|&#123;unsignedint&#125;)<br></code></pre></td></tr></table></figure><p>对其中的一些正则表达式进行解释（能一眼看出来的部分就跳过了）：</p><p>ID：以字母或者下划线开头<code>&#123;letter&#125;|_</code>,后面跟着任意数量的字母或者下划线或者数字<code>(&#123;letter&#125;|_|&#123;digit&#125;)*</code></p><p>INT:以正负号开头(也可以没有)<code>[+-]?</code>,后面跟着0或者无符号数<code>0|&#123;unsignedint&#125;</code></p><hr><p>接下来完成响应部分,当识别到内容时,应该:</p><ol><li><p>输出应在哪一行(使用yylineno就行,因为它就是行号)</p></li><li><p>行内的位置(使用count,输出完之后就把count加上识别的内容的长度,即yyleng)</p></li><li><p>输出这个内容(使用flex自带的函数yytext即可)</p></li></ol><p>因此基本响应内容都是差不多的,代码如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++">&#123;KEYWORD&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;KEYWORD at line %d,char %d:%s\n&quot;</span>, yylineno,count,yytext);count+=yyleng;&#125;<br>&#123;DOT&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;DOT at line %d,char %d:%s\n&quot;</span>, yylineno,count,yytext);count+=yyleng;&#125;<br>&#123;INT&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;INT data at line %d,char %d:%s\n&quot;</span>, yylineno,count,yytext);count+=yyleng;&#125;<br>&#123;SEMI&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SEMI at line %d,char %d:%s\n&quot;</span>, yylineno,count,yytext);count+=yyleng;&#125;<br>&#123;COMMA&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;COMMA at line %d,char %d:%s\n&quot;</span>, yylineno,count,yytext);count+=yyleng;&#125;<br>&#123;ASSIGNOP&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ASSIGNOP at line %d,char %d:%s\n&quot;</span>, yylineno,count,yytext);count+=yyleng;&#125;<br>&#123;RELOP&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;RELOP at line %d,char %d:%s\n&quot;</span>, yylineno,count,yytext);count+=yyleng;&#125;<br>&#123;PLUS&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;PLUS at line %d,char %d:%s\n&quot;</span>, yylineno,count,yytext);count+=yyleng;&#125;<br>&#123;MINUS&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;MINUS at line %d,char %d:%s\n&quot;</span>, yylineno,count,yytext);count+=yyleng;&#125;<br>&#123;STAR&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;STAR at line %d,char %d:%s\n&quot;</span>, yylineno,count,yytext);count+=yyleng;&#125;<br>&#123;DIV&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;DIV at line %d,char %d:%s\n&quot;</span>, yylineno,count,yytext);count+=yyleng;&#125;<br>&#123;AND&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;AND at line %d,char %d:%s\n&quot;</span>, yylineno,count,yytext);count+=yyleng;&#125;<br>&#123;OR&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;OR at line %d,char %d:%s\n&quot;</span>, yylineno,count,yytext);count+=yyleng;&#125;<br>&#123;NOT&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NOT at line %d,char %d:%s\n&quot;</span>, yylineno,count,yytext);count+=yyleng;&#125;<br>&#123;TYPE&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;TYPE at line %d,char %d:%s\n&quot;</span>, yylineno,count,yytext);count+=yyleng;&#125;<br>&#123;LP&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;LP at line %d,char %d:%s\n&quot;</span>, yylineno,count,yytext);count+=yyleng;&#125;<br>&#123;RP&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;RP at line %d,char %d:%s\n&quot;</span>, yylineno,count,yytext);count+=yyleng;&#125;<br>&#123;LB&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;LB at line %d,char %d:%s\n&quot;</span>, yylineno,count,yytext);count+=yyleng;&#125;<br>&#123;RB&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;RB at line %d,char %d:%s\n&quot;</span>, yylineno,count,yytext);count+=yyleng;&#125;<br>&#123;LC&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;LC at line %d,char %d:%s\n&quot;</span>, yylineno,count,yytext);count+=yyleng;&#125;<br>&#123;RC&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;RC at line %d,char %d:%s\n&quot;</span>, yylineno,count,yytext);count+=yyleng;&#125;<br>&#123;ID&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ID at line %d,char %d:%s\n&quot;</span>, yylineno,count,yytext);count+=yyleng;&#125;<br>&#123;SPACE&#125; &#123;count++;&#125;<br>&#123;LF&#125; &#123;count=<span class="hljs-number">1</span>;&#125;<br>. &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error Type A at line %d,char %d: Myterious character: &#x27;%s&#x27;.\n&quot;</span>, yylineno,count,yytext);count+=yyleng;&#125;<br></code></pre></td></tr></table></figure><h5 id="2-识别八进制和十六进制数，指数形式浮点数"><a href="#2-识别八进制和十六进制数，指数形式浮点数" class="headerlink" title="(2).识别八进制和十六进制数，指数形式浮点数"></a>(<strong>2).识别八进制和十六进制数，指数形式浮点数</strong></h5><p>分析正则表达式,得到:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++">INT8 [+-]?<span class="hljs-number">0</span>(<span class="hljs-number">0</span>|([<span class="hljs-number">1</span><span class="hljs-number">-7</span>][<span class="hljs-number">0</span><span class="hljs-number">-7</span>]*))<br>ILLINT8 <span class="hljs-number">0</span>([<span class="hljs-number">0</span><span class="hljs-number">-7</span>]*)?[<span class="hljs-number">8</span><span class="hljs-number">-9</span>]+&#123;digit&#125;*<br>INT16 [+-]?(<span class="hljs-number">0</span>(x|X))(<span class="hljs-number">0</span>|([<span class="hljs-number">1</span><span class="hljs-number">-9</span>A-Fa-f][<span class="hljs-number">0</span><span class="hljs-number">-9</span>A-Fa-f]*))<br>ILLINT16 [+-]?(<span class="hljs-number">0</span>(x|X))(<span class="hljs-number">0</span>|([<span class="hljs-number">1</span><span class="hljs-number">-9</span>A-Fa-f][<span class="hljs-number">0</span><span class="hljs-number">-9</span>A-Fa-f]*))?([g-zG-Z]+)(&#123;digit&#125;|&#123;letter&#125;)*<br>    <br>FLOAT [+-]?(&#123;digit&#125;+)?\.&#123;digit&#125;+?([eE][+-]?(<span class="hljs-number">0</span>|[<span class="hljs-number">0</span><span class="hljs-number">-9</span>]*))?<br><span class="hljs-built_in">ILLEGALFLOAT</span> ([+-]?(&#123;digit&#125;+)?[eE][+-]?&#123;digit&#125;*\.&#123;digit&#125;*)|([+-]?(&#123;digit&#125;+)?[eE]&#123;letter&#125;*)<br></code></pre></td></tr></table></figure><p>进行一部分解释:</p><p>16进制数:可以有符号开头<code>[+-]?</code>,然后是0X(大小写无所谓)<code>(0(x|X))</code>,最后是数字部分,和int差不多,不过多了几个字母<code>(0|([1-9A-Fa-f][0-9A-Fa-f]*))</code></p><p>非法16进制数:开头和16进制数一致,但是后面出现了不是16进制数数字的东西<code>?([g-zG-Z]+)(&#123;digit&#125;|&#123;letter&#125;)*</code></p><hr><p>写出反应内容(原理同上一个部分):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">&#123;FLOAT&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;FLOAT at line %d,char %d:%s\n&quot;</span>, yylineno,count,yytext);count+=yyleng;&#125;<br>&#123;ILLEGALFLOAT&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error Type A at line %d,char %d: Illgal float number: &#x27;%s&#x27;.\n&quot;</span>, yylineno,count,yytext);count+=yyleng;&#125;<br>&#123;INT16&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;INT16 at line %d,char %d:%s\n&quot;</span>, yylineno,count, yytext);count+=yyleng;&#125;<br>&#123;ILLINT16&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error Type A at line %d,char %d: Illgal hexadecimal number: &#x27;%s&#x27;.\n&quot;</span>, yylineno,count, yytext);count+=yyleng;&#125;<br>&#123;INT8&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;INT8 at line %d,char %d:%s\n&quot;</span>, yylineno,count, yytext);count+=yyleng;&#125;<br>&#123;ILLINT8&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error Type A at line %d,char %d: Illgal octal number: &#x27;%s&#x27;.\n&quot;</span>, yylineno,count,yytext);count+=yyleng;&#125;<br></code></pre></td></tr></table></figure><h5 id="3-识别单行注释和多行注释"><a href="#3-识别单行注释和多行注释" class="headerlink" title="(3).识别单行注释和多行注释"></a>(<strong>3).识别单行注释和多行注释</strong></h5><p>首先编写正则表达式，任务是识别单行和多行注释。</p><p>单行注释是<code>//</code>后面的内容，先识别出&#x2F;&#x2F;，然后后面可以有随意的东西，但是不能出现\n。</p><p>多行注释是<code>/*和*/</code>之间的内容，且不允许嵌套，即开头和结尾分别是<code>/*和*/</code>，中间可以有任何长度的内容和任何次数的换行，但是不能出现*&#x2F;。</p><p>得到的正则表达式为：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">NOTE (<span class="hljs-string">&quot;//&quot;</span>[^\n]*)|(\/\*(?:[^\*]|\*+[^\/\*])*\*+\/)<br></code></pre></td></tr></table></figure><p>需要做出的反应：获得行号<code>yylineno</code>，长度1+yyleng和内容yytext，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">&#123;NOTE&#125; &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NOTE at line %d,char %d:%s\n&quot;</span>, yylineno,count,yytext);count+=yyleng;&#125;<br></code></pre></td></tr></table></figure><h6 id="疑问解决"><a href="#疑问解决" class="headerlink" title="疑问解决"></a><strong>疑问解决</strong></h6><p>多行注释最开始写的表达式是<code>\/\*(.|\r\n)*\*\/)</code>，然后把改成了<code>\/\* (?:[^\*]|\*+ [^\/\*])* \*+ \/</code>。因为首先要可以跨行，然后，中间不能有嵌套的注释出现。</p><p>中间的模式为(关系为或)：</p><p> (a) <code>(\*+ [^\/\*])</code>大于等于一个*且不以此结尾也不以&#x2F;结尾</p><p> (b) <code>([^\*])</code> 没有*的随机组合(以&#x2F;结尾的包括在了这里)</p><p>以上中间模式包括了结尾不为*的所有情况.</p><p>?:是用来优化的,和正确性没啥关系.</p><p>结尾的模式是是 <code>*/</code> 前面可以有≥ 0个 <code>*</code>.即<code>\*+ \/</code></p><p>还有一种写法,可以写成:<code>\/\*(?:\*(?!\/)|[^\*])*\*\/</code>.理解这个需要了解<strong>前向匹配</strong>:<br><code>Pattern1(?=Pattern2)</code>:匹配一个符合 Pattern1 的字符串, 并且它的后续是符合 Pattern2 的.</p><p><code>Pattern1(?!Pattern2)</code>:匹配一个符合 Pattern1 的字符串, 并且它的后续是不符合 Pattern2 的.</p><p>但由于有些编译器不支持,所以没有选择用这个式子.</p><h4 id="编译与运行——Flex"><a href="#编译与运行——Flex" class="headerlink" title="编译与运行——Flex"></a>编译与运行——Flex</h4><p>写好的代码命名为lexical.l，之后在Linux中，使用flex对代码进行编译：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">flex</span> lexical<span class="hljs-selector-class">.l</span><br></code></pre></td></tr></table></figure><p>产生文件<code>lex.yy.c</code>，这其实是经过flex转换成的c语言代码。现在代码里只有一个函数，即yylex()，这个时候要再编写一个main函数加上去。main函数代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (argc &gt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span>(!(yyin = <span class="hljs-built_in">fopen</span>(argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;r&quot;</span>))) &#123;<br>            <span class="hljs-built_in">perror</span>(argv[<span class="hljs-number">1</span>]);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">yylex</span>() != <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>它的作用是读入文件中的内容。</p><p>保存后编译这个c文件，将输出的程序命名为scanner，即输入：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">gcc lex<span class="hljs-selector-class">.yy</span><span class="hljs-selector-class">.c</span> -lfl -o scanner<br></code></pre></td></tr></table></figure><p>分析文件&#96;test.cpp·时，只需要输入以下内容即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./scanner test.cpp<br></code></pre></td></tr></table></figure><h3 id="五-实验结果"><a href="#五-实验结果" class="headerlink" title="五. 实验结果"></a>五. 实验结果</h3><p>编写测试文件<code>test.cpp</code></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-number">0547</span> <span class="hljs-number">089</span> <span class="hljs-number">0</span>x<span class="hljs-number">5</span>c<span class="hljs-number">4</span>ad <span class="hljs-number">0</span>X<span class="hljs-number">345</span> <span class="hljs-number">0</span>X<span class="hljs-number">1</span>D<span class="hljs-number">7</span>E <span class="hljs-number">0</span>x<span class="hljs-number">4</span><span class="hljs-name">m4</span><br><span class="hljs-number">1.23</span> <span class="hljs-number">1.3</span>e<span class="hljs-number">0</span> <span class="hljs-number">13.5</span>e<span class="hljs-number">9</span> <span class="hljs-number">2.</span>e<span class="hljs-number">-23</span> <span class="hljs-number">3.</span> <span class="hljs-number">.08</span> <span class="hljs-number">2</span>er <span class="hljs-number">15</span>e <span class="hljs-number">1</span>e<span class="hljs-number">2.5</span><br><span class="hljs-comment">// note1</span><br><span class="hljs-comment">/* this</span><br><span class="hljs-comment">is a long long comment</span><br><span class="hljs-comment">*/</span><br>h = <span class="hljs-number">5</span> / <span class="hljs-number">2</span> <span class="hljs-comment">// note2</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在终端输入对应的指令:<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220921181853563.png" alt=" "></p><p>使用实验设计中的命令进行词法分析，输出结果：</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220921181940015.png" alt=" "></p><p>结果正确!实验结束~</p><h3 id="六-实验反思"><a href="#六-实验反思" class="headerlink" title="六. 实验反思"></a>六. 实验反思</h3><h4 id="1-补充知识点和参考资料"><a href="#1-补充知识点和参考资料" class="headerlink" title="1. 补充知识点和参考资料"></a>1. 补充知识点和参考资料</h4><p>关于yylineno的知识点：<a href="https://blog.csdn.net/sjjsbsbbs/article/details/120951721?ops_request_misc=%7B%22request_id%22:%22166367765816782417071391%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166367765816782417071391&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-120951721-null-null.142%5Ev48%5Epc_rank_34_default_3,201%5Ev3%5Econtrol_1&utm_term=yylineno&spm=1018.2226.3001.4187">(99条消息) 编译原理之词法分析(知识点+Flex实操)_血狼傲骨的博客-CSDN博客_flex词法分析教程</a></p><p>参考：<a href="https://blog.csdn.net/Flamewaker/article/details/82902906">(99条消息) 编译原理实验：词法分析_Todd222的博客-CSDN博客_编译原理词法分析实验</a></p><p>flex基本操作：<a href="https://blog.csdn.net/NKU_Yang/article/details/109549514?ops_request_misc=&request_id=&biz_id=102&utm_term=Flex%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-109549514.142%5Ev47%5Epc_rank_34_default_3,201%5Ev3%5Econtrol_1&spm=1018.2226.3001.4449">(99条消息) 编译原理学习（三）——Flex实现词法分析器（附Flex使用简介）_NKU丨阳的博客-CSDN博客_flex语法分析器</a></p><p>正则参考:<a href="https://emacs.stackexchange.com/questions/14887/matching-multiline-comments-in-regex">regular expressions - Matching multiline comments in regex - Emacs Stack Exchange</a></p><p><a href="https://blog.csdn.net/sinat_29072079/article/details/103509727?ops_request_misc=%7B%22request_id%22:%22166368378216782391872641%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166368378216782391872641&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-103509727-null-null.142%5Ev48%5Epc_rank_34_default_3,201%5Ev3%5Econtrol_1&utm_term=%E5%A4%9A%E8%A1%8C%E6%B3%A8%E9%87%8A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F&spm=1018.2226.3001.4187">(99条消息) C语言多行注释的正则表达式_Buddhist Salted Fish的博客-CSDN博客_c语言注释的正则表达式</a></p><h4 id="2-感悟"><a href="#2-感悟" class="headerlink" title="2. 感悟"></a>2. 感悟</h4><p>这个实验本质是要掌握正则表达式的书写.</p><p>不足的地方:使用makefile会更好</p><p>装完wsl要换源，不然容易下载失败。</p><p>换源教程地址：<a href="https://blog.csdn.net/airufengye/article/details/81712081?ops_request_misc=%7B%22request_id%22:%22166359185016782414937789%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166359185016782414937789&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-81712081-null-null.142%5Ev47%5Epc_rank_34_default_3,201%5Ev3%5Econtrol_1&utm_term=linux%E6%8D%A2%E6%BA%90%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">(99条消息) Linux更换安装源_autumnLemon的博客-CSDN博客_linux换源命令</a></p>]]></content>
    
    
    <categories>
      
      <category>课内</category>
      
    </categories>
    
    
    <tags>
      
      <tag>compiler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对知识的思考</title>
    <link href="/2022/08/30/%E7%94%9F%E6%B4%BB/%E5%AF%B9%E7%9F%A5%E8%AF%86%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <url>/2022/08/30/%E7%94%9F%E6%B4%BB/%E5%AF%B9%E7%9F%A5%E8%AF%86%E7%9A%84%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<p>知识是无罪的，知识是纯粹的。和未来没有关系，知识就是知识本身。</p>]]></content>
    
    
    
    <tags>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS61A-30-interpreters</title>
    <link href="/2022/08/22/CS61A/30-interpreters&amp;lab11/"/>
    <url>/2022/08/22/CS61A/30-interpreters&amp;lab11/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="Interpreting-Scheme"><a href="#Interpreting-Scheme" class="headerlink" title="Interpreting Scheme"></a>Interpreting Scheme</h1><h2 id="The-Structure-of-an-Interpreter"><a href="#The-Structure-of-an-Interpreter" class="headerlink" title="The Structure of an Interpreter"></a>The Structure of an Interpreter</h2><p>见pdf文件</p><h1 id="Lab11"><a href="#Lab11" class="headerlink" title="Lab11"></a>Lab11</h1><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p>一遍过真舒服,所以要理解问题再下手比较好！</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221120122042345.png" alt="image-20221120122042345"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Buffer</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;A Buffer provides a way of accessing a sequence of tokens across lines.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Its constructor takes an iterator, called &quot;the source&quot;, that returns the</span><br><span class="hljs-string">    next line of tokens as a list each time it is queried, or None to indicate</span><br><span class="hljs-string">    the end of data.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    The Buffer in effect concatenates the sequences returned from its source</span><br><span class="hljs-string">    and then supplies the items from them one at a time through its pop_first()</span><br><span class="hljs-string">    method, calling the source for more sequences of items only when needed.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    In addition, Buffer provides a current method to look at the</span><br><span class="hljs-string">    next item to be supplied, without sequencing past it.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    The __str__ method prints all tokens read so far, up to the end of the</span><br><span class="hljs-string">    current line, and marks the current token with &gt;&gt;.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; buf = Buffer(iter([[&#x27;(&#x27;, &#x27;+&#x27;], [15], [12, &#x27;)&#x27;]]))</span><br><span class="hljs-string">    &gt;&gt;&gt; buf.pop_first()</span><br><span class="hljs-string">    &#x27;(&#x27;</span><br><span class="hljs-string">    &gt;&gt;&gt; buf.pop_first()</span><br><span class="hljs-string">    &#x27;+&#x27;</span><br><span class="hljs-string">    &gt;&gt;&gt; buf.current()</span><br><span class="hljs-string">    15</span><br><span class="hljs-string">    &gt;&gt;&gt; buf.current()   # Calling current twice should not change buf</span><br><span class="hljs-string">    15</span><br><span class="hljs-string">    &gt;&gt;&gt; buf.pop_first()</span><br><span class="hljs-string">    15</span><br><span class="hljs-string">    &gt;&gt;&gt; buf.current()</span><br><span class="hljs-string">    12</span><br><span class="hljs-string">    &gt;&gt;&gt; buf.pop_first()</span><br><span class="hljs-string">    12</span><br><span class="hljs-string">    &gt;&gt;&gt; buf.pop_first()</span><br><span class="hljs-string">    &#x27;)&#x27;</span><br><span class="hljs-string">    &gt;&gt;&gt; buf.pop_first()  # returns None</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, source</span>):<br>        self.index = <span class="hljs-number">0</span><br>        self.source = source<br>        self.current_line = ()<br>        self.current()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pop_first</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Remove the next item from self and return it. If self has</span><br><span class="hljs-string">        exhausted its source, returns None.&quot;&quot;&quot;</span><br>        <span class="hljs-comment"># BEGIN PROBLEM 1</span><br>        <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>        current_element = self.current()<br>        self.index += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> current_element<br>        <span class="hljs-comment"># END PROBLEM 1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">current</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Return the current element, or None if none exists.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.more_on_line():<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment"># BEGIN PROBLEM 1</span><br>                <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>                self.current_line = <span class="hljs-built_in">next</span>(self.source)<br>                self.index = <span class="hljs-number">0</span><br>                <span class="hljs-comment"># END PROBLEM 1</span><br>            <span class="hljs-keyword">except</span> StopIteration:<br>                self.current_line = ()<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> self.current_line[self.index]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">more_on_line</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.index &lt; <span class="hljs-built_in">len</span>(self.current_line)<br></code></pre></td></tr></table></figure><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><blockquote><p><strong>Important:</strong> Your code for this part should go in <code>scheme_reader.py</code>.</p></blockquote><p>Your job in this part is to write the parsing functionality, which consists of two mutually recursive functions: <code>scheme_read</code> and <code>read_tail</code>. Each function takes in a single <code>src</code> parameter, which is a <code>Buffer</code> instance.</p><ul><li><code>scheme_read</code> removes enough tokens from <code>src</code> to form a single expression and returns that expression in the correct <a href="https://inst.eecs.berkeley.edu/~cs61a/fa21/lab/lab11/#internal-representations">internal representation</a>.</li><li><code>read_tail</code> expects to read the rest of a list or <code>Pair</code>, assuming the open parenthesis of that list or <code>Pair</code> has already been removed by <code>scheme_read</code>. It will read expressions (and thus remove tokens) until the matching closing parenthesis <code>)</code> is seen. This list of expressions is returned as a linked list of <code>Pair</code> instances.</li></ul><p>In short, <code>scheme_read</code> returns the next single complete expression in the buffer and <code>read_tail</code> returns the rest of a list or <code>Pair</code> in the buffer. Both functions mutate the buffer, removing the tokens that have already been processed.</p><p>The behavior of both functions depends on the first token currently in <code>src</code>. They should be implemented as follows:</p><p><code>scheme_read</code>:</p><ul><li>If the current token is the string <code>&quot;nil&quot;</code>, return the <code>nil</code> object.</li><li>If the current token is <code>(</code>, the expression is a pair or list. Call <code>read_tail</code> on the rest of <code>src</code> and return its result.</li><li>If the current token is <code>&#39;</code>, the rest of the buffer should be processed as a <code>quote</code> expression. You will implement this portion in the next problem.</li><li>If the next token is not a delimiter, then it must be a primitive expression (i.e. a number, boolean). Return it. <strong>Provided</strong></li><li>If none of the above cases apply, raise an error. <strong>Provided</strong></li></ul><p><code>read_tail</code>:</p><ul><li>If there are no more tokens, then the list is missing a close parenthesis and we should raise an error. <strong>Provided</strong></li><li>If the token is <code>)</code>, then we’ve reached the end of the list or pair. <strong>Remove this token from the buffer</strong> and return the <code>nil</code> object.</li><li>If none of the above cases apply, the next token is the operator in a combination. For example, <code>src</code> could contain <code>+ 2 3)</code>. To parse this:<ol><li><code>scheme_read</code> the next complete expression in the buffer.</li><li>Call <code>read_tail</code> to read the rest of the combination until the matching closing parenthesis.</li><li>Return the results as a <code>Pair</code> instance, where the first element is the next complete expression from (1) and the second element is the rest of the combination from (2).</li></ol></li></ul><p>要注意的在注释里标了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">scheme_read</span>(<span class="hljs-params">src</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Read the next expression from SRC, a Buffer of tokens.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; scheme_read(Buffer(tokenize_lines([&#x27;nil&#x27;])))</span><br><span class="hljs-string">    nil</span><br><span class="hljs-string">    &gt;&gt;&gt; scheme_read(Buffer(tokenize_lines([&#x27;1&#x27;])))</span><br><span class="hljs-string">    1</span><br><span class="hljs-string">    &gt;&gt;&gt; scheme_read(Buffer(tokenize_lines([&#x27;true&#x27;])))</span><br><span class="hljs-string">    True</span><br><span class="hljs-string">    &gt;&gt;&gt; scheme_read(Buffer(tokenize_lines([&#x27;(+ 1 2)&#x27;])))</span><br><span class="hljs-string">    Pair(&#x27;+&#x27;, Pair(1, Pair(2, nil)))</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> src.current() <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">raise</span> EOFError<br>    val = src.pop_first()  <span class="hljs-comment"># Get and remove the first token</span><br>    <span class="hljs-keyword">if</span> val == <span class="hljs-string">&#x27;nil&#x27;</span>:<br>        <span class="hljs-comment"># BEGIN PROBLEM 2</span><br>        <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>        <span class="hljs-keyword">return</span> nil<br>        <span class="hljs-comment"># END PROBLEM 2</span><br>    <span class="hljs-keyword">elif</span> val == <span class="hljs-string">&#x27;(&#x27;</span>:<br>        <span class="hljs-comment"># BEGIN PROBLEM 2</span><br>        <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>        <span class="hljs-comment">#src.pop_first()已经pop过啦</span><br>        <span class="hljs-keyword">return</span> read_tail(src)<br>        <span class="hljs-comment"># END PROBLEM 2</span><br>    <span class="hljs-keyword">elif</span> val == <span class="hljs-string">&quot;&#x27;&quot;</span>:<br>        <span class="hljs-comment"># BEGIN PROBLEM 3</span><br>        <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>        <span class="hljs-comment"># END PROBLEM 3</span><br>    <span class="hljs-keyword">elif</span> val <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> DELIMITERS:<br>        <span class="hljs-keyword">return</span> val<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> SyntaxError(<span class="hljs-string">&#x27;unexpected token: &#123;0&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(val))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_tail</span>(<span class="hljs-params">src</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return the remainder of a list in SRC, starting before an element or ).</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; read_tail(Buffer(tokenize_lines([&#x27;)&#x27;])))</span><br><span class="hljs-string">    nil</span><br><span class="hljs-string">    &gt;&gt;&gt; read_tail(Buffer(tokenize_lines([&#x27;2 3)&#x27;])))</span><br><span class="hljs-string">    Pair(2, Pair(3, nil))</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> src.current() <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">raise</span> SyntaxError(<span class="hljs-string">&#x27;unexpected end of file&#x27;</span>)<br>        <span class="hljs-keyword">elif</span> src.current() == <span class="hljs-string">&#x27;)&#x27;</span>:<br>            <span class="hljs-comment"># BEGIN PROBLEM 2</span><br>            <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>            src.pop_first()<br>            <span class="hljs-keyword">return</span> nil<br>            <span class="hljs-comment"># END PROBLEM 2</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># BEGIN PROBLEM 2</span><br>            <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>            <span class="hljs-keyword">return</span> Pair(scheme_read(src), read_tail(src))<br>            <span class="hljs-comment"># END PROBLEM 2</span><br>    <span class="hljs-keyword">except</span> EOFError:<br>        <span class="hljs-keyword">raise</span> SyntaxError(<span class="hljs-string">&#x27;unexpected end of file&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="3"><a href="#3" class="headerlink" title="3"></a>3</h4><blockquote><p><strong>Important:</strong> Your code for this part should go in <code>scheme_reader.py</code>.</p></blockquote><p>Your task in this problem is to complete the implementation of <code>scheme_read</code> by allowing the function to now be able to handle quoted expressions.</p><p>In Scheme, quoted expressions such as <code>&#39;&lt;expr&gt;</code> are equivalent to <code>(quote &lt;expr&gt;)</code>. That means that we need to wrap the expression following <code>&#39;</code> (which you can get by recursively calling <code>scheme_read</code>) into the <code>quote</code> special form, which is a Scheme list (as with all special forms).</p><p>In our representation, a <code>Pair</code> represents a Scheme list. You should therefore wrap the expression following <code>&#39;</code> in a <code>Pair</code>.</p><p>For example, <code>&#39;bagel</code>, or <code>[&quot;&#39;&quot;, &quot;bagel&quot;]</code> after being tokenized, should be represented as <code>Pair(&#39;quote&#39;, Pair(&#39;bagel&#39;, nil))</code>. <code>&#39;(1 2)</code> (or <code>[&quot;&#39;&quot;, &quot;(&quot;, 1, 2, &quot;)&quot;]</code>) should be represented as <code>Pair(&#39;quote&#39;, Pair(Pair(1, Pair(2, nil)), nil))</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">elif</span> val == <span class="hljs-string">&quot;&#x27;&quot;</span>:<br>    <span class="hljs-comment"># BEGIN PROBLEM 3</span><br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    <span class="hljs-keyword">return</span> Pair(<span class="hljs-string">&#x27;quote&#x27;</span>, Pair(scheme_read(src), nil))<span class="hljs-comment">#结尾一定是nil，因为后面一段是个整体</span><br>    <span class="hljs-comment"># END PROBLEM 3</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CS61A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Sciense</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS61A-28-exceptions</title>
    <link href="/2022/08/21/CS61A/28-exceptions/"/>
    <url>/2022/08/21/CS61A/28-exceptions/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Programs-as-data"><a href="#Programs-as-data" class="headerlink" title="Programs as data"></a>Programs as data</h2><p>Expressions, which can be:</p><ul><li>Primitive expressions: <code>2 3.3 true + quotient </code></li><li>Combinations: <code>(quotient 10 2) (not true)</code></li></ul><p>built-in list structure can represent combinations:</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scheme">scm&gt; (<span class="hljs-name"><span class="hljs-built_in">list</span></span> <span class="hljs-symbol">&#x27;quotient</span> <span class="hljs-number">10</span> <span class="hljs-number">2</span>)<br>(<span class="hljs-name"><span class="hljs-built_in">quotient</span></span> <span class="hljs-number">10</span> <span class="hljs-number">2</span>)<br>scm&gt; (<span class="hljs-name"><span class="hljs-built_in">eval</span></span> (<span class="hljs-name"><span class="hljs-built_in">list</span></span> <span class="hljs-symbol">&#x27;quotient</span> <span class="hljs-number">10</span> <span class="hljs-number">2</span>))<br><span class="hljs-number">5</span><br><span class="hljs-comment">;原来注释是这样写阿</span><br></code></pre></td></tr></table></figure><p>eval：获取右边表达式的值</p><p>这样就可以<strong>用代码写代码</strong>了！</p><h6 id="一些eg"><a href="#一些eg" class="headerlink" title="一些eg"></a>一些eg</h6><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221109162536356.png" alt="image-20221109162536356"></p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221109162913266.png" alt="image-20221109162913266" style="zoom:80%;" /><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221109162921334.png" alt="image-20221109162921334" style="zoom:80%;" /><h2 id="Generating-code"><a href="#Generating-code" class="headerlink" title="Generating code"></a>Generating code</h2><h5 id="Quasiquotation"><a href="#Quasiquotation" class="headerlink" title="Quasiquotation"></a>Quasiquotation</h5><p> two ways to quote</p><ul><li>Quote: <code>&#39;(a b) =&gt; (a b) </code></li><li>Quasiquote: &#96;&#96;(a b) &#x3D;&gt; (a b)&#96;</li></ul><p>Difference:  quasiquoted expression can be <strong>unquoted with <code>,</code></strong></p><ul><li>Quote:<code>&#39;(a ,(+ b 1)) =&gt; (a (unquote (+ b 1))</code></li><li>Quasiquote: &#96;&#96;(a ,(+ b 1)) &#x3D;&gt; (a 5)&#96;</li></ul><p>Quasiquotation is particularly convenient for generating Scheme expressions:</p><h5 id="eg-while-statements"><a href="#eg-while-statements" class="headerlink" title="eg:while statements"></a>eg:while statements</h5><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221109164159442.png" alt="image-20221109164159442"></p><p>有意思的部分来了！现在让scheme自己把代码写出来！</p><blockquote><p>想做做今天的作业看看了</p></blockquote><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">define</span></span>   (<span class="hljs-name">sum-while</span> starting-x while-condition add-to-total update-x)<br>  <span class="hljs-comment">; (eval (sum-while 2          &#x27;(&lt; x 10)       &#x27;(* x x)     &#x27;(+ x 2)))  =&gt;  120</span><br>  <span class="hljs-comment">; (eval (sum-while 1          &#x27;(&lt; (* x x) 50) &#x27;x           &#x27;(+ x 1)))  =&gt;  28</span><br>  `(begin<br>     (define (f x total)<br>       (if ,while-condition<br>         (f ,update-x (+ total ,add-to-total))<br>         total))<br>     (f ,starting-x <span class="hljs-number">0</span>)))<br></code></pre></td></tr></table></figure><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221109165053362.png" alt="image-20221109165053362"></p><h2 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h2><p>Handling Errors,such as:</p><ul><li>A function receives an argument value of an improper type </li><li>Some resource (such as a file) is not available </li><li>A network connection is lost in the middle of data transmission</li></ul><p>the way to handle: <strong>exception</strong></p><p>Python raises an exception whenever an error occurs Exceptions can be handled by the program, preventing the interpreter from halting</p><p>Exceptions are objects</p><p>If f calls g and g calls h, exceptions can shift control from h to f <strong>without waiting for  g to return</strong></p><h5 id="Raising-Exceptions"><a href="#Raising-Exceptions" class="headerlink" title="Raising Exceptions"></a>Raising Exceptions</h5><p><strong>assert</strong></p><p><code>assert ,&lt;expression&gt;, &lt;string&gt; </code></p><p>They can be ignored to increase efficiency  by running Python with the “-O” flag; “O” stands for optimized:<code>python3 -O</code></p><p>Whether assertions are enabled is governed by a bool <code>__debug__</code></p><h6 id="eg"><a href="#eg" class="headerlink" title="eg"></a>eg</h6><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221109184847233.png" alt="image-20221109184847233" style="zoom:80%;" /><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221109184854641.png" alt="image-20221109184854641"></p><p><strong>raise</strong></p><p><code>raise &lt;expression&gt; </code></p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221109185231372.png" alt="image-20221109185231372"></p><h6 id="eg-1"><a href="#eg-1" class="headerlink" title="eg"></a>eg</h6><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221109185317840.png" alt="image-20221109185317840" style="zoom:80%;" /><h5 id="Try-statements"><a href="#Try-statements" class="headerlink" title="Try statements"></a>Try statements</h5><p>Try statements handle exceptions</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221109190429939.png" alt="image-20221109190429939" style="zoom:80%;" /><ol><li><p>Execute <try suite></p></li><li><p>an exception is raised</p><p>not handled</p><p> inherits from <exception class></p></li><li><p>The  is executed, with  bound to the exception</p></li></ol><h6 id="eg-2"><a href="#eg-2" class="headerlink" title="eg"></a>eg</h6><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221109190720200.png" alt="image-20221109190720200" style="zoom:67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">invert</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return 1/x</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; invert(2)</span><br><span class="hljs-string">    Never printed if x is 0</span><br><span class="hljs-string">    0.5</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    result = <span class="hljs-number">1</span>/x  <span class="hljs-comment"># Raises a ZeroDivisionError if x is 0</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Never printed if x is 0&#x27;</span>)<br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">invert_safe</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return 1/x, or the string &#x27;divison by zero&#x27; if x is 0.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; invert_safe(2)</span><br><span class="hljs-string">    Never printed if x is 0</span><br><span class="hljs-string">    0.5</span><br><span class="hljs-string">    &gt;&gt;&gt; invert_safe(0)</span><br><span class="hljs-string">    &#x27;division by zero&#x27;</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> invert(x)<br>    <span class="hljs-keyword">except</span> ZeroDivisionError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(e)<br></code></pre></td></tr></table></figure><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221109192348324.png" alt="image-20221109192348324" style="zoom:80%;" /><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221109200754526.png" alt="image-20221109200754526"></p><p>👆此时因为exception已经被处理了,所以没有运行后面print hello的部分</p><h5 id="eg-reduce"><a href="#eg-reduce" class="headerlink" title="eg:reduce"></a>eg:reduce</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> operator <span class="hljs-keyword">import</span> add, mul, truediv<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reduce</span>(<span class="hljs-params">f, s, initial</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Combine elements of s pairwise using f, starting with initial.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; reduce(mul, [2, 4, 8], 1)</span><br><span class="hljs-string">    64</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> s:<br>        <span class="hljs-keyword">return</span> initial<br>    <span class="hljs-keyword">else</span>:<br>        first, rest = s[<span class="hljs-number">0</span>], s[<span class="hljs-number">1</span>:]<br>        <span class="hljs-keyword">return</span> reduce(f, rest, f(initial, first))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reduce2</span>(<span class="hljs-params">f, s, initial</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Combine elements of s pairwise using f, starting with initial.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; reduce2(mul, [2, 4, 8], 1)</span><br><span class="hljs-string">    64</span><br><span class="hljs-string">    &gt;&gt;&gt; reduce2(pow, [1, 2, 3, 4], 2)</span><br><span class="hljs-string">    16777216</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> s:<br>        initial = f(initial, x)<br>    <span class="hljs-keyword">return</span> initial<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">divide_all</span>(<span class="hljs-params">n, ds</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Divide n by every d in ds.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; divide_all(1024, [2, 4, 8])</span><br><span class="hljs-string">    16.0</span><br><span class="hljs-string">    &gt;&gt;&gt; divide_all(1024, [2, 4, 0, 8])</span><br><span class="hljs-string">    inf</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> reduce(truediv, ds, n)<br>    <span class="hljs-keyword">except</span> ZeroDivisionError:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br></code></pre></td></tr></table></figure><p>inf</p>]]></content>
    
    
    <categories>
      
      <category>CS61A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Sciense</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS61A-29-calculator</title>
    <link href="/2022/08/21/CS61A/29-calculator&amp;hw8/"/>
    <url>/2022/08/21/CS61A/29-calculator&amp;hw8/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Programming-Languages"><a href="#Programming-Languages" class="headerlink" title="Programming Languages"></a>Programming Languages</h2><p>Machine languages &amp; high level language</p><p>python可以同个调用dis（）函数看3 byte code</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221110205451594.png" alt="image-20221110205451594"></p><h6 id="eg"><a href="#eg" class="headerlink" title="eg"></a>eg</h6><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221110205847528.png" alt="image-20221110205847528"></p><hr><p>A programming language has:</p><ul><li>Syntax</li><li>Semantics</li></ul><p>To create a new programming language, you either need a:</p><ul><li>Specification: A document describe the precise syntax and semantics of the language </li><li>Canonical Implementation: An interpreter or compiler for the language</li></ul><h2 id="Parsing"><a href="#Parsing" class="headerlink" title="Parsing"></a>Parsing</h2><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221110210944897.png" alt="image-20221110210944897"></p><p>scheme read还未</p><h2 id="Caculator"><a href="#Caculator" class="headerlink" title="Caculator"></a>Caculator</h2><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221111164512567.png" alt="image-20221111164512567"></p><p><strong>Calculator Syntax</strong></p><p>The Calculator language has primitive expressions and call expressions</p><ul><li>A primitive expression is a number: 2 -4 5.6</li><li>A call expression is a combination that <ul><li>begins with an operator (+, -, *, &#x2F;) </li><li>followed by 0  or more expressions: (+ 1 2 3) (&#x2F; 3 (+ 4 5))</li></ul></li></ul><p>Expressions are represented as Scheme lists (Pair instances) that encode tree structures.</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221111164903826.png" alt="image-20221111164903826"></p><blockquote><p>我去，用scheme理解前序表达式…这才清楚嘛……</p></blockquote><p><strong>Calculator Semantics</strong></p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221111170313201.png" alt="image-20221111170313201"></p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221111170316921.png" alt="image-20221111170316921" style="zoom:80%;" /><h2 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h2><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221111171246354.png" alt="image-20221111171246354"></p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221111173235766.png" alt="image-20221111173235766"></p><h2 id="Interactive-interpreters"><a href="#Interactive-interpreters" class="headerlink" title="Interactive interpreters"></a>Interactive interpreters</h2><h1 id="HW8"><a href="#HW8" class="headerlink" title="HW8"></a>HW8</h1><p><a href="https://inst.eecs.berkeley.edu/~cs61a/fa21/hw/hw08/">Homework 8 | CS 61A Fall 2021 (berkeley.edu)</a></p><blockquote><p><a href="https://inst.eecs.berkeley.edu/~cs61a/fa21/articles/scheme-builtins/">Scheme Built-In Procedure Reference | CS 61A Fall 2021 (berkeley.edu)</a></p></blockquote><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221118212739453.png" alt="image-20221118212739453"></p><p>关于这个报错:</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221118210648099.png" alt="image-20221118210648099"></p><p>原因是:</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221118210709315.png" alt="image-20221118210709315"></p><p>所以判断等于要用<code>equal?</code></p><p>还有,cons只能由两个参数</p><p>而且用list,再递归,会变成这样:<img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221118211231893.png" alt="image-20221118211231893" style="zoom:67%;" /></p><p>查阅资料,找到要用append:</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221118211249313.png" alt="image-20221118211249313"></p><p>注意参数一定是list</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">my-filter</span> func lst)<br>    (<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name"><span class="hljs-built_in">null?</span></span> lst)<br>        nil<br>        (<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name"><span class="hljs-built_in">equal?</span></span> <span class="hljs-literal">#t</span> (<span class="hljs-name">func</span> (<span class="hljs-name"><span class="hljs-built_in">car</span></span> lst)))<br>            (<span class="hljs-name"><span class="hljs-built_in">append</span></span> (<span class="hljs-name"><span class="hljs-built_in">list</span></span> (<span class="hljs-name"><span class="hljs-built_in">car</span></span> lst)) (<span class="hljs-name">my-filter</span> func (<span class="hljs-name"><span class="hljs-built_in">cdr</span></span> lst)))<br>            (<span class="hljs-name"><span class="hljs-built_in">append</span></span> (<span class="hljs-name">my-filter</span> func (<span class="hljs-name"><span class="hljs-built_in">cdr</span></span> lst)))<br>            )<br>        )<br>    )<br></code></pre></td></tr></table></figure><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221118212718139.png" alt="image-20221118212718139"></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">interleave</span> s1 s2) <span class="hljs-symbol">&#x27;YOUR-CODE-HERE</span><br>    (<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name"><span class="hljs-built_in">null?</span></span> s1)<br>        s2<br>        (<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name"><span class="hljs-built_in">null?</span></span> s2)<br>            s1<br>            (<span class="hljs-name"><span class="hljs-built_in">append</span></span> (<span class="hljs-name"><span class="hljs-built_in">cons</span></span>(<span class="hljs-name"><span class="hljs-built_in">car</span></span> s1) nil) (<span class="hljs-name"><span class="hljs-built_in">cons</span></span> (<span class="hljs-name"><span class="hljs-built_in">car</span></span> s2) nil) (<span class="hljs-name">interleave</span> (<span class="hljs-name"><span class="hljs-built_in">cdr</span></span> s1) (<span class="hljs-name"><span class="hljs-built_in">cdr</span></span> s2)))<br>            )<br>        )<br>    )<br></code></pre></td></tr></table></figure><h4 id="3"><a href="#3" class="headerlink" title="3"></a>3</h4><p>注意形参和实参匹配阿！</p><p>括号不能嵌套使用</p><h5 id="4"><a href="#4" class="headerlink" title="4"></a>4</h5><p>比较有难度的一题</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221119171527730.png" alt="image-20221119171527730"></p><p>思路:</p><ul><li>自己定义一个函数,如果返回去除x的lst<ul><li>如果x等于car,则 nil + cdr</li><li>否则car + cdr</li></ul></li><li>然后就是car + [del_rep处理过的lst],car要往后移,所以递归调用no-repeats处理[del_rep处理过的lst]</li></ul><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">del_rep</span> x lst)<br>            (<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name"><span class="hljs-built_in">null?</span></span> lst)<br>                nil<br>                (<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name"><span class="hljs-built_in">=</span></span> x (<span class="hljs-name"><span class="hljs-built_in">car</span></span> lst))<br>                    (<span class="hljs-name"><span class="hljs-built_in">append</span></span> nil (<span class="hljs-name">del_rep</span> x (<span class="hljs-name"><span class="hljs-built_in">cdr</span></span> lst)))<br>                    (<span class="hljs-name"><span class="hljs-built_in">append</span></span> (<span class="hljs-name"><span class="hljs-built_in">cons</span></span> (<span class="hljs-name"><span class="hljs-built_in">car</span></span> lst) nil) (<span class="hljs-name">del_rep</span> x (<span class="hljs-name"><span class="hljs-built_in">cdr</span></span> lst)))<br>                )<br>            )<br>        )<br><br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">no-repeats</span> lst)<br><br>        <br>        (<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name"><span class="hljs-built_in">null?</span></span> lst)<br>            nil<br>           (<span class="hljs-name"><span class="hljs-built_in">append</span></span> (<span class="hljs-name"><span class="hljs-built_in">cons</span></span> (<span class="hljs-name"><span class="hljs-built_in">car</span></span> lst) nil) (<span class="hljs-name">no-repeats</span> (<span class="hljs-name">del_rep</span> (<span class="hljs-name"><span class="hljs-built_in">car</span></span> lst) (<span class="hljs-name"><span class="hljs-built_in">cdr</span></span> lst))))<br>        )<br>    <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CS61A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Sciense</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS61A-27-scheme</title>
    <link href="/2022/08/20/CS61A/27-scheme%20lab10%20hw7/"/>
    <url>/2022/08/20/CS61A/27-scheme%20lab10%20hw7/</url>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>Scheme itself is not commonly used in production, but has influenced many other languages, and is a good example of a functional programming language.</p></blockquote></blockquote><h1 id="Scheme-Intro"><a href="#Scheme-Intro" class="headerlink" title="Scheme Intro"></a>Scheme Intro</h1><p>在终端使用sheme：输入<code>mit-scheme</code></p><h2 id="Scheme-expressions"><a href="#Scheme-expressions" class="headerlink" title="Scheme expressions"></a>Scheme expressions</h2><ul><li><p>Primitive expressions: <code>2 3.3 true + quotient </code></p></li><li><p>Combinations: <code>(quotient 10 2) (not true)</code></p></li></ul><p>Numbers -&gt; self-evaluating;</p><p>symbols -&gt; bound to values.</p><p>scheme里的functions叫procedures</p><p>Call expressions include an operator and 0 or more operands in parentheses：</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221106170253292.png" alt="image-20221106170253292" style="zoom:67%;" /><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221106170506716.png" alt="image-20221106170506716" style="zoom:80%;" /><p>判断右边的东西是不是<code>?</code>左边的东西:</p><blockquote><p>这个<code>?</code>其实是函数名的一部分啦… …</p></blockquote><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221106170806986.png" alt="image-20221106170806986" style="zoom:80%;" /><h2 id="Scheme-Forms"><a href="#Scheme-Forms" class="headerlink" title="Scheme Forms"></a>Scheme Forms</h2><p>A combination that is not a call expression is a special form.</p><ul><li>if expression: <code>(if  &lt;predicate&gt; &lt;consequent&gt; &lt;alternative&gt; )</code></li></ul><ol><li>evaluate <code>&lt;predicate&gt;</code></li><li>evaluate <code>&lt;consequent&gt;</code> or <code>&lt;alternative&gt;</code></li></ol><ul><li><p>and or<code>(and  &lt;e1&gt; ... &lt;en&gt; ), (or &lt;e1&gt; ... &lt;en&gt; )</code></p></li><li><p>Binding symbols: <code>(define &lt;symbol&gt; &lt;expression&gt; )</code></p></li></ul>  <img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221106171944068.png" alt="image-20221106171944068" style="zoom:80%;" /><ul><li>New procedures: <code>(define (&lt;symbol&gt; &lt;formal parameters&gt;) &lt;body&gt;)</code></li></ul>  <img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221106172025295.png" alt="image-20221106172025295" style="zoom:80%;" />  <blockquote><p>有点像汇编语言</p></blockquote><h6 id="自己上机操作"><a href="#自己上机操作" class="headerlink" title="自己上机操作"></a>自己上机操作</h6><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221106172544986.png" alt="image-20221106172544986" style="zoom:67%;" /><p>可以嵌套:</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221106172600444.png" alt="image-20221106172600444" style="zoom:67%;" /><p>递归调用:</p><p>牛顿迭代法求sqrt</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221106173332774.png" alt="image-20221106173332774" style="zoom:80%;" /><h5 id="lambda-expressions"><a href="#lambda-expressions" class="headerlink" title="lambda expressions"></a>lambda expressions</h5><p>evaluate to anonymous procedures</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221106173607583.png" alt="image-20221106173607583" style="zoom:80%;" /><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221106173716179.png" alt="image-20221106173716179" style="zoom:80%;" /><h5 id="more-special-forms"><a href="#more-special-forms" class="headerlink" title="more special forms"></a>more special forms</h5><h6 id="Cond-amp-Begin"><a href="#Cond-amp-Begin" class="headerlink" title="Cond &amp; Begin"></a>Cond &amp; Begin</h6><p> cond behaves like if-elif-else statements in Python</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221106203717850.png" alt="image-20221106203717850" style="zoom:80%;" /><p>begin combines multiple expressions into one expression</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221106204134929.png" alt="image-20221106204134929" style="zoom: 67%;" /><p> let binds symbols to values temporarily; just for one expression</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221106204406176.png" alt="image-20221106204406176" style="zoom:80%;" /><p>注:在scheme中,一般用let不用define,define就像宏一样用于定义“permanent”的东西</p><h6 id="eg-Sierpinski’s-Triangle"><a href="#eg-Sierpinski’s-Triangle" class="headerlink" title="eg:Sierpinski’s Triangle"></a>eg:Sierpinski’s Triangle</h6><p>操控小箭头</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name">fd</span> <span class="hljs-number">40</span>) //向前<br>(<span class="hljs-name">rt</span> <span class="hljs-number">90</span>) //右转<span class="hljs-number">90</span>°<br>(<span class="hljs-name">lt</span> <span class="hljs-number">90</span>)<br></code></pre></td></tr></table></figure><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221106205310037.png" alt="image-20221106205310037" style="zoom:80%;" /><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name">speed</span> <span class="hljs-number">0</span>)<br>(<span class="hljs-name">rt</span> <span class="hljs-number">90</span>)<br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">line</span>) (<span class="hljs-name">fd</span> <span class="hljs-number">100</span>))<br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">twice</span> fn) (<span class="hljs-name">fn</span>) (<span class="hljs-name">fn</span>))<br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">repeat</span> k fn)<br>  <span class="hljs-comment">; Repeat fn k times.</span><br>  (<span class="hljs-name">fn</span>)<br>  (<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name"><span class="hljs-built_in">&gt;</span></span> k <span class="hljs-number">1</span>) (<span class="hljs-name">repeat</span> (<span class="hljs-name"><span class="hljs-built_in">-</span></span> k <span class="hljs-number">1</span>) fn)))<br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">tri</span> fn)<br>  <span class="hljs-comment">; Repeat fn 3 times, each followed by a 120 degree turn.</span><br>  (<span class="hljs-name">repeat</span> <span class="hljs-number">3</span> (<span class="hljs-name"><span class="hljs-built_in">lambda</span></span> () (<span class="hljs-name">fn</span>) (<span class="hljs-name">lt</span> <span class="hljs-number">120</span>))))<br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">sier</span> d k)<br>  <span class="hljs-comment">; Draw three legs of Sierpinski&#x27;s triangle to depth d.</span><br>  (<span class="hljs-name">tri</span> (<span class="hljs-name"><span class="hljs-built_in">lambda</span></span> ()<br>         (<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name"><span class="hljs-built_in">=</span></span> k <span class="hljs-number">1</span>) (<span class="hljs-name">fd</span> d) (<span class="hljs-name">leg</span> d k)))))<br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">leg</span> d k)<br>  <span class="hljs-comment">; Draw one leg of Sierpinski&#x27;s triangle to depth d.</span><br>  (<span class="hljs-name">sier</span> (<span class="hljs-name"><span class="hljs-built_in">/</span></span> d <span class="hljs-number">2</span>) (<span class="hljs-name"><span class="hljs-built_in">-</span></span> k <span class="hljs-number">1</span>))<br>  (<span class="hljs-name">penup</span>) (<span class="hljs-name">fd</span> d) (<span class="hljs-name">pendown</span>))<br>(<span class="hljs-name">sier</span> <span class="hljs-number">200</span> <span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221106205650546.png" alt="image-20221106205650546" style="zoom:67%;" /><h5 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h5><p>Every scheme list is a link list</p><ul><li>cons: Two-argument procedure that creates a linked list </li><li>car: Procedure that returns the first element of a list</li><li>cdr: Procedure that returns the rest of a list</li><li>nil: The empty list</li></ul><p> Scheme lists are written in parentheses with elements separated by spaces</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221106211350945.png" alt="image-20221106211350945"></p><p>还可以draw</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221106211737244.png" alt="image-20221106211737244" style="zoom: 67%;" /><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221106212800466.png" alt="image-20221106212800466" style="zoom:67%;" /><h5 id="Symbolic-Programming"><a href="#Symbolic-Programming" class="headerlink" title="Symbolic Programming"></a>Symbolic Programming</h5><p>quote可以让symbol也变成value</p><blockquote><p>人话:字符</p></blockquote><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221106213749144.png" alt="image-20221106213749144"></p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221106213759104.png" alt="image-20221106213759104"></p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221106213854836.png" alt="image-20221106213854836" style="zoom:80%;" /><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221106213915060.png" alt="image-20221106213915060"></p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221106213939837.png" alt="image-20221106213939837"></p><h1 id="Lab-10"><a href="#Lab-10" class="headerlink" title="Lab 10"></a>Lab 10</h1><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs scheme">------quotient是向下取整------<br>scm&gt; (<span class="hljs-name"><span class="hljs-built_in">quotient</span></span> <span class="hljs-number">29</span> <span class="hljs-number">5</span>)<br>? <span class="hljs-number">6</span><br>-- Not quite. Try again! --<br><br>? <span class="hljs-number">5</span><br>-- OK! --<br><br>------Scheme uses <span class="hljs-symbol">&#x27;=</span>&#x27; instead of <span class="hljs-symbol">&#x27;==</span>&#x27; for comparison------<br>scm&gt; (<span class="hljs-name"><span class="hljs-built_in">=</span></span> <span class="hljs-number">1</span> <span class="hljs-number">3</span>)<br><br>------or 最原始的感觉,遇到true的值就停了------<br>scm&gt; (<span class="hljs-name"><span class="hljs-built_in">or</span></span> <span class="hljs-number">1</span> <span class="hljs-literal">#t</span>)                  <span class="hljs-comment">; or special form short circuits</span><br>? #t<br>-- Not quite. Try again! --<br>? #f<br>-- Not quite. Try again! --<br>? <span class="hljs-number">1</span><br>-- OK! --<br><br>------define的返回值------<br>scm&gt; (<span class="hljs-name"><span class="hljs-built_in">define</span></span> x <span class="hljs-number">3</span>)<br>? x<br>-- OK! --<br><br>------lambda后面的是形参,不是前面提到的值------<br>scm&gt; (<span class="hljs-name"><span class="hljs-built_in">define</span></span> x (<span class="hljs-name"><span class="hljs-built_in">lambda</span></span> (y) (<span class="hljs-name"><span class="hljs-built_in">*</span></span> y <span class="hljs-number">2</span>)))<br>? x<br>-- OK! --<br>scm&gt; (<span class="hljs-name">x</span> y)<br>? [<span class="hljs-name">14</span>,<span class="hljs-number">7</span>]<br>-- Not quite. Try again! --<br>? <span class="hljs-number">14</span><br>-- OK! --<br><br>------if语句没只过去,但是hi是在传参的时候被print的------<br>scm&gt; (<span class="hljs-name">foo</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> (<span class="hljs-name">print</span> <span class="hljs-symbol">&#x27;hi</span>))<br>(<span class="hljs-name">line</span> <span class="hljs-number">1</span>)? hi<br>(<span class="hljs-name">line</span> <span class="hljs-number">2</span>)? <span class="hljs-number">2</span><br>-- OK! --<br>------scheme传参是不用括号的！-------<br><br>------被耍了草------<br>scm&gt; ((<span class="hljs-name"><span class="hljs-built_in">lambda</span></span> (a) (<span class="hljs-name">print</span> <span class="hljs-symbol">&#x27;a</span>)) <span class="hljs-number">100</span>)<br>? <span class="hljs-number">100</span><br>-- Not quite. Try again! --<br>? <span class="hljs-symbol">&#x27;100</span><br>-- Not quite. Try again! --<br>? a<br>-- OK! --<br></code></pre></td></tr></table></figure><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p>关于什么时候加括号的问题：</p><p>函数定义<code>define (over-or-under num1 num2) </code> 应该是把后面 <code>函数名 参数</code>也看成一个expression了</p><blockquote><p>看来scheme对理解编译原理是有帮助的阿…</p></blockquote><h4 id="3"><a href="#3" class="headerlink" title="3"></a>3</h4><blockquote><p>Write the procedure <code>make-adder</code> which takes in an initial number, <code>num</code>, and then returns a procedure. This returned procedure takes in a number <code>inc</code> and returns the result of <code>num + inc</code>.</p></blockquote><p> Scheme will automatically <strong>return the last clause</strong> in your procedure.</p><p>更深的理解:</p><p><code>(操作  参数)</code></p><p>既然它会自动返回最后一个clause</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">make-adder</span> num) <br>    (<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">add</span> inc) (<span class="hljs-name"><span class="hljs-built_in">+</span></span> num inc))<br>    add)<br></code></pre></td></tr></table></figure><p>那最后一个clause就直接留一个函数吧!</p><h4 id="4"><a href="#4" class="headerlink" title="4"></a>4</h4><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scheme">scm&gt; c<br>? (<span class="hljs-name">3</span> (<span class="hljs-name">2</span> <span class="hljs-number">1</span>))<br>-- OK! --<br><br>scm&gt; (<span class="hljs-name"><span class="hljs-built_in">cdr</span></span> c)<br>? (<span class="hljs-name">2</span> <span class="hljs-number">1</span>)<br>-- Not quite. Try again! --<br><br>? ((<span class="hljs-name">2</span> <span class="hljs-number">1</span>))<br>-- OK! --<br></code></pre></td></tr></table></figure><p>cdr是一个list</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scheme">scm&gt; (<span class="hljs-name"><span class="hljs-built_in">cdr</span></span> (<span class="hljs-name"><span class="hljs-built_in">car</span></span> (<span class="hljs-name"><span class="hljs-built_in">cdr</span></span> c)))<br>? nil<br>-- Not quite. Try again! --<br><br>?<br>-- Not quite. Try again! --<br><br>? ()<br>-- Not quite. Try again! --<br><br>? <span class="hljs-number">1</span><br>-- Not quite. Try again! --<br><br>? (<span class="hljs-name">1</span>)<br>-- OK! --<br></code></pre></td></tr></table></figure><p><img src="https://inst.eecs.berkeley.edu/~cs61a/fa21/lab/lab10/assets/list2.png" alt="linked list"></p><p>2不是sublist的开头元素,而是这个list的第二个元素</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scheme">type out exactly how Scheme would print the list that will be defined in this problem (<span class="hljs-name">see</span> spec)<br>? ((<span class="hljs-name">1</span>) <span class="hljs-number">2</span> (<span class="hljs-name">3</span> <span class="hljs-number">4</span>) <span class="hljs-number">5</span>)<br>-- OK! --<br></code></pre></td></tr></table></figure><p>implement一个scheme list的方法:<br>先把打印形式写出来,然后再把cons和nil加进去</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">define</span></span> lst <br>   (<span class="hljs-name"><span class="hljs-built_in">cons</span></span> (<span class="hljs-name"><span class="hljs-built_in">cons</span></span> <span class="hljs-number">1</span> nil) <br>         (<span class="hljs-name"><span class="hljs-built_in">cons</span></span> <span class="hljs-number">2</span> <br>                 (<span class="hljs-name"><span class="hljs-built_in">cons</span></span> (<span class="hljs-name"><span class="hljs-built_in">cons</span></span> <span class="hljs-number">3</span> (<span class="hljs-name"><span class="hljs-built_in">cons</span></span> <span class="hljs-number">4</span> nil)) <br>                       (<span class="hljs-name"><span class="hljs-built_in">cons</span></span> <span class="hljs-number">5</span> nil)))<br>         )<br>     )<br></code></pre></td></tr></table></figure><h1 id="HW-07"><a href="#HW-07" class="headerlink" title="HW 07"></a>HW 07</h1><h5 id="2-1"><a href="#2-1" class="headerlink" title="2"></a>2</h5><p>这里的#t不能写成（#t），因为这是call的表达式，而#t是call不了的。</p><p>call的表达式一定要符合<code>(操作 被操作的东西)</code></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">ordered?</span> s) <br>    (<span class="hljs-name"><span class="hljs-built_in">cond</span></span> ((<span class="hljs-name"><span class="hljs-built_in">null?</span></span> s) <span class="hljs-literal">#t</span>)<br>          ((<span class="hljs-name"><span class="hljs-built_in">null?</span></span> (<span class="hljs-name"><span class="hljs-built_in">cdr</span></span> s)) <span class="hljs-literal">#t</span>)<br>          (<span class="hljs-name"><span class="hljs-built_in">else</span></span> <br>                (<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name"><span class="hljs-built_in">&gt;</span></span> (<span class="hljs-name"><span class="hljs-built_in">car</span></span> s) (<span class="hljs-name"><span class="hljs-built_in">cadr</span></span> s))<br>                  <span class="hljs-literal">#f</span><br>                  (<span class="hljs-name">ordered?</span> (<span class="hljs-name"><span class="hljs-built_in">cdr</span></span> s))))<br>        )<br>    )<br></code></pre></td></tr></table></figure><h4 id="3-1"><a href="#3-1" class="headerlink" title="3"></a>3</h4><p>总之要注意这一个test:</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221108203318449.png" alt="image-20221108203318449"></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">pow</span> base exp) <br>    (<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name"><span class="hljs-built_in">=</span></span> <span class="hljs-number">1</span> base)<br>        <span class="hljs-number">1</span><br>        (<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name"><span class="hljs-built_in">even?</span></span> exp)<br>        (<span class="hljs-name">square</span> (<span class="hljs-name">pow</span> base (<span class="hljs-name"><span class="hljs-built_in">/</span></span> exp <span class="hljs-number">2</span>)))<br>        (<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name"><span class="hljs-built_in">=</span></span> <span class="hljs-number">1</span> exp)<br>            base<br>            (<span class="hljs-name"><span class="hljs-built_in">*</span></span> base (<span class="hljs-name">pow</span> base (<span class="hljs-name"><span class="hljs-built_in">-</span></span> exp <span class="hljs-number">1</span>)))<br>            )<br>        )<br>    )<br>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CS61A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Sciense</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS61A-24</title>
    <link href="/2022/08/18/CS61A/24-data%20examples/"/>
    <url>/2022/08/18/CS61A/24-data%20examples/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="Lists-in-Environment-Diagrams"><a href="#Lists-in-Environment-Diagrams" class="headerlink" title="Lists in Environment Diagrams"></a>Lists in Environment Diagrams</h3><h6 id="对比append和extend"><a href="#对比append和extend" class="headerlink" title="对比append和extend"></a>对比append和extend</h6><p>对于append，是把s的末尾指向了t</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105145800510.png" alt="image-20221105145800510"></p><p>而对于extend，是在s末尾增加了t的元素，修改t并不会改变s</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105145942501.png" alt="image-20221105145942501" style="zoom:67%;" /><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105150001897.png" alt="image-20221105150001897" style="zoom:67%;" /><h6 id="addtion-amp-slicing"><a href="#addtion-amp-slicing" class="headerlink" title="addtion &amp; slicing"></a>addtion &amp; slicing</h6><p><code>a = s + [t]</code>:新建了一个list指向t</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105150149404.png" alt="image-20221105150149404" style="zoom:67%;" /><p>然后把s和这个新建的list加起来</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105150623586.png" alt="image-20221105150623586" style="zoom:67%;" /><p>而实际上,新建的那个list是临时创建 ,reach不到的,为了好表达,就变成了上面这幅图了.</p><p><code>b = a[1:]</code>:看看b长啥样,后面长得和a一样</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105150801265.png" alt="image-20221105150801265" style="zoom:67%;" /><p><code>a[1] = 9 </code></p><p><code>b[1][1] = 0</code></p><p>看看<code>b[1][1]</code>是哪个:<img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105150929656.png" alt="image-20221105150929656" style="zoom:67%;" /></p><p>ei!t也被改了.</p><h6 id="The-list-function"><a href="#The-list-function" class="headerlink" title="The list function"></a>The list function</h6><p>creates a new  list containing  existing elements</p><p><code>t = list(s)</code></p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105151747106.png" alt="image-20221105151747106" style="zoom:67%;" /><h6 id="slice-assignment"><a href="#slice-assignment" class="headerlink" title="slice assignment"></a>slice assignment</h6><p>replaces a slice with  new values</p><p><code>s[0:0] = t</code></p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105151942789.png" alt="image-20221105151942789" style="zoom:67%;" /><p><code>s[3:] = t</code></p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105152021481.png" alt="image-20221105152021481" style="zoom:80%;" /><h6 id="others"><a href="#others" class="headerlink" title="others"></a>others</h6><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105152226392.png" alt="image-20221105152226392" style="zoom:80%;" /><h6 id="Lists-in-Lists-in-Lists-in-Environment-Diagrams"><a href="#Lists-in-Lists-in-Lists-in-Environment-Diagrams" class="headerlink" title="Lists in Lists in Lists in Environment Diagrams"></a>Lists in Lists in Lists in Environment Diagrams</h6><p><code>t[1:3] = [t]</code>:先build一个list containing t</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105154244843.png" alt="image-20221105154244843" style="zoom:80%;" /><p>然后replace:</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105154340326.png" alt="image-20221105154340326" style="zoom:67%;" /><p><code>t.extend(t)</code></p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105154517582.png" alt="image-20221105154517582" style="zoom:67%;" /><blockquote><p>???为什么</p></blockquote><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105154700475.png" alt="image-20221105154700475"></p><p>而append是把t[1:2]当成一个list元素加进去</p><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><ul><li>Instance attributes are found before class attributes; </li><li>class attributes are inherited</li></ul><p>eg:land owners</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105163338850.png" alt="image-20221105163338850"></p><p>注意这个<code>jack.greeting = ‘Maam’</code>先找了jack instance里的,但是没有,尽管如此</p><p>然后往jack这个instance里加了greeting,而不是修改了类的greeting</p><blockquote><p>就是说,jack自己改了自己的,当然不能连所有人的一起改喽.</p></blockquote><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105164219995.png" alt="image-20221105164219995" style="zoom:80%;" /><p>第二个是有‘’的</p><p><code>john.elf</code>似乎是指他的父亲(继承的class)</p><h2 id="Iterables-amp-Iterators"><a href="#Iterables-amp-Iterators" class="headerlink" title="Iterables &amp; Iterators"></a>Iterables &amp; Iterators</h2><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105164659711.png" alt="image-20221105164659711"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">min_abs_indices</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-comment">#我的:</span><br>    <span class="hljs-comment">#return [i for i in range(len(s)) if abs(s[i]) == abs(min(s, key=abs))]</span><br>    <span class="hljs-comment">#老师的:</span><br>    min_abs = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">abs</span>, s))<br>    <span class="hljs-keyword">return</span> [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)) <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(s[i]) == min_abs]<br></code></pre></td></tr></table></figure><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105164710509.png" alt="image-20221105164710509"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">largest_adj_sum</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-comment">#我的(和老师说的第一种方法一样👍)</span><br>    <span class="hljs-comment">#return max([s[i] + s[i + 1] for i in range(len(s) - 1)])</span><br>    <span class="hljs-comment">#第二种方法</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(i + j <span class="hljs-keyword">for</span> i, j <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(s[:-<span class="hljs-number">1</span>], s[<span class="hljs-number">1</span>:]))<span class="hljs-comment">#和老师一样捏</span><br>    <br></code></pre></td></tr></table></figure><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105164812217.png" alt="image-20221105164812217"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">digit_dict</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-comment">#mine</span><br>    <span class="hljs-keyword">return</span> &#123;x: [y <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> s <span class="hljs-keyword">if</span> x == y % <span class="hljs-number">10</span>] <br>            <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x % <span class="hljs-number">10</span>, s)&#125;<br><span class="hljs-comment">#instructor</span><br>    <span class="hljs-keyword">return</span> &#123;d: [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> s <span class="hljs-keyword">if</span> x % <span class="hljs-number">10</span> == d] <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>([x % <span class="hljs-number">10</span> == d <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> s])&#125;<br></code></pre></td></tr></table></figure><p>这个any,以及dict的built-in function是新接触到的用法</p><p>any:后面的列表里有一个true就返回true</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105165105276.png" alt="image-20221105165105276"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">all_have_an_equal</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-comment">#这种方法不行,因为它表示要全部元素相等</span><br>    <span class="hljs-comment">#return all([x == y for x in s y in s])</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">all</span>([s[i] <span class="hljs-keyword">in</span> s[<span class="hljs-number">0</span>:i] + s[i+<span class="hljs-number">1</span>:] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s))])<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>([<span class="hljs-built_in">sum</span>([<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> s <span class="hljs-keyword">if</span> y == x]) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> s]) &gt;= <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="Linked-List"><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h2><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105202550676.png" alt="image-20221105202550676"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ordered</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-comment">#注:没说不能出现一个或者空的</span><br>    <span class="hljs-keyword">if</span> s <span class="hljs-keyword">is</span> Link.empty <span class="hljs-keyword">or</span> s.rest <span class="hljs-keyword">is</span> Link.empty:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">all</span>(s.first &lt;= s.rest.first, ordered(s.rest))<br>    <span class="hljs-comment">#我觉得我这个比老师的好^ ^</span><br><br><span class="hljs-comment">#加上了key的版本</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ordered</span>(<span class="hljs-params">s, key=<span class="hljs-keyword">lambda</span> x:x</span>):<br><span class="hljs-keyword">if</span> s <span class="hljs-keyword">is</span> Link.empty <span class="hljs-keyword">or</span> s.rest <span class="hljs-keyword">is</span> Link.empty:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">all</span>(key(s.first) &lt;= key(s.rest.first), ordered(s.rest))<br></code></pre></td></tr></table></figure><p>老师的版本:</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105203231248.png" alt="image-20221105203231248" style="zoom:67%;" /><p>其实这个递归的return不需要用and,只要递归的时候有false就会return了,如果没有false就一直到base case,然后return true</p><p>所以老师的版本还利用了base case</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221105204203097.png" alt="image-20221105204203097"></p><p>自己这个写的着实不行,可能是想复杂了.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge_in_place</span>(<span class="hljs-params">s, t</span>):<br>    <span class="hljs-keyword">if</span> t == Link.empty:<br>        <span class="hljs-keyword">return</span> s<br>    <span class="hljs-keyword">elif</span> s.rest == Link.empty:<br>        <span class="hljs-keyword">if</span> s.first &lt; t.first:<br>            s.rest = t<br>        <span class="hljs-keyword">else</span>:<br>            s.rest = Link(s.first)<br>            s.first = t.first<br>        <span class="hljs-keyword">return</span> s<br>    <span class="hljs-keyword">else</span>:<br>        s2 = s<br>        <span class="hljs-keyword">while</span>(s2.rest.first &lt; t.first):<br>            s2 = s2.rest<br>        s_re = s2.rest<br>        s2.rest = t<br>        s2.rest.rest = s_re<br>        <span class="hljs-keyword">return</span> merge_in_place(s, t.rest)<br></code></pre></td></tr></table></figure><p>还是学一下老师的吧:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">s, t</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return a sorted Link containing the elements of sorted s &amp; t.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; a = Link(1, Link(5))</span><br><span class="hljs-string">    &gt;&gt;&gt; b = Link(1, Link(4))</span><br><span class="hljs-string">    &gt;&gt;&gt; merge(a, b)</span><br><span class="hljs-string">    Link(1, Link(1, Link(4, Link(5))))</span><br><span class="hljs-string">    &gt;&gt;&gt; a</span><br><span class="hljs-string">    Link(1, Link(5))</span><br><span class="hljs-string">    &gt;&gt;&gt; b</span><br><span class="hljs-string">    Link(1, Link(4))</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> s <span class="hljs-keyword">is</span> Link.empty:<br>        <span class="hljs-keyword">return</span> t<br>    <span class="hljs-keyword">elif</span> t <span class="hljs-keyword">is</span> Link.empty:<br>        <span class="hljs-keyword">return</span> s<br>    <span class="hljs-keyword">elif</span> s.first &lt;= t.first:<br>        <span class="hljs-keyword">return</span> Link(s.first, merge(s.rest, t))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> Link(t.first, merge(s, t.rest))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge_in_place</span>(<span class="hljs-params">s, t</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return a sorted Link containing the elements of sorted s &amp; t.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; a = Link(1, Link(5))</span><br><span class="hljs-string">    &gt;&gt;&gt; b = Link(1, Link(4))</span><br><span class="hljs-string">    &gt;&gt;&gt; merge_in_place(a, b)</span><br><span class="hljs-string">    Link(1, Link(1, Link(4, Link(5))))</span><br><span class="hljs-string">    &gt;&gt;&gt; a</span><br><span class="hljs-string">    Link(1, Link(1, Link(4, Link(5))))</span><br><span class="hljs-string">    &gt;&gt;&gt; b</span><br><span class="hljs-string">    Link(1, Link(4, Link(5)))#因为t那里不包含等于,所以t乐意当作是去重</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> s <span class="hljs-keyword">is</span> Link.empty:<br>        <span class="hljs-keyword">return</span> t<br>    <span class="hljs-keyword">elif</span> t <span class="hljs-keyword">is</span> Link.empty:<br>        <span class="hljs-keyword">return</span> s<br>    <span class="hljs-keyword">elif</span> s.first &lt;= t.first:<br>        s.rest = merge_in_place(s.rest, t)<br>        <span class="hljs-keyword">return</span> s<br>    <span class="hljs-keyword">else</span>:<br>        t.rest = merge_in_place(s, t.rest)<br>        <span class="hljs-keyword">return</span> t<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CS61A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Sciense</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS61A-23-decomposision</title>
    <link href="/2022/08/17/CS61A/23-decomposition/"/>
    <url>/2022/08/17/CS61A/23-decomposition/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Python-modules"><a href="#Python-modules" class="headerlink" title="Python modules"></a>Python modules</h2><p>A <a href="https://docs.python.org/3/tutorial/modules.html">Python module</a> is a file typically containing function or class definitions.</p><p>import的方式有三种:</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221104205050758.png" alt="image-20221104205050758" style="zoom: 50%;" /><p>with alias:<img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221104205149284.png" alt="image-20221104205149284" style="zoom: 50%;" /></p><h5 id="run-a-module"><a href="#run-a-module" class="headerlink" title="run a module"></a>run a module</h5><p>This command runs a module:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">📄<span class="hljs-keyword">python</span> module.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>When run like that, Python sets a global variable <code>__name__</code> to “main”.</p><p> you often see code at the bottom of modules like this:</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">📄<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    # use the <span class="hljs-keyword">code</span> <span class="hljs-keyword">in</span> the <span class="hljs-keyword">module</span> somehow<br></code></pre></td></tr></table></figure><p>The code <strong>inside that condition will be executed as well</strong></p><h2 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h2><p>A <a href="https://docs.python.org/3/tutorial/modules.html#packages">Python package</a> is a way of bundling multiple related modules together. </p><p>Popular packages are NumPy and Pillow.</p><p>import方式:<img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221104205425035.png" alt="image-20221104205425035" style="zoom: 50%;" /></p><p><code>pip</code> is the standard way to install package</p><h2 id="Modular-Design"><a href="#Modular-Design" class="headerlink" title="Modular Design"></a>Modular Design</h2><p>Ways to isolate in Python:</p><ul><li>Functions</li><li>Classes</li><li>Modules</li><li>Packages</li></ul><p><strong>Separation of Concerns</strong></p><ul><li>Isolate different parts of a program that address different concerns</li><li>A modular component can be <strong>developed and tested independently</strong></li></ul><p>互相不用知道对方怎么实现的，separate了</p><img src="C:/Users/Liu%20Junxin/AppData/Roaming/Typora/typora-user-images/image-20221104143458938.png" alt="image-20221104143458938" style="zoom:67%;" /><p>并且，修改一个part的时候，不需要修改别的part</p><h5 id="eg：restaurant"><a href="#eg：restaurant" class="headerlink" title="eg：restaurant"></a>eg：restaurant</h5><p>data长这样：<img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221104143815957.png" alt="image-20221104143815957" style="zoom: 67%;" /></p><p>有餐馆信息,user review信息</p><blockquote><p>user_id:不是给联系方式啥的,而是indicate是不是同个user写了不同的评论之类.</p></blockquote><p>现在要写一个程序能“ look up a restaurant by name and show related restaurants “</p><h6 id="search"><a href="#search" class="headerlink" title="search"></a>search</h6><p>我们不知道all_restaurants是什么,但是可以先把逻辑写出来,之后再来修改它:</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221104205734421.png" alt="image-20221104205734421" style="zoom:67%;" /><p>因为ranking是正序的,所以stars取负值,这样前面的就是stars最多的</p><p>当现在implement有点困难的时候,最好的方法是先写个docstring:</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221104210120737.png" alt="image-20221104210120737" style="zoom: 67%;" /><p>下面来完成这个simiilar把!</p><h6 id="similar"><a href="#similar" class="headerlink" title="similar"></a>similar</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">sorted</span>(iterable, /, *, key=<span class="hljs-literal">None</span>, reverse=<span class="hljs-literal">False</span>)<br> Return a new <span class="hljs-built_in">list</span> containing <span class="hljs-built_in">all</span> items <span class="hljs-keyword">from</span> the iterable <span class="hljs-keyword">in</span> ascending order.<br> A custom key function can be supplied to customize the sort order, <span class="hljs-keyword">and</span> the reverse flag can be <span class="hljs-built_in">set</span> to request the result <span class="hljs-keyword">in</span> descending order.<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">similar</span>(<span class="hljs-params">self, k, similarity=num_shared_reviewers</span>):<br>        <span class="hljs-string">&quot;Return the K most similar restaurants to SELF, using SIMILARITY for comparison.&quot;</span><br>        others = <span class="hljs-built_in">list</span>(Restaurant.<span class="hljs-built_in">all</span>)<br>        others.remove(self)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sorted</span>(others, key= <span class="hljs-keyword">lambda</span> k:-similarity(self, k) )[:k]<br></code></pre></td></tr></table></figure><h6 id="reading-files"><a href="#reading-files" class="headerlink" title="reading files"></a>reading files</h6><p>用python的json包来处理（就是变成了字典）</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221104212321026.png" alt="image-20221104212321026" style="zoom:80%;" /><h6 id="Set-Intersection"><a href="#Set-Intersection" class="headerlink" title="Set Intersection"></a>Set Intersection</h6><p>之前的similarity search太费时间了,因此改成linear time的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fast_overlap</span>(<span class="hljs-params">s, t</span>): <br> <span class="hljs-string">&quot;&quot;&quot;Return the overlap between sorted S and sorted T. </span><br><span class="hljs-string"> &gt;&gt;&gt; fast_overlap([3, 4, 6, 7, 9, 10], [1, 3, 5, 7, 8]) </span><br><span class="hljs-string"> 2 </span><br><span class="hljs-string"> &quot;&quot;&quot;</span> <br> i, j, count = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br> <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(s) <span class="hljs-keyword">and</span> j &lt; <span class="hljs-built_in">len</span>(t):<br>        <span class="hljs-keyword">if</span> s[i] == t[j]:<br>            count, i, j = count + <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>, j + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> s[i] &lt; t[j]:<br>            i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span>:<br>            j += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> count<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CS61A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Sciense</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS61A-21-recursive objects</title>
    <link href="/2022/08/15/CS61A/21-recursive%20objects&amp;hw6%20&amp;lab8/"/>
    <url>/2022/08/15/CS61A/21-recursive%20objects&amp;hw6%20&amp;lab8/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Linked-lists"><a href="#Linked-lists" class="headerlink" title="Linked lists"></a>Linked lists</h2><h4 id="concept"><a href="#concept" class="headerlink" title="concept"></a>concept</h4><p>linked list structure is:</p><ul><li>empty</li><li>a first value and the rest of the linked list</li></ul><img src="C:/Users/Liu%20Junxin/AppData/Roaming/Typora/typora-user-images/image-20221031155609930.png" alt="image-20221031155609930" style="zoom:67%;" /><ul><li><p>The first (zeroth)  element is an  attribute value</p></li><li><p>The rest of the  elements are stored  in a linked list</p></li><li><p>link.empty is a class attribute represents  an empty linked list</p></li></ul><p><code>Link(3, Link(4, Link(5, Link.empty)))</code></p><blockquote><p>有点像tree呢</p></blockquote><p>也可以这样表示：<img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221031155933124.png" alt="image-20221031155933124" style="zoom:67%;" /></p><p><strong>implement the class</strong>：</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221031160350686.png" alt="image-20221031160350686" style="zoom: 67%;" /><p><code>help(isinstance)</code>: Return whether an object is an instance of a class or of a subclass thereof.</p><p>使用eg:</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221031160652964.png" alt="image-20221031160652964" style="zoom: 80%;" /><h4 id="Processing"><a href="#Processing" class="headerlink" title="Processing"></a>Processing</h4><p>和<code>iterator</code>处理的结合使用</p><p>搞清楚linklist的递归特征就很好写了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">range_link</span>(<span class="hljs-params">start, end</span>): <br>     <span class="hljs-string">&quot;&quot;&quot;Return a Link containing consecutive integers from start to end.</span><br><span class="hljs-string">     &gt;&gt;&gt; range_link(3, 6)</span><br><span class="hljs-string">     Link(3, Link(4, Link(5)))</span><br><span class="hljs-string">     &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> start &gt;= end:<br>            <span class="hljs-keyword">return</span> Link.empty<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> Link(start, range_link(start + <span class="hljs-number">1</span>, end))<br>                <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">map_link</span>(<span class="hljs-params">f, s</span>): <br>     <span class="hljs-string">&quot;&quot;&quot;Return a Link that contains f(x) for each x in Link s.</span><br><span class="hljs-string">     &gt;&gt;&gt; map_link(square, range_link(3, 6))</span><br><span class="hljs-string">     Link(9, Link(16, Link(25)))</span><br><span class="hljs-string">     &quot;&quot;&quot;</span><br>        <span class="hljs-string">&quot;&quot;&quot;if len(s) &lt;= 0:</span><br><span class="hljs-string">            return Link.empty</span><br><span class="hljs-string">        else:</span><br><span class="hljs-string">            return Link(f(s[0]), map_link(f, s[1:]))&quot;&quot;&quot;</span><br>        <span class="hljs-comment">#注意s是一个link</span><br>        <span class="hljs-comment">#老师的:</span><br>        <span class="hljs-keyword">if</span> s <span class="hljs-keyword">is</span> Link.empty:<br>            <span class="hljs-keyword">return</span> s<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> Link(f(s.first), map_link(f, s.rest))<br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">filter_link</span>(<span class="hljs-params">f, s</span>): <br>     <span class="hljs-string">&quot;&quot;&quot;Return a Link that contains only the elements x of Link s for which f(x) is a true value.</span><br><span class="hljs-string">     &gt;&gt;&gt; filter_link(odd, range_link(3, 6))</span><br><span class="hljs-string">     Link(3, Link(5))</span><br><span class="hljs-string">     &quot;&quot;&quot;</span><br>        <span class="hljs-string">&quot;&quot;&quot;is s is Link.empty:</span><br><span class="hljs-string">            return s</span><br><span class="hljs-string">        else:</span><br><span class="hljs-string">            if f(s.first):</span><br><span class="hljs-string">                return Link(s.first, filter_link(s.rest))</span><br><span class="hljs-string">            else:</span><br><span class="hljs-string">                return filter_link(s.rest)&quot;&quot;&quot;</span><br>        <br>        <span class="hljs-comment">#老师的:差不多</span><br>        <span class="hljs-keyword">is</span> s <span class="hljs-keyword">is</span> Link.empty:<br>            <span class="hljs-keyword">return</span> s<br>        filtered_rest = filter_link(f, s.rest)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> f(s.first):<br>                <span class="hljs-keyword">return</span> Link(s.first, filtered_rest)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> filtered_rest<br>        <br></code></pre></td></tr></table></figure><h4 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h4><p>The rest of a linked list can contain the linked list as a sub-list</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221031163343755.png" alt="image-20221031163343755" style="zoom:67%;" /><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221031163410492.png" alt="image-20221031163410492" style="zoom: 67%;" /><blockquote><p>注意:对于任何object来说的<code>=</code>(list什么的也算)都表示是指向同一个变量,而不是两个内容一样的变量.</p></blockquote><h6 id="eg"><a href="#eg" class="headerlink" title="eg"></a>eg</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">s, v</span>):<br>     <span class="hljs-string">&quot;&quot;&quot;Add v to an ordered list s with no repeats, returning modified s.</span><br><span class="hljs-string">(Note: If v is already in s, then don&#x27;t modify s, but still return it.)&quot;&quot;&quot;</span><br><span class="hljs-comment">#自己</span><br>    <span class="hljs-keyword">assert</span> s <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-type">List</span>.empty<br>    <span class="hljs-keyword">if</span> s.first &gt; v:<br>        s.first, s.rest = v, Link(s.first, s.rest)<br>    <span class="hljs-keyword">elif</span> s.first &lt; v <span class="hljs-keyword">and</span> empty(s.rest):<br>        s.rest = Link(v)<br>    <span class="hljs-keyword">elif</span> s.first &lt; v:<br>        <span class="hljs-keyword">return</span> Link(s.first, add(s.rest, v))<br>    <span class="hljs-comment">#s.first == v or 以上操作完成</span><br>    <span class="hljs-keyword">return</span> s<br>    <br>    <span class="hljs-comment">#答案差不多</span><br>   <br></code></pre></td></tr></table></figure><h2 id="Tree-class"><a href="#Tree-class" class="headerlink" title="Tree class"></a>Tree class</h2><p>与linklist的区别:tree可以有很多branches</p><ul><li>Each location in a tree is called a node</li><li>Each node has a label that can be any value</li><li>The top node is the root node</li></ul><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221031174727317.png" alt="image-20221031174727317" style="zoom:67%;" /><p><strong>implement class tree:</strong></p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221031174919411.png" alt="image-20221031174919411" style="zoom:80%;" /><p>为了print和显示,需要Implement repr和str</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Trees</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tree</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;A tree is a label and a list of branches.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, label, branches=[]</span>):<br>        self.label = label<br>        <span class="hljs-keyword">for</span> branch <span class="hljs-keyword">in</span> branches:<br>            <span class="hljs-keyword">assert</span> <span class="hljs-built_in">isinstance</span>(branch, Tree)<br>        self.branches = <span class="hljs-built_in">list</span>(branches)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self.branches:<br>            branch_str = <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-built_in">repr</span>(self.branches)<br>        <span class="hljs-keyword">else</span>:<br>            branch_str = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Tree(&#123;0&#125;&#123;1&#125;)&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">repr</span>(self.label), branch_str)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\n&#x27;</span>.join(self.indented())<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">indented</span>(<span class="hljs-params">self</span>):<br>        lines = []<br>        <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> self.branches:<br>            <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> b.indented():<br>                lines.append(<span class="hljs-string">&#x27;  &#x27;</span> + line)<br>        <span class="hljs-keyword">return</span> [<span class="hljs-built_in">str</span>(self.label)] + lines<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_leaf</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">not</span> self.branches<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib_tree</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;A Fibonacci tree.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; print(fib_tree(4))</span><br><span class="hljs-string">    3</span><br><span class="hljs-string">      1</span><br><span class="hljs-string">        0</span><br><span class="hljs-string">        1</span><br><span class="hljs-string">      2</span><br><span class="hljs-string">        1</span><br><span class="hljs-string">        1</span><br><span class="hljs-string">          0</span><br><span class="hljs-string">          1</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> n == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> Tree(n)<br>    <span class="hljs-keyword">else</span>:<br>        left = fib_tree(n-<span class="hljs-number">2</span>)<br>        right = fib_tree(n-<span class="hljs-number">1</span>)<br>        fib_n = left.label + right.label<br>        <span class="hljs-keyword">return</span> Tree(fib_n, [left, right])<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">leaves</span>(<span class="hljs-params">tree</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return the leaf values of a tree.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; leaves(fib_tree(4))</span><br><span class="hljs-string">    [0, 1, 1, 0, 1]</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> t.is_leaf():<br>        <span class="hljs-keyword">return</span> [t.label]<br>    leaves_lst = []<br>    <span class="hljs-keyword">for</span> branch <span class="hljs-keyword">in</span> t.branches:<br>        <span class="hljs-comment">#leaves_lst.append(leaves(branch))</span><br>        leaves_lst.extend(leaves(branch))<br>    <span class="hljs-keyword">return</span> leaves_lst<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">height</span>(<span class="hljs-params">tree</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;The height of a tree.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> tree.is_leaf():<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>  <span class="hljs-comment">#注意不是1，好像是少一层吧</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + <span class="hljs-built_in">max</span>([height(b) <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> tree.branches])<span class="hljs-comment">#嗯！很好！</span><br>            <br><br></code></pre></td></tr></table></figure><p>关于extend和append的区别：<a href="https://zhuanlan.zhihu.com/p/342816972">python中append()和extend()区别详解 - 知乎 (zhihu.com)</a></p><p>**extend()**向列表尾部追加一个列表，将列表中的每个元素都追加进来，在原有列表上增加。而append是把后面的那整个内容挡车工一个元素加进来</p><h5 id="tree-mutation"><a href="#tree-mutation" class="headerlink" title="tree mutation"></a>tree mutation</h5><p>Removing subtrees from a  tree is called pruning </p><p>Prune branches before  recursive processing</p><p>来implement吧！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">prune</span>(<span class="hljs-params">t, n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Prune sub-trees whose label value is n.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; t = fib_tree(5)</span><br><span class="hljs-string">    &gt;&gt;&gt; prune(t, 1)</span><br><span class="hljs-string">    &gt;&gt;&gt; print(t)</span><br><span class="hljs-string">    5</span><br><span class="hljs-string">      2</span><br><span class="hljs-string">      3</span><br><span class="hljs-string">        2</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    t.branches = [b <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> t.branches <span class="hljs-keyword">if</span> b.label != n]<br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> t.branches:<br>        prune(b, n)<br><br></code></pre></td></tr></table></figure><h2 id="HW-06"><a href="#HW-06" class="headerlink" title="HW 06"></a>HW 06</h2><h5 id="1-vending-machine"><a href="#1-vending-machine" class="headerlink" title="1 vending machine"></a>1 vending machine</h5><p>注意这个打印出来的东西有‘’，说明这不是print，这是返回值</p><p>attributs放哪里？class里放这个类共有的东西，self里放这个instance个人的东西</p><h5 id="3-store-digits"><a href="#3-store-digits" class="headerlink" title="3 store digits"></a>3 store digits</h5><p>注意它的数字顺序是倒着的。</p><p>还有注意要加在最后一个rest上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">store_digits</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Stores the digits of a positive number n in a linked list.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; s = store_digits(1)</span><br><span class="hljs-string">    &gt;&gt;&gt; s</span><br><span class="hljs-string">    Link(1)</span><br><span class="hljs-string">    &gt;&gt;&gt; store_digits(2345)</span><br><span class="hljs-string">    Link(2, Link(3, Link(4, Link(5))))</span><br><span class="hljs-string">    &gt;&gt;&gt; store_digits(876)</span><br><span class="hljs-string">    Link(8, Link(7, Link(6)))</span><br><span class="hljs-string">    &gt;&gt;&gt; # a check for restricted functions</span><br><span class="hljs-string">    &gt;&gt;&gt; import inspect, re</span><br><span class="hljs-string">    &gt;&gt;&gt; cleaned = re.sub(r&quot;#.*\\n&quot;, &#x27;&#x27;, re.sub(r&#x27;&quot;&#123;3&#125;[\s\S]*?&quot;&#123;3&#125;&#x27;, &#x27;&#x27;, inspect.getsource(store_digits)))</span><br><span class="hljs-string">    &gt;&gt;&gt; print(&quot;Do not use str or reversed!&quot;) if any([r in cleaned for r in [&quot;str&quot;, &quot;reversed&quot;]]) else None</span><br><span class="hljs-string">    &gt;&gt;&gt; link1 = Link(3, Link(Link(4), Link(5, Link(6))))</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    div, res = n // <span class="hljs-number">10</span>, n % <span class="hljs-number">10</span><br>    <span class="hljs-keyword">if</span> div == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> Link(res)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment">#return Link(res, store_digits(div))注意顺序</span><br>        head = store_digits(div)<br>        tail = head<br>        <span class="hljs-comment">#l.rest = Link(res) 应该是要找到最后一个rest才对</span><br>        <span class="hljs-keyword">while</span> tail.rest != Link.empty:<br>            tail = tail.rest<br>        tail.rest = Link(res)<br>        <span class="hljs-keyword">return</span> head<br></code></pre></td></tr></table></figure><h5 id="5-Two-list"><a href="#5-Two-list" class="headerlink" title="5 Two list"></a>5 Two list</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">two_list</span>(<span class="hljs-params">vals, amounts</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Returns a linked list according to the two lists that were passed in. Assume</span><br><span class="hljs-string">    vals and amounts are the same size. Elements in vals represent the value, and the</span><br><span class="hljs-string">    corresponding element in amounts represents the number of this value desired in the</span><br><span class="hljs-string">    final linked list. Assume all elements in amounts are greater than 0. Assume both</span><br><span class="hljs-string">    lists have at least one element.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; a = [1, 3, 2]</span><br><span class="hljs-string">    &gt;&gt;&gt; b = [1, 1, 1]</span><br><span class="hljs-string">    &gt;&gt;&gt; c = two_list(a, b)</span><br><span class="hljs-string">    &gt;&gt;&gt; c</span><br><span class="hljs-string">    Link(1, Link(3, Link(2)))</span><br><span class="hljs-string">    &gt;&gt;&gt; a = [1, 3, 2]</span><br><span class="hljs-string">    &gt;&gt;&gt; b = [2, 2, 1]</span><br><span class="hljs-string">    &gt;&gt;&gt; c = two_list(a, b)</span><br><span class="hljs-string">    &gt;&gt;&gt; c</span><br><span class="hljs-string">    Link(1, Link(1, Link(3, Link(3, Link(2)))))</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    l = Link(vals[<span class="hljs-number">0</span>])<span class="hljs-comment">#因为初始化一定要first...</span><br>    t = l<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> vals:<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(amounts[i]):<br>            t.rest= Link(val)<br>            t = t.rest<br>        i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> l.rest  <span class="hljs-comment">#等于把第一个元素多做了一次，在这里圆回来   </span><br></code></pre></td></tr></table></figure><p>或者：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">vals.reverse()<br>amounts.reverse()<br>result = Link.empty<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(vals)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(amounts[i]):<br>        result = Link(vals[i], result)<br><span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><h2 id="Lab-8"><a href="#Lab-8" class="headerlink" title="Lab 8"></a>Lab 8</h2><p>初始化link的时候必须要有一个参数作为first</p><p>但是rest可以是empty</p><h5 id="Q4"><a href="#Q4" class="headerlink" title="Q4"></a>Q4</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">label_squarer</span>(<span class="hljs-params">t</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Mutates a Tree t by squaring all its elements.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; t = Tree(1, [Tree(3, [Tree(5)]), Tree(7)])</span><br><span class="hljs-string">    &gt;&gt;&gt; label_squarer(t)</span><br><span class="hljs-string">    &gt;&gt;&gt; t</span><br><span class="hljs-string">    Tree(1, [Tree(9, [Tree(25)]), Tree(49)])</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    <span class="hljs-comment">#错误解法：不应该有返回值，而是在原树上修改</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    if t.is_leaf():</span><br><span class="hljs-string">      return Tree(t.label**2)</span><br><span class="hljs-string">    else:</span><br><span class="hljs-string">      return Tree(t.label**2, [label_squarer(b) for b in t.branches])&quot;&quot;&quot;</span><br>    t.label *= t.label<br>    <span class="hljs-keyword">if</span> t.is_leaf():<br>      <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">else</span>:<br>      <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> t.branches:<br>        label_squarer(b)<br></code></pre></td></tr></table></figure><p>看注释部分写的</p><h5 id="Q5"><a href="#Q5" class="headerlink" title="Q5"></a>Q5</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">cumulative_mul</span>(<span class="hljs-params">t</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Mutates t so that each node&#x27;s label becomes the product of all labels in</span><br><span class="hljs-string">    the corresponding subtree rooted at t.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; t = Tree(1, [Tree(3, [Tree(5)]), Tree(7)])</span><br><span class="hljs-string">    &gt;&gt;&gt; cumulative_mul(t)</span><br><span class="hljs-string">    &gt;&gt;&gt; t</span><br><span class="hljs-string">    Tree(105, [Tree(15, [Tree(5)]), Tree(7)])</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    <span class="hljs-comment">#观察发现是原始节点数据的累乘，而不是修改过的，所以应该从辈份最高的开始，</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mul</span>(<span class="hljs-params">t</span>):<br>      <span class="hljs-keyword">if</span> t.is_leaf():<br>        <span class="hljs-keyword">return</span> t.label<br>      <span class="hljs-keyword">else</span>:<br>        num = t.label<br>        <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> t.branches:<br>          num *= mul(b)<br>        <span class="hljs-keyword">return</span> num<br>      <br>    t.label = mul(t)<br>    <span class="hljs-keyword">if</span> t.is_leaf():<br>      <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">else</span>:<br>      <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> t.branches:<br>        b.label = mul(b)<br></code></pre></td></tr></table></figure><p>注意一下python的变量全都是指针，全是对象，所以会被修改</p><p>不过数值型对象会有点不一样</p><h5 id="Q6"><a href="#Q6" class="headerlink" title="Q6"></a>Q6</h5><p>看我写的注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_d_leaves</span>(<span class="hljs-params">t, v</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Add d leaves containing v to each node at every depth d.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; t_one_to_four = Tree(1, [Tree(2), Tree(3, [Tree(4)])])</span><br><span class="hljs-string">    &gt;&gt;&gt; print(t_one_to_four)</span><br><span class="hljs-string">    1</span><br><span class="hljs-string">      2</span><br><span class="hljs-string">      3</span><br><span class="hljs-string">        4</span><br><span class="hljs-string">    &gt;&gt;&gt; add_d_leaves(t_one_to_four, 5)</span><br><span class="hljs-string">    &gt;&gt;&gt; print(t_one_to_four)</span><br><span class="hljs-string">    1</span><br><span class="hljs-string">      2</span><br><span class="hljs-string">        5</span><br><span class="hljs-string">      3</span><br><span class="hljs-string">        4</span><br><span class="hljs-string">          5</span><br><span class="hljs-string">          5</span><br><span class="hljs-string">        5</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; t1 = Tree(1, [Tree(3)])</span><br><span class="hljs-string">    &gt;&gt;&gt; add_d_leaves(t1, 4)</span><br><span class="hljs-string">    &gt;&gt;&gt; t1</span><br><span class="hljs-string">    Tree(1, [Tree(3, [Tree(4)])])</span><br><span class="hljs-string">    &gt;&gt;&gt; t2 = Tree(2, [Tree(5), Tree(6)])</span><br><span class="hljs-string">    &gt;&gt;&gt; t3 = Tree(3, [t1, Tree(0), t2])</span><br><span class="hljs-string">    &gt;&gt;&gt; print(t3)</span><br><span class="hljs-string">    3</span><br><span class="hljs-string">      1</span><br><span class="hljs-string">        3</span><br><span class="hljs-string">          4</span><br><span class="hljs-string">      0</span><br><span class="hljs-string">      2</span><br><span class="hljs-string">        5</span><br><span class="hljs-string">        6</span><br><span class="hljs-string">    &gt;&gt;&gt; add_d_leaves(t3, 10)</span><br><span class="hljs-string">    &gt;&gt;&gt; print(t3)</span><br><span class="hljs-string">    3</span><br><span class="hljs-string">      1</span><br><span class="hljs-string">        3</span><br><span class="hljs-string">          4</span><br><span class="hljs-string">            10</span><br><span class="hljs-string">            10</span><br><span class="hljs-string">            10</span><br><span class="hljs-string">          10</span><br><span class="hljs-string">          10</span><br><span class="hljs-string">        10</span><br><span class="hljs-string">      0</span><br><span class="hljs-string">        10</span><br><span class="hljs-string">      2</span><br><span class="hljs-string">        5</span><br><span class="hljs-string">          10</span><br><span class="hljs-string">          10</span><br><span class="hljs-string">        6</span><br><span class="hljs-string">          10</span><br><span class="hljs-string">          10</span><br><span class="hljs-string">        10</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addl</span>(<span class="hljs-params">t, v, d</span>):<br>      <span class="hljs-string">&quot;&quot;&quot;for _ in range(d + 1):</span><br><span class="hljs-string">          t.branches.append(Tree(v))&quot;&quot;&quot;</span><span class="hljs-comment">#不可以噢，因为放在这里等于说源源不断输入leaf然后新来的leaf也加leaf，所以要把增加的操作放在递归后面</span><br>      <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> t.is_leaf():<br>        <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> t.branches:<br>          addl(b, v, d + <span class="hljs-number">1</span>)<br>      <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(d):<br>          t.branches.append(Tree(v))<br>    addl(t, v, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CS61A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Sciense</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS61A-20-representation</title>
    <link href="/2022/08/14/CS61A/20-representation%20&amp;%20disc07/"/>
    <url>/2022/08/14/CS61A/20-representation%20&amp;%20disc07/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="String-representations"><a href="#String-representations" class="headerlink" title="String representations"></a>String representations</h2><p>In Python, all objects produce two string representations: </p><ul><li>The <strong>str</strong> is legible to humans</li><li>The <strong>repr</strong> is legible to the Python interpreter</li></ul><blockquote><ul><li><code>str()</code> 的输出追求可读性，输出格式要便于理解，适合用于输出内容到用户终端。</li><li><code>repr()</code> 的输出追求明确性，除了对象内容，还需要展示出对象的数据类型信息，适合开发和调试阶段使用。</li></ul><p> all objects should produce two different string representations: </p><ul><li><p>one that is human-interpretable text </p></li><li><p>one that is a Python-interpretable expression</p></li></ul></blockquote><h5 id="repr"><a href="#repr" class="headerlink" title="repr"></a>repr</h5><blockquote><p>扩展：<a href="https://www.runoob.com/python/python-func-repr.html">Python repr() 函数 | 菜鸟教程 (runoob.com)</a></p></blockquote><p><code>repr(object) -&gt; string</code></p><ul><li>Return the <strong>canonical string representation</strong> of the object.</li><li><code> eval(repr(object)) == object</code></li></ul><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221029182239064.png" alt="image-20221029182239064" style="zoom:67%;" /><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221029182251119.png" alt="image-20221029182251119" style="zoom:67%;" /><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221029184603794.png" alt="image-20221029184603794" style="zoom:80%;" /><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221029184625059.png" alt="image-20221029184625059"></p><p>表明它告诉python,这是一个字符串</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221029184633284.png" alt="image-20221029184633284" style="zoom:80%;" /><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221029184645176.png" alt="image-20221029184645176" style="zoom:80%;" /><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221029184651714.png" alt="image-20221029184651714"></p><h5 id="str"><a href="#str" class="headerlink" title="str"></a>str</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> fractions <span class="hljs-keyword">import</span> Fraction<br><span class="hljs-meta">&gt;&gt;&gt; </span>half = Fraction(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">repr</span>(half)<br><span class="hljs-string">&#x27;Fraction(1, 2)&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>(half)<br><span class="hljs-string">&#x27;1/2&#x27;</span> <span class="hljs-comment">#对于human来说的</span><br></code></pre></td></tr></table></figure><p>The result of calling <strong>str</strong> on the value of an expression &#x3D; what Python prints  using the <strong>print</strong> function</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221029183617613.png" alt="image-20221029183617613" style="zoom:67%;" /><hr><p>更多例子:</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030164905798.png" alt="image-20221030164905798"></p><h4 id="f-strings"><a href="#f-strings" class="headerlink" title="f-strings"></a>f-strings</h4><p>a string literal that contains expressions</p><p>string concatenation版：<img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030162035435.png" alt="image-20221030162035435" style="zoom: 60%;" /></p><p>string interpolation版：<img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030162244033.png" alt="image-20221030162244033" style="zoom:67%;" /></p><p><code>&#123;&#125;</code>里的会被当成python expression,打印expression的返回值(结果)</p><p>更多例子:</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030162353084.png" alt="image-20221030162353084" style="zoom:80%;" /><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030162435614.png" alt="image-20221030162435614" style="zoom:80%;" /><h4 id="Polymorphic-Functions"><a href="#Polymorphic-Functions" class="headerlink" title="Polymorphic Functions"></a>Polymorphic Functions</h4><p>A function that applies to many (poly) different forms (morph) of data</p><p>eg:str和repr</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030163210340.png" alt="image-20221030163210340" style="zoom: 67%;" /><h6 id="Defining-the-repr-function"><a href="#Defining-the-repr-function" class="headerlink" title="Defining the repr function"></a>Defining the <code>repr</code> function</h6><p>apply correctly to all data types, to be a generic or <em>polymorphic function</em></p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030170212859.png" alt="image-20221030170212859"></p><p>具体什么意思可以看后文的bear的例子</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030170724649.png" alt="image-20221030170724649" style="zoom:67%;" /><p>为什么不是4:因为class的repr有参数self</p><h6 id="Defining-the-str-function"><a href="#Defining-the-str-function" class="headerlink" title="Defining the str function"></a>Defining the <code>str</code> function</h6><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030165612780.png" alt="image-20221030165612780" style="zoom: 80%;" /><hr><p>eg</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030165719096.png" alt="image-20221030165719096" style="zoom:80%;" /><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030165743440.png" alt="image-20221030165743440" style="zoom:67%;" /></p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030165757180.png" alt="image-20221030165757180" style="zoom:80%;" /><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030165806988.png" style="zoom:80%;" /></p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030170002065.png" alt="image-20221030170002065" style="zoom:67%;" /><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030170013942.png" alt="image-20221030170013942" style="zoom:80%;" /></p><p>看出call repr()的时候ignore了<strong>instance</strong>的<code>__repr__()</code>而是使用了<strong>class</strong>的</p><p>再试一试自己定义<code>repr(x)</code>和<code>str(x)</code></p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030171008697.png" alt="image-20221030171008697" style="zoom:67%;" /><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030171022332.png" alt="image-20221030171022332" style="zoom:67%;" /></p><h6 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h6><p> Objects interact by looking up attributes on each other</p><p>An interface is a set of shared messages, along with a specification of what they mean</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030172825302.png" alt="image-20221030172825302"></p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030173157528.png" alt="image-20221030173157528" style="zoom:80%;" /><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030173210041.png" alt="image-20221030173210041" style="zoom:80%;" /><h4 id="Special-Method-Names"><a href="#Special-Method-Names" class="headerlink" title="Special Method Names"></a>Special Method Names</h4><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030173521762.png" alt="image-20221030173521762"></p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030173625363.png" alt="image-20221030173625363"></p><p>对,这些都是special method names哟~</p><hr><p>来看看add:</p><p>Adding instances of user-defined classes invokes either the <strong>add</strong> or <strong>radd</strong> method</p><p>要重载</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030173939092.png" alt="image-20221030173939092" style="zoom:67%;" /><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030175557733.png" alt="image-20221030175557733" style="zoom: 67%;" /><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030175814478.png" alt="image-20221030175814478" style="zoom:80%;" /><h2 id="disc-07"><a href="#disc-07" class="headerlink" title="disc 07"></a>disc 07</h2><p>注意最后一问</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030180945710.png" alt="image-20221030180945710"></p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221030181006960.png" alt="image-20221030181006960"></p>]]></content>
    
    
    <categories>
      
      <category>CS61A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Sciense</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS61A-19-inheritance</title>
    <link href="/2022/08/13/CS61A/19-inheritance&amp;lab7/"/>
    <url>/2022/08/13/CS61A/19-inheritance&amp;lab7/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>recall：attributes</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221025203306294.png" alt="image-20221025203306294" style="zoom: 67%;" /><p>Bound methods are also objects: a function  that has its first parameter “self” already  bound to an instance</p><p>Dot expressions:<img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221025203428763.png" alt="image-20221025203428763" style="zoom:80%;" /></p><h4 id="Attribute-Assignment"><a href="#Attribute-Assignment" class="headerlink" title="Attribute Assignment"></a>Attribute Assignment</h4><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221025204214064.png" alt="image-20221025204214064" style="zoom:80%;" /><ul><li>If the object is an instance, then assignment sets an instance attribute </li><li>If the object is a class, then assignment sets a class attribute<img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221025204300419.png" alt="image-20221025204300419" style="zoom:80%;" /></li></ul><p>注意：（某个例子）<img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221025204651400.png" alt="image-20221025204651400" style="zoom:67%;" /></p><p>由于这个instance没有属于instance的attribute named interest（虽然class里有，但这是对instance的操作），因此这里给instance增加了一个叫interest的变量并让它等于0.08</p><p>eg：<img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221025205723781.png" alt="image-20221025205723781"></p><p>对class的进行修改，所有instance的interest都被修改了</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221025205733156.png" alt="image-20221025205733156" style="zoom:67%;" /><p>只改jim的，那就只改了jim的，此时jim被创建了新的属于jim的interest</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221025205922569.png" alt="image-20221025205922569" style="zoom:67%;" /><p>再改一次class的，发现jim的没改，因为jim这个instance的interest优先级高于class的了</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221025205959559.png" alt="image-20221025205959559" style="zoom: 67%;" /><h4 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h4><p>用来relate多个classes</p><p>A common use: Two similar classes differ in their degree of specialization </p><ul><li>The specialized class may have the same attributes as the general class</li><li>along with some special-case behavior</li></ul><p>使用格式：</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221028174349732.png" alt="image-20221028174349732" style="zoom:67%;" /><p>the new subclass ：</p><ul><li><strong>inherits</strong> attributes of its base class</li><li>may <strong>override</strong> certain inherited attributes</li></ul><p>关于attributes:</p><p>Base class attributes <strong>aren’t copied</strong> into subclasses</p><p>当你使用一个attribute的时候:</p><ol><li><p>If it names an attribute in the class, return the attribute value.  </p></li><li><p>Otherwise, <strong>look up the name in the base class</strong>, if there is one</p></li></ol><h6 id="eg"><a href="#eg" class="headerlink" title="eg"></a>eg</h6><p> <code>CheckingAccount</code> is a specialized type of <code>Account</code></p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221028174940622.png" alt="image-20221028174940622" style="zoom: 67%;" /><p>class定义长这样:</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221028175058940.png" alt="image-20221028175058940" style="zoom: 67%;" /><p>使用attributes:</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221028175507334.png" alt="image-20221028175507334" style="zoom:67%;" /><p>deposit没在checkingaccount被定义,因此寻找父class的</p><p>withdraw被定义了,因此就用chekingaccount的了</p><h4 id="How-to-design-object-oriented-program"><a href="#How-to-design-object-oriented-program" class="headerlink" title="How to design object-oriented program"></a>How to design object-oriented program</h4><h6 id="for-Inheritance"><a href="#for-Inheritance" class="headerlink" title="for Inheritance"></a>for Inheritance</h6><p>约法:</p><ul><li>Don’t repeat yourself; use existing implementations 避免老是复制已有的函数(那样很呆)</li><li>Look up attributes on instances whenever possible 如果能用父亲的就用(这样简洁) <img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221028180843418.png" alt="image-20221028180843418" style="zoom:80%;" /></li></ul><h6 id="Inheritance-and-Composition"><a href="#Inheritance-and-Composition" class="headerlink" title="Inheritance and Composition"></a>Inheritance and Composition</h6><ul><li>Inheritance is best for representing <strong>is</strong>-a relationships </li><li>Composition is best for representing <strong>has</strong>-a relationships</li></ul><p><strong>is</strong>:account和checkingaccount</p><p><strong>has</strong>:这个bank可以has chekingaccount</p><h6 id="Attributes-Lookup-Practice"><a href="#Attributes-Lookup-Practice" class="headerlink" title="Attributes Lookup Practice"></a>Attributes Lookup Practice</h6><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221028190929417.png" alt="image-20221028190929417" style="zoom:80%;" /><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221028192025068.png" alt="image-20221028192025068" style="zoom:67%;" /><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221028192033154.png" alt="image-20221028192033154" style="zoom:80%;" /><p>并没有创造对象,这只是看了下n</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221028192059314.png" alt="image-20221028192059314" style="zoom:80%;" /><p>因为上一句没有创建C的对象,因此没有改变z,应是相等的</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221028192533634.png" alt="image-20221028192533634" style="zoom:80%;" /><p>看图中结构,会发现b.z是一个instance</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221028192722455.png" alt="image-20221028192722455" style="zoom:67%;" /><h4 id="Multiple-Inheritance"><a href="#Multiple-Inheritance" class="headerlink" title="Multiple Inheritance"></a>Multiple Inheritance</h4><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221028202322497.png" alt="image-20221028202322497" style="zoom:67%;" /><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221028202444534.png" alt="image-20221028202444534" style="zoom:67%;" /><h4 id="Complicated-Inheritance"><a href="#Complicated-Inheritance" class="headerlink" title="Complicated Inheritance"></a>Complicated Inheritance</h4><h1 id="Lab7"><a href="#Lab7" class="headerlink" title="Lab7"></a>Lab7</h1><h4 id="Object-Oriented-Programming"><a href="#Object-Oriented-Programming" class="headerlink" title="Object-Oriented Programming"></a>Object-Oriented Programming</h4><p><strong>Object-oriented programming</strong> (OOP) is a style of programming that allows you to think of code in terms of “objects.” Here’s an example of a <code>Car</code> class:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>:<br>    num_wheels = <span class="hljs-number">4</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, color</span>):<br>        <span class="hljs-variable language_">self</span>.wheels = <span class="hljs-title class_">Car</span>.num_wheels<br>        <span class="hljs-variable language_">self</span>.color = color<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">drive</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.wheels &lt;= <span class="hljs-title class_">Car</span>.<span class="hljs-symbol">num_wheels:</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.color + <span class="hljs-string">&#x27; car cannot drive!&#x27;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.color + <span class="hljs-string">&#x27; car goes vroom!&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pop_tire</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.wheels &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-variable language_">self</span>.wheels -= <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>Here’s some terminology:</p><ul><li><p><strong>class</strong>: a blueprint for how to build a certain type of object. The <code>Car</code> class (shown above) describes the behavior and data that all <code>Car</code> objects have.</p></li><li><p><strong>instance</strong>: a particular occurrence of a class. In Python, we create instances of a class like this:</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl">&gt;&gt;&gt; <span class="hljs-variable">my_car</span> = <span class="hljs-function"><span class="hljs-title">Car</span>(<span class="hljs-string">&#x27;red&#x27;</span>)</span><br></code></pre></td></tr></table></figure><p><code>my_car</code> is an instance of the <code>Car</code> class.</p></li><li><p><strong>data attributes</strong>: a variable that belongs to the instance (also called instance variables). Think of a data attribute as a quality of the object: cars have <em>wheels</em> and <em>color</em>, so we have given our <code>Car</code> instance <code>self.wheels</code> and <code>self.color</code> attributes. We can access attributes using <strong>dot notation</strong>:</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">my_car.color</span><br>&#x27;red&#x27;<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">my_car.wheels</span><br>4<br></code></pre></td></tr></table></figure></li><li><p><strong>method</strong>: Methods are just like normal functions, except that they are bound to an instance. Think of a method as a “verb” of the class: cars can <em>drive</em> and also <em>pop their tires</em>, so we have given our <code>Car</code> instance the methods <code>drive</code> and <code>pop_tire</code>. We call methods using <strong>dot notation</strong>:</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">my_car = Car(<span class="hljs-string">&#x27;red&#x27;</span>)</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">my_car.drive()</span><br>&#x27;red car goes vroom!&#x27;<br></code></pre></td></tr></table></figure></li><li><p><strong>constructor</strong>: As with data abstraction, constructors build an instance of the class. The constructor for car objects is <code>Car(color)</code>. When Python calls that constructor, it immediately calls the <code>__init__</code> method. That’s where we initialize the data attributes:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, color</span>):<br>    <span class="hljs-variable language_">self</span>.wheels = <span class="hljs-title class_">Car</span>.num_wheels<br>    <span class="hljs-variable language_">self</span>.color = color<br></code></pre></td></tr></table></figure><p>The constructor takes in one argument, <code>color</code>. As you can see, this constructor also creates the <code>self.wheels</code> and <code>self.color</code> attributes.</p></li><li><p><code>self</code>: in Python, <code>self</code> is the first parameter for many methods (in this class, we will only use methods whose first parameter is <code>self</code>). When a method is called, <code>self</code> is bound to an instance of the class. For example:</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">my_car = Car(<span class="hljs-string">&#x27;red&#x27;</span>)</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">car.drive()</span><br></code></pre></td></tr></table></figure><p>Notice that the <code>drive</code> method takes in <code>self</code> as an argument, but it looks like we didn’t pass one in! This is because the dot notation <em>implicitly</em> passes in <code>car</code> as <code>self</code> for us.</p></li></ul><h4 id="Cars"><a href="#Cars" class="headerlink" title="Cars"></a>Cars</h4><p>对继承更深的理解：</p><p>base class就相当于普适的一类，比如说到车，我们就想到它有四个轮子。但是继承它的东西，应该说针对性的细化了，比如卡车耗油更多啥的</p><h4 id="accounts"><a href="#accounts" class="headerlink" title="accounts"></a>accounts</h4>]]></content>
    
    
    <categories>
      
      <category>CS61A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Sciense</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python中pip安装库时出现Read timed out</title>
    <link href="/2022/08/12/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/kkk/"/>
    <url>/2022/08/12/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/kkk/</url>
    
    <content type="html"><![CDATA[<h3 id="解决办法1：延长timeout时间"><a href="#解决办法1：延长timeout时间" class="headerlink" title="解决办法1：延长timeout时间"></a>解决办法1：延长timeout时间</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">pip --<span class="hljs-keyword">default</span>-timeout=<span class="hljs-number">100</span> install <span class="hljs-keyword">Package</span><br></code></pre></td></tr></table></figure><p>将Package替换你所需要的库就行</p><h3 id="解决办法2：换源，将pip源更换到国内镜像，个人比较推荐这种方法"><a href="#解决办法2：换源，将pip源更换到国内镜像，个人比较推荐这种方法" class="headerlink" title="解决办法2：换源，将pip源更换到国内镜像，个人比较推荐这种方法"></a>解决办法2：换源，将pip源更换到国内镜像，个人比较推荐这种方法</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">#例如安装scipy时使用豆瓣的源<br>pip install --index-url https://pypi.douban.com/simple scipy<br>#使用清华大学的源<br>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple –upgrade tensorflow-gpu<br></code></pre></td></tr></table></figure><p>豆瓣源是神！超快的啊！</p><p>将pip源更换到国内镜像<br>用pip管理工具安装库文件时，默认使用国外的源文件，因此在国内的下载速度会比较慢，可能只有50KB&#x2F;s。幸好，国内的一些顶级科研机构已经给我们准备好了各种镜像，下载速度可达2MB&#x2F;s。<br>其中，比较常用的国内镜像包括：</p><blockquote><p>（1）阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a><br>（2）豆瓣<a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a><br>（3）清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a><br>（4）中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/">http://pypi.mirrors.ustc.edu.cn/simple/</a></p></blockquote><p>以清华源为例，设置方法如下：</p><p>可以在使用pip的时候，加上参数-i和镜像地址(如 <a href="https://pypi.tuna.tsinghua.edu.cn/simple)%EF%BC%8C">https://pypi.tuna.tsinghua.edu.cn/simple)，</a></p><p>例如：<code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pandas</code>，这样就会从清华镜像安装pandas库。</p><p>参考博客：<a href="https://www.jb51.net/article/240227.htm">python中pip安装库时出现Read timed out解决办法_python_脚本之家 (jb51.net)</a></p>]]></content>
    
    
    <categories>
      
      <category>Q&amp;A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS61A-18-object</title>
    <link href="/2022/08/12/CS61A/18-object/"/>
    <url>/2022/08/12/CS61A/18-object/</url>
    
    <content type="html"><![CDATA[<h2 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h2><blockquote><p>All values are objects in python</p></blockquote><p>一个使用示例：<img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221021210238791.png" alt="image-20221021210238791" style="zoom: 67%;" /></p><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><h4 id="Class-statement"><a href="#Class-statement" class="headerlink" title="Class statement:"></a><strong>Class statement</strong>:</h4><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221025154412857.png" alt="image-20221025154412857" style="zoom:50%;" /><ul><li>create &amp; bind to <name> in the current environment</li><li><suite> create attributes of the class (not names in frames)</li></ul><p>当class被call时：</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221025155609284.png" alt="image-20221025155609284" style="zoom:80%;" /><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221025160240135.png" alt="image-20221025160240135" style="zoom:67%;" /><ul><li>A new instance of that class is created</li><li><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221025155648333.png" alt="image-20221025155648333" style="zoom:50%;" />method被call，<code>self</code>被bound,init里的内容被execute</li></ul><p><code>__init__</code>叫constructor.</p><p><strong>Object identity</strong>:</p><p>每一个类都有identity</p><p>所以:<img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221025161356737.png" alt="image-20221025161356737" style="zoom:67%;" /></p><h4 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h4><p>method就是定义在suite里的function</p><p>使用该类里面的内容时要传递self作为参数</p><blockquote><p>These def statements create function objects as always, but their names are bound as attributes of the class</p><p>虽是函数,但不会再frame里被bound成函数,而是attributes of the class</p></blockquote><p><strong>invoking methods:</strong></p><blockquote><p>All invoked methods have access to the object via the self parameter, and so they can all  access and manipulate the object’s state</p></blockquote><p>method可以通过self指针改变自己:<img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221025163809895.png" alt="image-20221025163809895" style="zoom:67%;" /></p><p>调用时,自用传入self参数,不用另外传:<img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221025163843977.png" alt="image-20221025163843977" style="zoom:67%;" /></p><p><strong>Dot expressions</strong>:</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221025164256579.png" alt="image-20221025164256579" style="zoom:80%;" /><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221025164302600.png" alt="image-20221025164302600" style="zoom:80%;" /><h4 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h4><p>如何查看attribute</p><p>看看attribute的值:<img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221025165146028.png" alt="image-20221025165146028" style="zoom:80%;" /></p><p>是否有这个attribute:<img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221025165316731.png" alt="image-20221025165316731" style="zoom:80%;" /></p><p>先看instance里有没有,后看class</p><p><strong>python区分method和function:</strong></p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221025165534104.png" alt="image-20221025165534104" style="zoom:80%;" /><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221025165719152.png" alt="image-20221025165719152"></p><p>evaluate a dot expression: </p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221025165743333.png" alt="image-20221025165743333"></p><p><strong>class attribute:</strong></p><blockquote><p>“shared” across all instances of a class because they are attributes  of the class, not the instance</p></blockquote><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221025165948546.png" alt="image-20221025165948546" style="zoom:67%;" /><p>而instance的是在init里定义的</p>]]></content>
    
    
    <categories>
      
      <category>CS61A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Sciense</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS61A-17-generators</title>
    <link href="/2022/08/11/CS61A/17-generators%20&amp;%20hw5/"/>
    <url>/2022/08/11/CS61A/17-generators%20&amp;%20hw5/</url>
    
    <content type="html"><![CDATA[<h2 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h2><h5 id="什么是Generator"><a href="#什么是Generator" class="headerlink" title="什么是Generator"></a>什么是Generator</h5><p>一个函数</p><ul><li>用yield替换return</li><li>返回一种iterator</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">evens</span>():<br>    num = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> num &lt; <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">yield</span> num<br>        num += <span class="hljs-number">2</span><br><br>gen = evens()<br><br><span class="hljs-built_in">next</span>(gen)<br><span class="hljs-built_in">next</span>(gen)<br></code></pre></td></tr></table></figure><p>工作原理：</p><ul><li><p>被call的时候，不执行函数语句，返回iterator</p></li><li><p>调用next时，执行一次：</p><p>从<strong>上一次执行结束</strong>的地方开始，遇到一个yield执行结束</p><p>如果没遇到，则全部执行并raises stopIteratioin</p></li></ul><hr><p>因为它也是一种iterator，所以也可以用loop：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">evens</span>(<span class="hljs-params">start, end</span>):<br>    num = start + (start % <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">while</span> num &lt; end:<br>        <span class="hljs-keyword">yield</span> num<br>        num += <span class="hljs-number">2</span><br><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> evens(<span class="hljs-number">12</span>, <span class="hljs-number">60</span>):<br>   <span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><h6 id="eg"><a href="#eg" class="headerlink" title="eg"></a>eg</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">countdown</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Generate a countdown of numbers from N down to &#x27;blast off!&#x27;.</span><br><span class="hljs-string">    &gt;&gt;&gt; c = countdown(3)</span><br><span class="hljs-string">    &gt;&gt;&gt; next(c)</span><br><span class="hljs-string">    3</span><br><span class="hljs-string">    &gt;&gt;&gt; next(c)</span><br><span class="hljs-string">    2</span><br><span class="hljs-string">    &gt;&gt;&gt; next(c)</span><br><span class="hljs-string">    1</span><br><span class="hljs-string">    &gt;&gt;&gt; next(c)</span><br><span class="hljs-string">    &#x27;blast off!&#x27;</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">while</span>(n &gt; <span class="hljs-number">0</span>):<br>        <span class="hljs-keyword">yield</span> n<br>        n -= <span class="hljs-number">1</span><br>    <span class="hljs-comment">#print(&quot;blast off!&quot;) 这个还会返回一次抛出异常</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;blast off&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_virfib</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;Generate the next Virahanka-Fibonacci number.</span><br><span class="hljs-string">    &gt;&gt;&gt; g = generate_virfib()</span><br><span class="hljs-string">    &gt;&gt;&gt; next(g)</span><br><span class="hljs-string">    0</span><br><span class="hljs-string">    &gt;&gt;&gt; next(g)</span><br><span class="hljs-string">    1</span><br><span class="hljs-string">    &gt;&gt;&gt; next(g)</span><br><span class="hljs-string">    1</span><br><span class="hljs-string">    &gt;&gt;&gt; next(g)</span><br><span class="hljs-string">    2</span><br><span class="hljs-string">    &gt;&gt;&gt; next(g)</span><br><span class="hljs-string">    3</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    prev = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">yield</span> prev<br>    curr = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">yield</span> curr<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        (prev, curr) = (curr, prev + curr)<br>        <span class="hljs-keyword">yield</span> curr<br></code></pre></td></tr></table></figure><h2 id="Yield-from"><a href="#Yield-from" class="headerlink" title="Yield from"></a>Yield from</h2><p>yield<strong>所有</strong>iterable里的item:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#a和b是iterable</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">a_then_b</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> a<br>    <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> b<br><br><span class="hljs-built_in">list</span>(a_then_b([<span class="hljs-string">&quot;Apples&quot;</span>, <span class="hljs-string">&quot;Aardvarks&quot;</span>], [<span class="hljs-string">&quot;Bananas&quot;</span>, <span class="hljs-string">&quot;BEARS&quot;</span>]))<br></code></pre></td></tr></table></figure><p>这两个是等价的：</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221021202135752.png" alt="image-20221021202135752" style="zoom:67%;" /><p>同时也可以对generator进行这个操作:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">countdown</span>(<span class="hljs-params">k</span>):<br>    <span class="hljs-keyword">if</span> k &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">yield</span> k<br>        <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> countdown(k - <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221021111346743.png" alt="image-20221021111346743" style="zoom: 67%;" /><p>其他例子：</p><p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221021203319010.png" alt="image-20221021203319010" style="zoom:80%;" /><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221021203326055.png" alt="image-20221021203326055" style="zoom:80%;" /></p><p>有点像递归</p><h2 id="with-returns"><a href="#with-returns" class="headerlink" title="with returns"></a>with returns</h2><p>遇到return就exit,后面的代码不再执行,也不能继续yield</p><p>return可以有返回值,但不会被yield(不会算在迭代器里):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">g</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">yield</span> x<br>    <span class="hljs-keyword">yield</span> x + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> x + <span class="hljs-number">2</span><br>    <span class="hljs-keyword">yield</span> x + <span class="hljs-number">3</span><br>    <br><span class="hljs-built_in">list</span>(g(<span class="hljs-number">2</span>))  <span class="hljs-comment"># [2, 3]</span><br></code></pre></td></tr></table></figure><p>如果你很想算上return的值：</p><img src="https://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221021203645424.png" alt="image-20221021203645424" style="zoom:80%;" /><h2 id="应用-partition"><a href="#应用-partition" class="headerlink" title="应用:partition"></a>应用:partition</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">partitions</span>(<span class="hljs-params">n, m</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;List partitions.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; for p in partitions(6, 4): print(p)</span><br><span class="hljs-string">    4 + 2</span><br><span class="hljs-string">    4 + 1 + 1</span><br><span class="hljs-string">    3 + 3</span><br><span class="hljs-string">    3 + 2 + 1</span><br><span class="hljs-string">    3 + 1 + 1 + 1</span><br><span class="hljs-string">    2 + 2 + 2</span><br><span class="hljs-string">    2 + 2 + 1 + 1</span><br><span class="hljs-string">    2 + 1 + 1 + 1 + 1</span><br><span class="hljs-string">    1 + 1 + 1 + 1 + 1 + 1</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> m == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> n == m:<br>            <span class="hljs-keyword">yield</span> <span class="hljs-built_in">str</span>(m)<br>        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> partitions(n-m, m):<br>            <span class="hljs-keyword">yield</span> <span class="hljs-built_in">str</span>(m) + <span class="hljs-string">&quot; + &quot;</span> + p<br>        <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> partitions(n, m - <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h1 id="HW5"><a href="#HW5" class="headerlink" title="HW5"></a>HW5</h1><h5 id="！！！！！！！！！！1Generate-Permutations"><a href="#！！！！！！！！！！1Generate-Permutations" class="headerlink" title="！！！！！！！！！！1Generate Permutations"></a>！！！！！！！！！！1Generate Permutations</h5><p>遇到的问题：</p><blockquote><p><a href="http://www.classnotes.cn/3663.html">UnboundLocalError: local variable ‘len’ referenced before assignment | 美多多笔记 (classnotes.cn)</a></p><p>[<a href="https://www.cnblogs.com/ifantastic/p/3811145.html">Python] 正确复制列表的方法 - iFantasticMe - 博客园 (cnblogs.com)</a></p><p><code>lst2 = lst[:]</code></p></blockquote><p>补充理解：</p><p>理解一下yield：<a href="https://zhuanlan.zhihu.com/p/268605982">如何理解Python中的yield用法? - 知乎 (zhihu.com)</a></p><p>yield就是不会让函数退出的return！！</p><p>yield from：<a href="https://zhuanlan.zhihu.com/p/267966140">深入理解Python 中的 yield from语法 - 知乎 (zhihu.com)</a></p><p>关键是生成器的嵌套部分</p><hr><p>然后，感觉这个主要是让你明白yield是怎么套娃的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_perms</span>(<span class="hljs-params">seq</span>):<br>    seq <br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(seq) == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">yield</span> seq<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment">#lst = gen_perms(seq[1:])#切掉第一个元素的*全排列*</span><br>        <span class="hljs-comment">#不能像上面这行这样，因为有很多个全排列，这些全排列是一个generator，这样子list会变成一个generator</span><br>        <span class="hljs-comment">#lst = yield from gen_perms(seq[1:]) 也不行…你仔细想想lst = return说得过去吗…这里就是递归啦</span><br>        <span class="hljs-comment">####唯一不同的区别：这次的递归函数返回的是一个iterable，需要遍历######</span><br>        <span class="hljs-keyword">for</span> lst <span class="hljs-keyword">in</span> gen_perms(seq[<span class="hljs-number">1</span>:]):<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(seq)):<br>                <span class="hljs-keyword">yield</span> lst[:i] + seq[:<span class="hljs-number">1</span>] + lst[i:]<br>            <br></code></pre></td></tr></table></figure><p>注意了，<code>gen_perms(seq[1:])</code>是<code>seq[1:]</code>的全排列</p><h5 id="2！！！！！！！"><a href="#2！！！！！！！" class="headerlink" title="2！！！！！！！"></a>2！！！！！！！</h5><p>有些抽象了……………………</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">path_yielder</span>(<span class="hljs-params">t, value</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Yields all possible paths from the root of t to a node with the label</span><br><span class="hljs-string">    value as a list.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; t1 = tree(1, [tree(2, [tree(3), tree(4, [tree(6)]), tree(5)]), tree(5)])</span><br><span class="hljs-string">    &gt;&gt;&gt; print_tree(t1)</span><br><span class="hljs-string">    1</span><br><span class="hljs-string">      2</span><br><span class="hljs-string">        3</span><br><span class="hljs-string">        4</span><br><span class="hljs-string">          6</span><br><span class="hljs-string">        5</span><br><span class="hljs-string">      5</span><br><span class="hljs-string">    &gt;&gt;&gt; next(path_yielder(t1, 6))</span><br><span class="hljs-string">    [1, 2, 4, 6]</span><br><span class="hljs-string">    &gt;&gt;&gt; path_to_5 = path_yielder(t1, 5)</span><br><span class="hljs-string">    &gt;&gt;&gt; sorted(list(path_to_5))</span><br><span class="hljs-string">    [[1, 2, 5], [1, 5]]</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; t2 = tree(0, [tree(2, [t1])])</span><br><span class="hljs-string">    &gt;&gt;&gt; print_tree(t2)</span><br><span class="hljs-string">    0</span><br><span class="hljs-string">      2</span><br><span class="hljs-string">        1</span><br><span class="hljs-string">          2</span><br><span class="hljs-string">            3</span><br><span class="hljs-string">            4</span><br><span class="hljs-string">              6</span><br><span class="hljs-string">            5</span><br><span class="hljs-string">          5</span><br><span class="hljs-string">    &gt;&gt;&gt; path_to_2 = path_yielder(t2, 2)</span><br><span class="hljs-string">    &gt;&gt;&gt; sorted(list(path_to_2))</span><br><span class="hljs-string">    [[0, 2], [0, 2, 1, 2]]</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> label(t) == value:<br>        <span class="hljs-keyword">yield</span> [label(t)]<br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> branches(t):<br>        <span class="hljs-keyword">for</span> path <span class="hljs-keyword">in</span> path_yielder(b, value):<br>            <span class="hljs-keyword">yield</span> [label(t)] + path<br><br></code></pre></td></tr></table></figure><h5 id="4"><a href="#4" class="headerlink" title="4"></a>4</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">preorder</span>(<span class="hljs-params">t</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return a list of the entries in this tree in the order that they</span><br><span class="hljs-string">    would be visited by a preorder traversal (see problem description).</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; numbers = tree(1, [tree(2), tree(3, [tree(4), tree(5)]), tree(6, [tree(7)])])</span><br><span class="hljs-string">    &gt;&gt;&gt; preorder(numbers)</span><br><span class="hljs-string">    [1, 2, 3, 4, 5, 6, 7]</span><br><span class="hljs-string">    &gt;&gt;&gt; preorder(tree(2, [tree(4, [tree(6)])]))</span><br><span class="hljs-string">    [2, 4, 6]</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">iter_preorder</span>(<span class="hljs-params">t</span>):<br>        <span class="hljs-keyword">yield</span> label(t)<br>        <span class="hljs-keyword">for</span> branch <span class="hljs-keyword">in</span> branches(t):<br>            <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> preorder(branch)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(iter_preorder(t))<br><br></code></pre></td></tr></table></figure><p>要加from，不然是套娃迭代器（你想想</p>]]></content>
    
    
    <categories>
      
      <category>CS61A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Sciense</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS61A-16-iterators</title>
    <link href="/2022/08/10/CS61A/16-iterators%20&amp;%20lab6/"/>
    <url>/2022/08/10/CS61A/16-iterators%20&amp;%20lab6/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是iterators"><a href="#什么是iterators" class="headerlink" title="什么是iterators"></a>什么是iterators</h2><p>定义：一个对象，可以把一个序列变成“一个一个来”的元素（词穷是这样的</p><blockquote><p>可以理解成position in a sequence</p></blockquote><p><code>iter(iterable)</code> 变成一个iterator</p><p><code>next(iterator)</code> returns the next element in an iterator.</p><p>next是不可逆的</p><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">toppings = [<span class="hljs-string">&quot;pineapple&quot;</span>, <span class="hljs-string">&quot;pepper&quot;</span>, <span class="hljs-string">&quot;mushroom&quot;</span>, <span class="hljs-string">&quot;roasted red pepper&quot;</span>]<br><br>topperator = <span class="hljs-built_in">iter</span>(toppings)<br><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>) <span class="hljs-comment"># &#x27;pineapple&#x27;</span><br><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>) <span class="hljs-comment"># &#x27;pepper&#x27;</span><br><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>) <span class="hljs-comment"># &#x27;mushroom&#x27;</span><br><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>) <span class="hljs-comment"># &#x27;roasted red pepper&#x27;</span><br><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>) <span class="hljs-comment"># ❌ StopIteration exception</span><br></code></pre></td></tr></table></figure><p>什么样的才算iterable呢：Lists, tuples, dictionaries, strings, and ranges</p><p>这些内容都可以生成迭代器。</p><p>重复生成iterator,你会得到同一个东西:</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221018211105174.png" alt="image-20221018211105174" style="zoom: 67%;" /><h5 id="对于字典"><a href="#对于字典" class="headerlink" title="对于字典"></a>对于字典</h5><p>字典中item的顺序：</p><ul><li>版本3.5以后：加入顺序</li><li>3.5及以前：arbitrary order</li></ul><p>而对于字典，可以有三种选择：keys iterator, values iterator, keys&amp;values(iterms) iterator.</p><p><code>iter(d</code>默认使用keys)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">price_iter = <span class="hljs-built_in">iter</span>(prices.items())<br><span class="hljs-built_in">next</span>(price_iter)  <span class="hljs-comment"># (&quot;pineapple&quot;, 9.99)</span><br></code></pre></td></tr></table></figure><p>如果迭代的时候，字典的结构&#x2F;值被改变，则不能继续做iteration：</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221018184158454.png" alt="image-20221018184158454"></p><p>即这个时候迭代器不能用了。应该是出于数据安全性考虑！</p><h2 id="iterator-遍历"><a href="#iterator-遍历" class="headerlink" title="iterator 遍历"></a>iterator 遍历</h2><p>在使用for的时候，会自动call next（）</p><p>注意，iteration是<strong>不可逆</strong>的，任何情况都是！：</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221018184405521.png" alt="image-20221018184405521" style="zoom:80%;" /><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221018211014066.png" alt="image-20221018211014066" style="zoom:80%;" /><p>除非重新创建一个iterator呢。 </p><p>iterator是mutable的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">nums = <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>)<br>num_iter = <span class="hljs-built_in">iter</span>(nums)<br>first = <span class="hljs-built_in">next</span>(num_iter)<br><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> num_iter:<br>    <span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><h2 id="一些好用的function"><a href="#一些好用的function" class="headerlink" title="一些好用的function"></a>一些好用的function</h2><p>把iterable转换成别的类型：</p><table><thead><tr><th align="left">Function</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><a href="https://docs.python.org/3/library/functions.html#func-list"><code>list(iterable)</code></a></td><td align="left">Returns a list containing all items in <code>iterable</code></td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/functions.html#func-tuple"><code>tuple(iterable)</code></a></td><td align="left">Returns a tuple containing all items in <code>iterable</code></td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/functions.html#sorted"><code>sorted(iterable)</code></a></td><td align="left">Returns a sorted list containing all items in <code>iterable</code></td></tr></tbody></table><p>把别的类型转换成iterable：</p><table><thead><tr><th align="left">Function</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><a href="https://docs.python.org/3/library/functions.html#reversed"><code>reversed(sequence)</code></a></td><td align="left">reverse了sequence [(See example in PythonTutor)](<a href="http://pythontutor.com/visualize.html#code=chocolate_bars">http://pythontutor.com/visualize.html#code=chocolate_bars</a> %3D (“90%”, “70%”, “55%”) worst_first %3D reversed(chocolate_bars) for chocolate in worst_first%3A    print(chocolate)&amp;cumulative&#x3D;true&amp;curInstr&#x3D;0&amp;heapPrimitives&#x3D;nevernest&amp;mode&#x3D;display&amp;origin&#x3D;opt-frontend.js&amp;py&#x3D;3&amp;rawInputLstJSON&#x3D;[]&amp;textReferences&#x3D;false)</td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/functions.html#zip"><code>zip(*iterables)</code></a></td><td align="left">Iterate over co-indexed tuples with elements from each of the <code>iterables</code>（有点像笛卡尔积，把一维变成二维，两个序列合在一起了。） [(See example in PythonTutor)](<a href="http://pythontutor.com/composingprograms.html#code=eng_nums">http://pythontutor.com/composingprograms.html#code=eng_nums</a> %3D [“one”, “two”, “three”] esp_nums %3D [“uno”, “dos”, “tres”] zip_iter %3D zip(eng_nums, esp_nums) eng, esp %3D next(zip_iter) print(eng, esp) for eng, esp in zip(eng_nums, esp_nums)%3A    print(eng, esp)&amp;cumulative&#x3D;true&amp;curInstr&#x3D;0&amp;mode&#x3D;display&amp;origin&#x3D;composingprograms.js&amp;py&#x3D;3&amp;rawInputLstJSON&#x3D;[])</td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/functions.html#map"><code>map(func, iterable, ...)</code></a></td><td align="left">Iterate over <code>func(x)</code> for <code>x</code> in <code>iterable</code> Same as <code>[func(x) for x in iterable]</code> （返回函数值序列迭代器）[(See example in PythonTutor)](<a href="http://pythontutor.com/visualize.html#code=nums">http://pythontutor.com/visualize.html#code=nums</a> %3D [1, 2, 3, 4, 5] %23 Map returns an iterator squares1 %3D map(lambda num%3A num ** 2, nums) %23 Create a list of all the elements from the iterator squares1 %3D list(squares1) %23 Compare to… squares2 %3D [num**2 for num in nums]&amp;cumulative&#x3D;true&amp;curInstr&#x3D;0&amp;heapPrimitives&#x3D;nevernest&amp;mode&#x3D;display&amp;origin&#x3D;opt-frontend.js&amp;py&#x3D;3&amp;rawInputLstJSON&#x3D;[]&amp;textReferences&#x3D;false)</td></tr><tr><td align="left"><a href="https://docs.python.org/3/library/functions.html#filter"><code>filter(func, iterable)</code></a></td><td align="left">Iterate over <code>x</code> in <code>iterable</code> if <code>func(x)</code> Same as <code>[x for x in iterable if func(x)]</code>（条件） [(See example in PythonTutor)](<a href="http://pythontutor.com/visualize.html#code=nums">http://pythontutor.com/visualize.html#code=nums</a> %3D [1, 2, 3, 4, 5] %23 Filter returns an iterator even1 %3D filter(lambda num%3A num % 2 %3D%3D 0, nums) %23 Create a list of all the elements from the iterator even1 %3D list(even1) %23 Compare to… even2 %3D [num for num in nums if num % 2 %3D%3D 0]&amp;cumulative&#x3D;true&amp;curInstr&#x3D;0&amp;heapPrimitives&#x3D;nevernest&amp;mode&#x3D;display&amp;origin&#x3D;opt-frontend.js&amp;py&#x3D;3&amp;rawInputLstJSON&#x3D;[]&amp;textReferences&#x3D;false)</td></tr></tbody></table><h5 id="map："><a href="#map：" class="headerlink" title="map："></a>map：</h5><p>可不只是把函数值放进列表里这么简单哦！<br>实际上它有 <strong>调用函数</strong>这一步！</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221018202734345.png" alt="image-20221018202734345" style="zoom:67%;" /><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221018202746639.png" alt="image-20221018202746639" style="zoom:67%;" /><p>可以看到print语句也被执行了。</p><p>test：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">termified</span>(<span class="hljs-params">n, term</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Returns every the result of calling TERM</span><br><span class="hljs-string">    on each element in the range from 0 to N (inclusive).</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; termified(5, lambda x: 2 ** x)</span><br><span class="hljs-string">    [1, 2, 4, 8, 16, 32]</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(term, <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)))<br></code></pre></td></tr></table></figure><h5 id="filter："><a href="#filter：" class="headerlink" title="filter："></a>filter：</h5><p>和map结合在一起：</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221018203114282.png" alt="image-20221018203114282" style="zoom:67%;" /><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221018203337883.png" alt="image-20221018203337883" style="zoom:67%;" /><p>可以发现，map的结果并不是返回一个单纯的函数序列， 而是”map“这个类型，也就是说，生成map的时候函数是没有被调用的。</p><blockquote><p>PS：iterator本身也是iterable的哦。</p></blockquote><p>转换成了filter的iterator，call next之后，一直调用map的func知道满足filter条件为止。</p><p>之后，我们可以把剩下的元素list出来：</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221018203359317.png" alt="image-20221018203359317" style="zoom:67%;" /><p>呀！已经没有剩下的了~</p><h6 id="list"><a href="#list" class="headerlink" title="list"></a>list</h6><p>list（）把iteration转换成了列表，也就代表它全部<code>next</code>了一遍,把结果生成了一个list.对,map里的func也被一直call直到结束为止!</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221018203611626.png" alt="image-20221018203611626" style="zoom:67%;" /><p>test:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">divisors</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Returns all the divisors of N.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; divisors(12)</span><br><span class="hljs-string">    [1, 2, 3, 4, 6]</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    #return list(filter(lambda x, n:n % x == 0, range(1, n / 2)))</span><br><span class="hljs-string">    #并不用传n进lambda，因为都在filter的frame里；而且也不能这么做，&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: n % x == <span class="hljs-number">0</span>, <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n)))<br></code></pre></td></tr></table></figure><h5 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h5><p>list之间是可以直接用关系运算符比较的:</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221018203823872.png" alt="image-20221018203823872" style="zoom:67%;" /><h5 id="zip"><a href="#zip" class="headerlink" title="zip:"></a>zip:</h5><p>遇到对不上的,就直接丢了:</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221018204138982.png" alt="image-20221018204138982"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">matches</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return the number of values k such that A[k] == B[k].</span><br><span class="hljs-string">    &gt;&gt;&gt; matches([1, 2, 3, 4, 5], [3, 2, 3, 0, 5])</span><br><span class="hljs-string">    3</span><br><span class="hljs-string">    &gt;&gt;&gt; matches(&quot;abdomens&quot;, &quot;indolence&quot;)</span><br><span class="hljs-string">    4</span><br><span class="hljs-string">    &gt;&gt;&gt; matches(&quot;abcd&quot;, &quot;dcba&quot;)</span><br><span class="hljs-string">    0</span><br><span class="hljs-string">    &gt;&gt;&gt; matches(&quot;abcde&quot;, &quot;edcba&quot;)</span><br><span class="hljs-string">    1</span><br><span class="hljs-string">    &gt;&gt;&gt; matches(&quot;abcdefg&quot;, &quot;edcba&quot;)</span><br><span class="hljs-string">    1</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment">#zipped = list(zip(a, b))</span><br>    <span class="hljs-comment">#return len(list(filter(lambda x:x[0] == x[1], zipped)))</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>([<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a, b) <span class="hljs-keyword">if</span> a == b])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">palindrome</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return whether s is the same sequence backward and forward.</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    &gt;&gt;&gt; palindrome([3, 1, 4, 1, 5])</span><br><span class="hljs-string">    False</span><br><span class="hljs-string">    &gt;&gt;&gt; palindrome([3, 1, 4, 1, 3])</span><br><span class="hljs-string">    True</span><br><span class="hljs-string">    &gt;&gt;&gt; palindrome(&#x27;seveneves&#x27;)</span><br><span class="hljs-string">    True</span><br><span class="hljs-string">    &gt;&gt;&gt; palindrome(&#x27;seven eves&#x27;)</span><br><span class="hljs-string">    False</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>   <span class="hljs-comment"># forward = iterator(s)</span><br>   <span class="hljs-comment"># backward = reserved(s)</span><br>   <span class="hljs-comment"># return forward == backward</span><br><br><span class="hljs-comment">#return list(s) == list(reversed(s))</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">all</span>([a == b <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(s, <span class="hljs-built_in">reversed</span>(s))])<br></code></pre></td></tr></table></figure><p>all:相当于全用and连接</p><h2 id="iterator实例"><a href="#iterator实例" class="headerlink" title="iterator实例"></a>iterator实例</h2><p>为啥用iterator，它有什么好处吗？</p><ul><li>转换格式很方便</li><li>所以其他人用起来也方便</li><li>有”位置“这个新的信息，而且只能向前不能回头</li></ul><p>example:casino blackjack</p><h2 id="Lab6"><a href="#Lab6" class="headerlink" title="Lab6"></a>Lab6</h2><h5 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h5><p>append()似乎是没有返回值的。</p><img src="C:/Users/Liu%20Junxin/AppData/Roaming/Typora/typora-user-images/image-20221019111711933.png" alt="image-20221019111711933" style="zoom:67%;" /><p>pop()参数就是lst的下标。</p><img src="C:/Users/Liu%20Junxin/AppData/Roaming/Typora/typora-user-images/image-20221019112035959.png" alt="image-20221019112035959" style="zoom:80%;" /><p>a和lst指向的是同一个东西（会一起变），而b不是</p><img src="C:/Users/Liu%20Junxin/AppData/Roaming/Typora/typora-user-images/image-20221019112449717.png" alt="image-20221019112449717" style="zoom:67%;" /><p>注意运算顺序。也注意看看返回值应该是什么噢：</p><p><img src="C:/Users/Liu%20Junxin/AppData/Roaming/Typora/typora-user-images/image-20221019112936444.png" alt="image-20221019112936444"></p><h5 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h5><p>更自由控制循环的方式就是用while</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">insert_items</span>(<span class="hljs-params">lst, entry, elem</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Inserts elem into lst after each occurence of entry and then returns lst.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; test_lst = [1, 5, 8, 5, 2, 3]</span><br><span class="hljs-string">    &gt;&gt;&gt; new_lst = insert_items(test_lst, 5, 7)</span><br><span class="hljs-string">    &gt;&gt;&gt; new_lst</span><br><span class="hljs-string">    [1, 5, 7, 8, 5, 7, 2, 3]</span><br><span class="hljs-string">    &gt;&gt;&gt; double_lst = [1, 2, 1, 2, 3, 3]</span><br><span class="hljs-string">    &gt;&gt;&gt; double_lst = insert_items(double_lst, 3, 4)</span><br><span class="hljs-string">    &gt;&gt;&gt; double_lst</span><br><span class="hljs-string">    [1, 2, 1, 2, 3, 4, 3, 4]</span><br><span class="hljs-string">    &gt;&gt;&gt; large_lst = [1, 4, 8]</span><br><span class="hljs-string">    &gt;&gt;&gt; large_lst2 = insert_items(large_lst, 4, 4)</span><br><span class="hljs-string">    &gt;&gt;&gt; large_lst2</span><br><span class="hljs-string">    [1, 4, 4, 8]</span><br><span class="hljs-string">    &gt;&gt;&gt; large_lst3 = insert_items(large_lst2, 4, 6)</span><br><span class="hljs-string">    &gt;&gt;&gt; large_lst3</span><br><span class="hljs-string">    [1, 4, 6, 4, 6, 8]</span><br><span class="hljs-string">    &gt;&gt;&gt; large_lst3 is large_lst</span><br><span class="hljs-string">    True</span><br><span class="hljs-string">    &gt;&gt;&gt; # Ban creating new lists</span><br><span class="hljs-string">    &gt;&gt;&gt; from construct_check import check</span><br><span class="hljs-string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;insert_items&#x27;,</span><br><span class="hljs-string">    ...       [&#x27;List&#x27;, &#x27;ListComp&#x27;, &#x27;Slice&#x27;])</span><br><span class="hljs-string">    True</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span>(i &lt; <span class="hljs-built_in">len</span>(lst)):<br>        <span class="hljs-keyword">if</span> lst[i] == entry:<br>            lst.insert(i + <span class="hljs-number">1</span>, elem)<br>            i = i + <span class="hljs-number">1</span><br>        i = i + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> lst<br></code></pre></td></tr></table></figure><h5 id="Q3"><a href="#Q3" class="headerlink" title="Q3"></a>Q3</h5><p><img src="C:/Users/Liu%20Junxin/AppData/Roaming/Typora/typora-user-images/image-20221019121658198.png" alt="image-20221019121658198"></p><img src="C:/Users/Liu%20Junxin/AppData/Roaming/Typora/typora-user-images/image-20221019121724268.png" alt="image-20221019121724268" style="zoom:80%;" /><p>map如果碰到list，会把list里的所有元素都……</p><p>但是这样就不行</p><p><img src="C:/Users/Liu%20Junxin/AppData/Roaming/Typora/typora-user-images/image-20221019122009770.png" alt="image-20221019122009770"></p><h5 id="Q5"><a href="#Q5" class="headerlink" title="Q5"></a>Q5</h5><p>在做之前先看清题目……</p><blockquote><p>参考textbook的：<a href="http://composingprograms.com/pages/24-mutable-data.html#local-state">http://composingprograms.com/pages/24-mutable-data.html#local-state</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">repeated</span>(<span class="hljs-params">t, k</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return the first value in iterator T that appears K times in a row.</span><br><span class="hljs-string">    Iterate through the items such that if the same iterator is passed into</span><br><span class="hljs-string">    the function twice, it continues in the second call at the point it left</span><br><span class="hljs-string">    off in the first.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; s = iter([10, 9, 10, 9, 9, 10, 8, 8, 8, 7])</span><br><span class="hljs-string">    &gt;&gt;&gt; repeated(s, 2)</span><br><span class="hljs-string">    9</span><br><span class="hljs-string">    &gt;&gt;&gt; s2 = iter([10, 9, 10, 9, 9, 10, 8, 8, 8, 7])</span><br><span class="hljs-string">    &gt;&gt;&gt; repeated(s2, 3)</span><br><span class="hljs-string">    8</span><br><span class="hljs-string">    &gt;&gt;&gt; s = iter([3, 2, 2, 2, 1, 2, 1, 4, 4, 5, 5, 5])</span><br><span class="hljs-string">    &gt;&gt;&gt; repeated(s, 3)</span><br><span class="hljs-string">    2</span><br><span class="hljs-string">    &gt;&gt;&gt; repeated(s, 3)</span><br><span class="hljs-string">    5</span><br><span class="hljs-string">    &gt;&gt;&gt; s2 = iter([4, 1, 6, 6, 7, 7, 8, 8, 2, 2, 2, 5])</span><br><span class="hljs-string">    &gt;&gt;&gt; repeated(s2, 3)</span><br><span class="hljs-string">    2</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> k &gt; <span class="hljs-number">1</span><br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    last, times = <span class="hljs-literal">None</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">repeat</span>():<br>        <span class="hljs-keyword">nonlocal</span> last, times<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            n = <span class="hljs-built_in">next</span>(t)<br>            <span class="hljs-keyword">if</span> n == last:<br>                times += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                last = n<br>                times = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> times == k:<br>                <span class="hljs-keyword">return</span> last<br>    <span class="hljs-keyword">return</span> repeat()<br></code></pre></td></tr></table></figure><p>这题主要是掌握nonlocal的用法。</p><p>（好像不用也行啊……</p><p>其实题目有点表述不清？从上一次位置开始，没说要保留上一次的结果……</p>]]></content>
    
    
    <categories>
      
      <category>CS61A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Sciense</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS61A-lab5</title>
    <link href="/2022/08/10/CS61A/lab5/"/>
    <url>/2022/08/10/CS61A/lab5/</url>
    
    <content type="html"><![CDATA[<h2 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h2><h3 id="Q1-Factors-List"><a href="#Q1-Factors-List" class="headerlink" title="Q1: Factors List"></a>Q1: Factors List</h3><p>Write <code>factors_list</code>, which takes a number <code>n</code> and returns a list of its factors in ascending order.</p><h5 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">factors_list</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return a list containing all the numbers that divide `n` evenly, except</span><br><span class="hljs-string">    for the number itself. Make sure the list is in ascending order.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; factors_list(6)</span><br><span class="hljs-string">    [1, 2, 3]</span><br><span class="hljs-string">    &gt;&gt;&gt; factors_list(8)</span><br><span class="hljs-string">    [1, 2, 4]</span><br><span class="hljs-string">    &gt;&gt;&gt; factors_list(28)</span><br><span class="hljs-string">    [1, 2, 4, 7, 14]</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    all_factors = []<br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n // <span class="hljs-number">2</span> + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> n % (i + <span class="hljs-number">1</span>):<br>            all_factors.append(i + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> all_factors<br></code></pre></td></tr></table></figure><h3 id="Q2-Flatten"><a href="#Q2-Flatten" class="headerlink" title="Q2: Flatten"></a>Q2: Flatten</h3><p>Write a function <code>flatten</code> that takes a list and “flattens” it. The list could be a deep list, meaning that there could be a multiple layers of nesting within the list.</p><p>For example, one use case of <code>flatten</code> could be the following:</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">&gt;&gt;&gt; lst = <span class="hljs-comment">[1, <span class="hljs-comment">[<span class="hljs-comment">[2]</span>, 3]</span>, 4, <span class="hljs-comment">[5, 6]</span>]</span><br>&gt;&gt;&gt; flatten(lst)<br><span class="hljs-comment">[1, 2, 3, 4, 5, 6]</span><br></code></pre></td></tr></table></figure><p>Make sure your solution does not mutate the input list.</p><blockquote><p><strong>Hint</strong>: you can check if something is a list by using the built-in <code>type</code> function. For example:</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elm">&gt;&gt;&gt; <span class="hljs-keyword">type</span>(3) == list<br><span class="hljs-type">False</span><br>&gt;&gt;&gt; <span class="hljs-keyword">type</span>([1, 2, 3]) == list<br><span class="hljs-type">True</span><br></code></pre></td></tr></table></figure></blockquote><h5 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">flatten</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Returns a flattened version of list s.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; flatten([1, 2, 3])     # normal list</span><br><span class="hljs-string">    [1, 2, 3]</span><br><span class="hljs-string">    &gt;&gt;&gt; x = [1, [2, 3], 4]     # deep list</span><br><span class="hljs-string">    &gt;&gt;&gt; flatten(x)</span><br><span class="hljs-string">    [1, 2, 3, 4]</span><br><span class="hljs-string">    &gt;&gt;&gt; x # Ensure x is not mutated</span><br><span class="hljs-string">    [1, [2, 3], 4]</span><br><span class="hljs-string">    &gt;&gt;&gt; x = [[1, [1, 1]], 1, [1, 1]] # deep list</span><br><span class="hljs-string">    &gt;&gt;&gt; flatten(x)</span><br><span class="hljs-string">    [1, 1, 1, 1, 1, 1]</span><br><span class="hljs-string">    &gt;&gt;&gt; x</span><br><span class="hljs-string">    [[1, [1, 1]], 1, [1, 1]]</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    f = []<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rec_flat</span>(<span class="hljs-params">s, n</span>):<br>        <span class="hljs-keyword">if</span> n == <span class="hljs-built_in">len</span>(s):<br>            <span class="hljs-keyword">return</span> <br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span>(s[n]) != <span class="hljs-built_in">list</span>:<br>            f.append(s[n])<br>        <span class="hljs-keyword">else</span>:<br>            rec_flat(s[n], <span class="hljs-number">0</span>)<br>        rec_flat(s, n + <span class="hljs-number">1</span>)<br>    rec_flat(s, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> f<br></code></pre></td></tr></table></figure><p>pass了但是有点丑……</p><p>因为觉得思路蛮递归的（因为要倒回来用之前的步骤），所以选择了递归。</p><p>思路：</p><ol><li><p>扫描这个list</p></li><li><p>如果元素不是list，就加入f，去看下一个元素；</p></li><li><p>如果元素是list，那就针对这个list，从1.开始</p></li><li><p>如果扫描完了就结束这一次扫描</p></li></ol><h2 id="Data-Abstraction"><a href="#Data-Abstraction" class="headerlink" title="Data Abstraction"></a>Data Abstraction</h2><p>Say we have an abstract data type for cities. A city has a name, a latitude coordinate, and a longitude coordinate.</p><p>Our data abstraction has one <strong>constructor</strong>:</p><ul><li><code>make_city(name, lat, lon)</code>: Creates a city object with the given name, latitude, and longitude.</li></ul><p>We also have the following <strong>selectors</strong> in order to get the information for each city:</p><ul><li><code>get_name(city)</code>: Returns the city’s name</li><li><code>get_lat(city)</code>: Returns the city’s latitude</li><li><code>get_lon(city)</code>: Returns the city’s longitude</li></ul><p>Here is how we would use the constructor and selectors to create cities and extract their information:</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">berkeley = make_city(<span class="hljs-string">&#x27;Berkeley&#x27;</span>, <span class="hljs-number">122</span>, <span class="hljs-number">37</span>)</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">get_name(berkeley)</span><br>&#x27;Berkeley&#x27;<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">get_lat(berkeley)</span><br>122<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">new_york = make_city(<span class="hljs-string">&#x27;New York City&#x27;</span>, <span class="hljs-number">74</span>, <span class="hljs-number">40</span>)</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">get_lon(new_york)</span><br>40<br></code></pre></td></tr></table></figure><p>All of the selector and constructor functions can be found in the lab file, if you are curious to see how they are implemented. However, the point of data abstraction is that we do not need to know how an abstract data type is implemented, but rather just how we can interact with and use the data type.</p><h3 id="Q3-Distance"><a href="#Q3-Distance" class="headerlink" title="Q3: Distance"></a>Q3: Distance</h3><p>We will now implement the function <code>distance</code>, which computes the distance between two city objects. Recall that the distance between two coordinate pairs <code>(x1, y1)</code> and <code>(x2, y2)</code> can be found by calculating the <code>sqrt</code> of <code>(x1 - x2)**2 + (y1 - y2)**2</code>. We have already imported <code>sqrt</code> for your convenience. Use the latitude and longitude of a city as its coordinates; you’ll need to use the selectors to access this info!</p><h5 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">distance</span>(<span class="hljs-params">city_a, city_b</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    &gt;&gt;&gt; city_a = make_city(&#x27;city_a&#x27;, 0, 1)</span><br><span class="hljs-string">    &gt;&gt;&gt; city_b = make_city(&#x27;city_b&#x27;, 0, 2)</span><br><span class="hljs-string">    &gt;&gt;&gt; distance(city_a, city_b)</span><br><span class="hljs-string">    1.0</span><br><span class="hljs-string">    &gt;&gt;&gt; city_c = make_city(&#x27;city_c&#x27;, 6.5, 12)</span><br><span class="hljs-string">    &gt;&gt;&gt; city_d = make_city(&#x27;city_d&#x27;, 2.5, 15)</span><br><span class="hljs-string">    &gt;&gt;&gt; distance(city_c, city_d)</span><br><span class="hljs-string">    5.0</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    x1 = get_lat(city_a)<br>    y1 = get_lon(city_a)<br>    x2 = get_lat(city_b)<br>    y2 = get_lon(city_b)<br>    <span class="hljs-keyword">return</span> sqrt((x1 - x2)**<span class="hljs-number">2</span> + <br>                (y1 - y2)**<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h3 id="Q4-Closer-city"><a href="#Q4-Closer-city" class="headerlink" title="Q4: Closer city"></a>Q4: Closer city</h3><p>Next, implement <code>closer_city</code>, a function that takes a latitude, longitude, and two cities, and returns the name of the city that is relatively closer to the provided latitude and longitude.</p><p>You may only use the selectors and constructors introduced above and the <code>distance</code> function you just defined for this question.</p><blockquote><p><strong>Hint</strong>: How can you use your <code>distance</code> function to find the distance between the given location and each of the given cities?</p></blockquote><h5 id="解答-3"><a href="#解答-3" class="headerlink" title="解答"></a>解答</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">closer_city</span>(<span class="hljs-params">lat, lon, city_a, city_b</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Returns the name of either city_a or city_b, whichever is closest to</span><br><span class="hljs-string">    coordinate (lat, lon). If the two cities are the same distance away</span><br><span class="hljs-string">    from the coordinate, consider city_b to be the closer city.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; berkeley = make_city(&#x27;Berkeley&#x27;, 37.87, 112.26)</span><br><span class="hljs-string">    &gt;&gt;&gt; stanford = make_city(&#x27;Stanford&#x27;, 34.05, 118.25)</span><br><span class="hljs-string">    &gt;&gt;&gt; closer_city(38.33, 121.44, berkeley, stanford)</span><br><span class="hljs-string">    &#x27;Stanford&#x27;</span><br><span class="hljs-string">    &gt;&gt;&gt; bucharest = make_city(&#x27;Bucharest&#x27;, 44.43, 26.10)</span><br><span class="hljs-string">    &gt;&gt;&gt; vienna = make_city(&#x27;Vienna&#x27;, 48.20, 16.37)</span><br><span class="hljs-string">    &gt;&gt;&gt; closer_city(41.29, 174.78, bucharest, vienna)</span><br><span class="hljs-string">    &#x27;Bucharest&#x27;</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    sample_city = make_city(<span class="hljs-string">&#x27;sample&#x27;</span>, lat, lon)<br>    dist_a = distance(sample_city, city_a)<br>    dist_b = distance(sample_city, city_b)<br>    <span class="hljs-keyword">if</span> dist_a &gt; dist_b:<br>        <span class="hljs-keyword">return</span> get_name(city_b)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> get_name(city_a)<br></code></pre></td></tr></table></figure><h3 id="Q5-Don’t-violate-the-abstraction-barrier"><a href="#Q5-Don’t-violate-the-abstraction-barrier" class="headerlink" title="Q5: Don’t violate the abstraction barrier!"></a>Q5: Don’t violate the abstraction barrier!</h3><p>When writing functions that use an data abstraction, we should use the constructor(s) and selector(s) whenever possible instead of assuming the data abstraction’s implementation. Relying on a data abstraction’s underlying implementation is known as <em>violating the abstraction barrier</em>, and we never want to do this!</p><p>通过了,说明之前的code没有越过barrier!芜湖~</p><h2 id="Trees"><a href="#Trees" class="headerlink" title="Trees"></a>Trees</h2><h3 id="Tree-review"><a href="#Tree-review" class="headerlink" title="Tree review"></a>Tree review</h3><p>A <code>tree</code> is a data structure that represents a hierarchy of information. A file system is a good example of a tree structure. For example, within your <code>cs61a</code> folder, you have folders separating your <code>projects</code>, <code>lab</code> assignments, and <code>homework</code>. The next level is folders that separate different assignments, <code>hw01</code>, <code>lab01</code>, <code>hog</code>, etc., and inside those are the files themselves, including the starter files and <code>ok</code>. Below is an incomplete diagram of what your <code>cs61a</code> directory might look like.</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220810121735858.png" alt="cs61a_tree"></p><p>As you can see, unlike trees in nature, the tree abstract data type is drawn with the root at the top and the leaves at the bottom.</p><p>Some tree terminology:</p><ul><li><strong>root</strong>: the node at the top of the tree</li><li><strong>label</strong>: the value in a node</li><li><strong>branches</strong>: a list of trees directly under the tree’s root</li><li><strong>leaf</strong>: a tree with zero branches</li><li><strong>node</strong>: any location within the tree (e.g., root node, leaf nodes, etc.)</li></ul><p>Our <code>tree</code> abstract data type consists of a root and a list of its <code>branches</code>. To create a tree and access its root value and branches, use the following constructor and selectors:</p><ul><li>Constructor<ul><li><code>tree(label, branches=[])</code>: creates a tree object with the given <code>label</code> value at its root node and list of <code>branches</code>. Notice that the second argument to this constructor, <code>branches</code>, is optional - if you want to make a tree with no branches, leave this argument empty.</li></ul></li><li>Selectors<ul><li><code>label(tree)</code>: returns the value in the root node of <code>tree</code>.</li><li><code>branches(tree)</code>: returns the list of branches of the given <code>tree</code>.</li></ul></li><li>Convenience function<ul><li><code>is_leaf(tree)</code>: returns <code>True</code> if <code>tree</code>‘s list of <code>branches</code> is empty, and <code>False</code> otherwise.</li></ul></li></ul><p>For example, the tree generated by</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dos">number_tree = <span class="hljs-built_in">tree</span>(<span class="hljs-number">1</span>,<br>         [<span class="hljs-built_in">tree</span>(<span class="hljs-number">2</span>),<br>          <span class="hljs-built_in">tree</span>(<span class="hljs-number">3</span>,<br>               [<span class="hljs-built_in">tree</span>(<span class="hljs-number">4</span>),<br>                <span class="hljs-built_in">tree</span>(<span class="hljs-number">5</span>)]),<br>          <span class="hljs-built_in">tree</span>(<span class="hljs-number">6</span>,<br>               [<span class="hljs-built_in">tree</span>(<span class="hljs-number">7</span>)])])<br></code></pre></td></tr></table></figure><p>would look like this:</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript">   <span class="hljs-number">1</span><br> / | <span class="hljs-string">\</span><br><span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">6</span><br>  / <span class="hljs-string">\</span>  <span class="hljs-string">\</span><br> <span class="hljs-number">4</span>   <span class="hljs-number">5</span>  <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>To extract the number <code>3</code> from this tree, which is the label of the root of its second branch, we would do this:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">label</span>(<span class="hljs-built_in">branches</span>(number_tree)<span class="hljs-selector-attr">[1]</span>)<br></code></pre></td></tr></table></figure><p>The <code>print_tree</code> function prints out a tree in a human-readable form. The exact form follows the pattern illustrated above, where the root is unindented, and each of its branches is indented one level further.</p><p>def print_tree(t, indent&#x3D;0):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;Print a representation of this tree in which each node is</span><br><span class="hljs-string">indented by two spaces times its depth from the root.</span><br><span class="hljs-string"></span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>print_tree(tree(1))</span><br><span class="hljs-string">1</span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>print_tree(tree(1, [tree(2)]))</span><br><span class="hljs-string">1</span><br><span class="hljs-string">  2</span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>numbers = tree(1, [tree(2), tree(3, [tree(4), tree(5)]), tree(6, [tree(7)])])</span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>print_tree(numbers)</span><br><span class="hljs-string">1</span><br><span class="hljs-string">  2</span><br><span class="hljs-string">  3</span><br><span class="hljs-string">    4</span><br><span class="hljs-string">    5</span><br><span class="hljs-string">  6</span><br><span class="hljs-string">    7</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;  &#x27;</span> * indent + <span class="hljs-built_in">str</span>(label(t)))<br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> branches(t):<br>    print_tree(b, indent + <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="Q6-Finding-Berries"><a href="#Q6-Finding-Berries" class="headerlink" title="Q6: Finding Berries!"></a>Q6: Finding Berries!</h3><p>The squirrels on campus need your help! There are a lot of trees on campus and the squirrels would like to know which ones contain berries. Define the function <code>berry_finder</code>, which takes in a tree and returns <code>True</code> if the tree contains a node with the value <code>&#39;berry&#39;</code> and <code>False</code> otherwise.</p><blockquote><p><strong>Hint</strong>: To iterate through each of the branches of a particular tree, you can consider using a <code>for</code> loop to get each branch.</p></blockquote><h5 id="回答"><a href="#回答" class="headerlink" title="回答"></a>回答</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">berry_finder</span>(<span class="hljs-params">t</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Returns True if t contains a node with the value &#x27;berry&#x27; and </span><br><span class="hljs-string">    False otherwise.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; scrat = tree(&#x27;berry&#x27;)</span><br><span class="hljs-string">    &gt;&gt;&gt; berry_finder(scrat)</span><br><span class="hljs-string">    True</span><br><span class="hljs-string">    &gt;&gt;&gt; sproul = tree(&#x27;roots&#x27;, [tree(&#x27;branch1&#x27;, [tree(&#x27;leaf&#x27;), tree(&#x27;berry&#x27;)]), tree(&#x27;branch2&#x27;)])</span><br><span class="hljs-string">    &gt;&gt;&gt; berry_finder(sproul)</span><br><span class="hljs-string">    True</span><br><span class="hljs-string">    &gt;&gt;&gt; numbers = tree(1, [tree(2), tree(3, [tree(4), tree(5)]), tree(6, [tree(7)])])</span><br><span class="hljs-string">    &gt;&gt;&gt; berry_finder(numbers)</span><br><span class="hljs-string">    False</span><br><span class="hljs-string">    &gt;&gt;&gt; t = tree(1, [tree(&#x27;berry&#x27;,[tree(&#x27;not berry&#x27;)])])</span><br><span class="hljs-string">    &gt;&gt;&gt; berry_finder(t)</span><br><span class="hljs-string">    True</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    <span class="hljs-keyword">if</span> label(t) == <span class="hljs-string">&#x27;berry&#x27;</span>:<br>        is_berry = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        is_berry = <span class="hljs-literal">False</span> <span class="hljs-comment">#</span><br>    <span class="hljs-keyword">for</span> branch <span class="hljs-keyword">in</span> branches(t):<br>        is_berry = is_berry <span class="hljs-keyword">or</span> berry_finder(branch)<br>    <span class="hljs-keyword">return</span> is_berry<br></code></pre></td></tr></table></figure><p>tree的先根后结点的搜索方式。</p><p>如何让它找到一个berry就能返回<code>True</code>呢，我这里用的是全部用或语句连接的方式。</p><p>#号部分并不会使其出现一个<code>False</code>就返回<code>False</code>.因为在不同的frame噢(可以思考一下)</p><p>另一种写法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> label(t) == <span class="hljs-string">&#x27;berry&#x27;</span>:<br>    is_berry = <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>    is_berry = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> branch <span class="hljs-keyword">in</span> branches(t):<br>    is_berry += berry_finder(branch)<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">bool</span>(is_berry)<br></code></pre></td></tr></table></figure><p>解法2:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> label(t) == <span class="hljs-string">&#x27;berry&#x27;</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><span class="hljs-keyword">for</span> branch <span class="hljs-keyword">in</span> branches(t):<br>    <span class="hljs-keyword">if</span> berry_finder(branch):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h3 id="Q7-Sprout-leaves"><a href="#Q7-Sprout-leaves" class="headerlink" title="Q7: Sprout leaves"></a>Q7: Sprout leaves</h3><p>Define a function <code>sprout_leaves</code> that takes in a tree, <code>t</code>, and a list of leaves, <code>leaves</code>. It produces a new tree that is identical to <code>t</code>, but where each old leaf node has new branches, one for each leaf in <code>leaves</code>.</p><p>For example, say we have the tree <code>t = tree(1, [tree(2), tree(3, [tree(4)])])</code>:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">  <span class="hljs-number">1</span><br> / \<br><span class="hljs-number">2</span>   <span class="hljs-number">3</span><br>    <span class="hljs-string">|</span><br>    <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>If we call <code>sprout_leaves(t, [5, 6])</code>, the result is the following tree:</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript">     <span class="hljs-number">1</span><br>   /   <span class="hljs-string">\</span><br>  <span class="hljs-number">2</span>     <span class="hljs-number">3</span><br> / <span class="hljs-string">\</span>    |<br><span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">4</span><br>       / <span class="hljs-string">\</span><br>      <span class="hljs-number">5</span>   <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sprout_leaves</span>(<span class="hljs-params">t, leaves</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Sprout new leaves containing the data in leaves at each leaf in</span><br><span class="hljs-string">    the original tree t and return the resulting tree.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; t1 = tree(1, [tree(2), tree(3)])</span><br><span class="hljs-string">    &gt;&gt;&gt; print_tree(t1)</span><br><span class="hljs-string">    1</span><br><span class="hljs-string">      2</span><br><span class="hljs-string">      3</span><br><span class="hljs-string">    &gt;&gt;&gt; new1 = sprout_leaves(t1, [4, 5])</span><br><span class="hljs-string">    &gt;&gt;&gt; print_tree(new1)</span><br><span class="hljs-string">    1</span><br><span class="hljs-string">      2</span><br><span class="hljs-string">        4</span><br><span class="hljs-string">        5</span><br><span class="hljs-string">      3</span><br><span class="hljs-string">        4</span><br><span class="hljs-string">        5</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; t2 = tree(1, [tree(2, [tree(3)])])</span><br><span class="hljs-string">    &gt;&gt;&gt; print_tree(t2)</span><br><span class="hljs-string">    1</span><br><span class="hljs-string">      2</span><br><span class="hljs-string">        3</span><br><span class="hljs-string">    &gt;&gt;&gt; new2 = sprout_leaves(t2, [6, 1, 2])</span><br><span class="hljs-string">    &gt;&gt;&gt; print_tree(new2)</span><br><span class="hljs-string">    1</span><br><span class="hljs-string">      2</span><br><span class="hljs-string">        3</span><br><span class="hljs-string">          6</span><br><span class="hljs-string">          1</span><br><span class="hljs-string">          2</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    <span class="hljs-keyword">if</span> is_leaf(t):<br>        <span class="hljs-keyword">return</span> tree(label(t), [tree(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> leaves])<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> tree(label(t),<br>                    [sprout_leaves(j, leaves) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> branches(t)])<br></code></pre></td></tr></table></figure><p>不能用append</p>]]></content>
    
    
    <categories>
      
      <category>CS61A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Sciense</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS61A-14-Mutability</title>
    <link href="/2022/08/09/CS61A/14-mutability/"/>
    <url>/2022/08/09/CS61A/14-mutability/</url>
    
    <content type="html"><![CDATA[<h2 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h2><p>示例：<code>datetime</code></p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809175808356.png" alt="datetime"></p><h5 id="Object是什么"><a href="#Object是什么" class="headerlink" title="Object是什么"></a>Object是什么</h5><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809180013314.png"></p><h2 id="Example：Strings"><a href="#Example：Strings" class="headerlink" title="Example：Strings"></a>Example：Strings</h2><p>Strings are objects</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809180058638.png" alt="对对象string使用function"></p><h5 id="Representing-Strings-ASCII"><a href="#Representing-Strings-ASCII" class="headerlink" title="Representing Strings:ASCII"></a>Representing Strings:ASCII</h5><p>我们熟悉的ascii编码</p><p>Line feed:换行</p><p>Bell：ring the bell</p><p>横轴和竖轴的坐标表示16进制的两个数字</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809180351403.png" alt="ASCII"></p><p>查看ascii编码：</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809180454481.png"></p><p>所以A在表格里坐标为<code>(4, 1)</code>的地方</p><p>前两行的使用：</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809180557019.png"></p><p>叮叮叮！</p><h5 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h5><p>可以表示中文了</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809180747651.png" alt="还有emoji呢"></p><p>一些用法</p><p>name：这个character的名字</p><p>look：找这个名字的character</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809180920488.png" alt="Look how smiled it is!"></p><p>其他emoji：<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809181030778.png" alt="Hello,baby!"></p><p>查看表示这个baby emoji的编码，使用<code>encode()</code>:<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809181146314.png" alt="A的encoding就是A"></p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809181927729.png" alt="玩起来了"></p><h2 id="Mutation-Operations"><a href="#Mutation-Operations" class="headerlink" title="Mutation Operations"></a>Mutation Operations</h2><blockquote><p>Objects can actually change value overtime.</p></blockquote><p>引入例子：</p><p><code>pop()</code>:丢掉了最后一个，return丢掉的这个</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809181644553.png" alt="suits的故事"></p><p>可以发现<code>original_suits</code>和<code>suits</code>一起变了</p><h5 id="some-objects-can-change"><a href="#some-objects-can-change" class="headerlink" title="some objects can change"></a>some objects can change</h5><p>Jessica长大了：</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809182130011.png" alt="image-20220809182130011" style="zoom:67%;" /><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809182153182.png" alt="image-20220809182153182" style="zoom:67%;" /></p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809182209059.png" alt="image-20220809182209059" style="zoom:67%;" /><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809182222369.png" alt="image-20220809182222369" style="zoom:67%;" /></p><p>改变了bound过去的变量<code>jessica</code>也会改变这个object</p><p>mutation：改变，变异</p><p>mutable：可以变的（像tuple就不能变哦）</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809182051529.png" alt="demo"></p><p>list和dict只是举例。</p><p>拿dict为例：</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809182451497.png" alt="对字典对象的操作"></p><h5 id="Mutation-can-happen-within-a-function-call"><a href="#Mutation-can-happen-within-a-function-call" class="headerlink" title="Mutation can happen within a function call"></a>Mutation can happen within a function call</h5><p>使用<code>mystery()</code>改变了<code>four</code></p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809182551903.png"></p><p>Let’s have a look at the frame:<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809182807015.png" alt="environmental frame"></p><p>and this <code>mystery()</code> can do the same thing:<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809182739319.png"></p><p>If no arguments:</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809182912832.png" alt="another_mystery()has no arguments"></p><p>It still work!</p><p>That’s because it can search the global frame and it just find <code>four</code>!</p><h2 id="Tuples"><a href="#Tuples" class="headerlink" title="Tuples"></a>Tuples</h2><blockquote><p>Immutable sequences.</p></blockquote><p>If you dont type <code>()</code> and just type a sequence, you can still get a tuple!</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809183217619.png" alt="still tuple"></p><p>Make a empty tuple:<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809183249435.png"></p><p>Call tuple:<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809183318528.png"></p><p>If I wanna have a tuple which has only one argument:<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809183408203.png"></p><p>some operations:<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809183445382.png"></p><p>Because it’s <strong>immutable</strong>,so we can use it as <strong>a key in dict</strong>:</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809183618643.png" alt="mutable lsts are not allowed"></p><h5 id="Tuples-r-immutable"><a href="#Tuples-r-immutable" class="headerlink" title="Tuples r immutable"></a>Tuples r immutable</h5><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809183819513.png" alt="immutable"></p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809184010513.png"></p><p>可以变的情况:</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809184023658.png" alt="somehow mutable"></p><h2 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h2><h5 id="Sameness-and-Change"><a href="#Sameness-and-Change" class="headerlink" title="Sameness and Change"></a>Sameness and Change</h5><p>在左侧,a和b是 the same list,所以会一起变</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809192002856.png"></p><h5 id="Identity-Operators"><a href="#Identity-Operators" class="headerlink" title="Identity Operators"></a>Identity Operators</h5><p>两个符号的区别:<code>is</code> is more stricted</p><p><code>is</code>:the same</p><p><code>==</code>:equal</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809192131090.png" alt="Difference"></p><p>eg.</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809192249745.png" alt="example"></p><h5 id="Mutable-default-arguments-r-dangerous"><a href="#Mutable-default-arguments-r-dangerous" class="headerlink" title="Mutable default arguments r dangerous"></a>Mutable default arguments r dangerous</h5><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809192611557.png"></p><p>第二次及之后 call f的时候,s is bound to the same list.</p><p>因为默认值是函数内变量的一部分,不会因为call它就重新生成</p><blockquote><p>Q:Hi,does anyone knows why I call f 3 times and s is bound to the same list instead of create a new list?</p><p>A:Default arguments in python are <strong>evaluated <em>once</em></strong> when the function is <strong>defined</strong>, <em>not</em> each time the function is <strong>called</strong>. This means that if you have a mutable default argument and mutate it, you will have mutated that object for all future calls to the function as well.</p></blockquote><h2 id="Mutable-Functions"><a href="#Mutable-Functions" class="headerlink" title="Mutable Functions"></a>Mutable Functions</h2><h5 id="A-function-with-behavior-that-varies-over-time"><a href="#A-function-with-behavior-that-varies-over-time" class="headerlink" title="A function with behavior that varies over time"></a>A function with behavior that varies over time</h5><p>example:<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809194353626.png"></p><h5 id="Mutable-values-amp-persistent-local-state"><a href="#Mutable-values-amp-persistent-local-state" class="headerlink" title="Mutable values &amp; persistent local state"></a>Mutable values &amp; persistent local state</h5><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809205213464.png"></p>]]></content>
    
    
    <categories>
      
      <category>CS61A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Sciense</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS61A-14-Mutability</title>
    <link href="/2022/08/09/CS61A/15-syntax/"/>
    <url>/2022/08/09/CS61A/15-syntax/</url>
    
    <content type="html"><![CDATA[<h2 id="Syntax-trees"><a href="#Syntax-trees" class="headerlink" title="Syntax trees"></a>Syntax trees</h2><h5 id="definition"><a href="#definition" class="headerlink" title="definition"></a>definition</h5><p>就是语法树，一个例子：</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221011083021768.png" alt="image-20221011083021768" style="zoom:67%;" /><p>The leaves are also called <strong>terminals</strong>，表示一个word</p><ul><li><strong>NN</strong>: singular noun (e.g. “This”, “book”)</li><li><strong>COP</strong>: copula (e.g. “is”)</li><li><strong>DT</strong>: determiner (e.g. “the”)</li></ul><p>The other nodes are called <strong>non-terminals</strong> and contain only tags,表示一个phrase（短语）</p><ul><li><strong>S</strong>: sentence (e.g. “This is a book”)</li><li><strong>NP</strong>: noun phrase (e.g. “This”, “a book”)</li><li><strong>VP</strong>: verb phrase (e.g. “is a book”)</li></ul><h5 id="representation"><a href="#representation" class="headerlink" title="representation"></a>representation</h5><p>non-terminals:<code>&quot;S&quot;</code>, <code>&quot;NP&quot;</code>, <code>&quot;VP&quot;</code>.</p><p>terminals:<code>[&quot;NN&quot;, &quot;This&quot;]</code>, <code>[&quot;COP&quot;, &quot;is&quot;]</code>, <code>[&quot;DT&quot;, &quot;a&quot;]</code>, <code>[&quot;NN&quot;, &quot;book&quot;]</code>.,也就是类型+词本身</p><p>树结构代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">t = tree(<span class="hljs-string">&quot;S&quot;</span>, [<br>    tree(<span class="hljs-string">&quot;NP&quot;</span>, [tree([<span class="hljs-string">&quot;NN&quot;</span>, <span class="hljs-string">&quot;this&quot;</span>])]),<br>    tree(<span class="hljs-string">&quot;VP&quot;</span>, [<br>        tree([<span class="hljs-string">&quot;COP&quot;</span>, <span class="hljs-string">&quot;is&quot;</span>]),<br>        tree(<span class="hljs-string">&quot;NP&quot;</span>, [<br>            tree([<span class="hljs-string">&quot;DT&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>]),<br>            tree([<span class="hljs-string">&quot;NN&quot;</span>, <span class="hljs-string">&quot;book&quot;</span>])<br>            ])<br>        ])<br>    ])<br></code></pre></td></tr></table></figure><blockquote><p>tree不是本来就是一个list了吗？</p><p>是的，你看最后一个NP后面，它有两个节点，所以这是需要的。因为第一个的NN，它的[]是表示它是一个东西，所以外层必须再来一个[]，事实上是<code>[ [[“NN”,”this”],[]] ]</code>,中间那层包装了这一个terminal，最外面那层表示是non-terminal NP的节点表。</p></blockquote><p>抽象的一些操作函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">phrase</span>(<span class="hljs-params">tag, branches</span>):<br>    <span class="hljs-keyword">return</span> tree(tag, branches)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">word</span>(<span class="hljs-params">tag, text</span>): <span class="hljs-comment">#这个就是把原本的value变成一个列表了，注意是会变成[[tag,text],[]]，还跟了一个空列表</span><br>    <span class="hljs-keyword">return</span> tree([tag, text])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">text</span>(<span class="hljs-params">word</span>):<br>    <span class="hljs-keyword">assert</span> is_leaf(word)<br>    <span class="hljs-keyword">return</span> label(word)[<span class="hljs-number">1</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tag</span>(<span class="hljs-params">t</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return the tag of a phrase or word.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> is_leaf(t):<br>        <span class="hljs-keyword">return</span> label(t)[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> label(t)<br></code></pre></td></tr></table></figure><h2 id="Parsing"><a href="#Parsing" class="headerlink" title="Parsing"></a>Parsing</h2><p>期望的输出结果：就是进行一个tree的print！</p><p>python中读取文件:</p><ul><li>读全部：<code>open(&#39;/some/file.txt&#39;).read()</code></li><li>读全部,保存成很多list,每个list是一行:<code>open(&#39;/some/file.txt&#39;).read()</code></li></ul><p><code>less</code>:展示file里的全部内容 <code>less test.cpp</code></p><p>一些string处理:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27; hello &#x27;</span>.strip()  <span class="hljs-comment"># &#x27;hello&#x27; 去掉空格</span><br><span class="hljs-string">&#x27;hi   there &#x27;</span>.split()  <span class="hljs-comment"># [&#x27;hi&#x27;, &#x27;there&#x27;]  根据空格分割</span><br><span class="hljs-string">&#x27;2+2&#x27;</span>.replace(<span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-string">&#x27; + &#x27;</span>)  <span class="hljs-comment"># &#x27;2 + 2&#x27;</span><br></code></pre></td></tr></table></figure><p>parsing步骤:</p><ul><li>lines —&gt; tokens:</li></ul><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221011091747841.png" alt="image-20221011091747841" style="zoom: 50%;" /><ul><li>tokens —&gt; trees:</li></ul><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20221011091806375.png" alt="image-20221011091806375" style="zoom:50%;" /><h2 id="Sentences-grneration"><a href="#Sentences-grneration" class="headerlink" title="Sentences grneration"></a>Sentences grneration</h2>]]></content>
    
    
    <categories>
      
      <category>CS61A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Sciense</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS61A-13-trees</title>
    <link href="/2022/08/09/CS61A/13-trees/"/>
    <url>/2022/08/09/CS61A/13-trees/</url>
    
    <content type="html"><![CDATA[<h2 id="Trees"><a href="#Trees" class="headerlink" title="Trees"></a>Trees</h2><h5 id="tree-abstraction"><a href="#tree-abstraction" class="headerlink" title="tree abstraction"></a>tree abstraction</h5><p>基本介绍</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809103734831.png" alt="tree的介绍"></p><p>label就是根哦。</p><h5 id="Implementing-the-Tree-Abstraction"><a href="#Implementing-the-Tree-Abstraction" class="headerlink" title="Implementing the Tree Abstraction"></a>Implementing the Tree Abstraction</h5><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809104121607.png" alt="关于tree的function"></p><p>注意下这个<code>is_tree</code>函数。指branch也要是个list。看下面的错误提示，branch整体是一个list，但其中的node是<code>5</code>，正确的应该是<code>[5]</code>或<code>tree(5)</code>，所以会报错。</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809104542861.png" alt="一些操作"></p><h2 id="Tree-Processing"><a href="#Tree-Processing" class="headerlink" title="Tree Processing"></a>Tree Processing</h2><p>例子：斐波那契树</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809105816906.png" alt="斐波那契树"></p><h5 id="Tree-processing-uses-recursion"><a href="#Tree-processing-uses-recursion" class="headerlink" title="Tree processing uses recursion"></a>Tree processing uses recursion</h5><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809110144297.png" alt="Recursion"></p><p>用法举例：</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809110414233.png" alt="使用函数count_leaves"></p><h5 id="Question-discussion"><a href="#Question-discussion" class="headerlink" title="Question discussion"></a>Question discussion</h5><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809111422406.png" alt="如何implement leaves function"></p><h5 id="Creating-trees"><a href="#Creating-trees" class="headerlink" title="Creating trees"></a>Creating trees</h5><p>从已有的树建新树（迁移过去）</p><p>increment：增加（所以把leaf都加了1）</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809112516146.png" alt="两种functions"></p><h2 id="Example-print-trees"><a href="#Example-print-trees" class="headerlink" title="Example:print trees"></a>Example:print trees</h2><p>简单的想法：先打印label，再打印branches</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809112657249.png" alt="简单的print"></p><p>试一试，但是发现不好看清结构：</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809112757188.png"></p><p>改进：使用缩进</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809112945462.png" alt="改进版"></p><p>这样打印出来就可以清楚的看出树的结构：</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809113019954.png" alt="eg"></p><p>能明白树的层次（比如谁是谁的兄弟，谁是谁的孩子）</p><h2 id="Example：Summing-paths"><a href="#Example：Summing-paths" class="headerlink" title="Example：Summing paths"></a>Example：Summing paths</h2><h5 id="引入：对fact函数的改进"><a href="#引入：对fact函数的改进" class="headerlink" title="引入：对fact函数的改进"></a>引入：对fact函数的改进</h5><p>第一个函数：先不进行乘法，等运行到base case，即”归“的时候再一次性乘上去。</p><p>第二个函数：加了一个参数k，在”递“的时候就乘完了（第二个参数）</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809113509969.png" alt="两种fact"></p><p>根据第二种改进可得：<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809113539900.png"></p><h5 id="那么来看Tree"><a href="#那么来看Tree" class="headerlink" title="那么来看Tree"></a>那么来看Tree</h5><p>解释一下这个函数：到了leaf的时候就打印已经完成的sum，即<code>so_far</code></p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809114333603.png"></p><h2 id="Example：Counting-paths"><a href="#Example：Counting-paths" class="headerlink" title="Example：Counting paths"></a>Example：Counting paths</h2><p>编写一个函数，算出从label出发加和等于total的总路径数。（包括label本身）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span>   total == label(t):<br>    found = <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>    found = <span class="hljs-number">0</span><br><span class="hljs-keyword">return</span> found + <span class="hljs-built_in">sum</span>([count_path(b, total - label(t)) <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> branches(t)])<br></code></pre></td></tr></table></figure><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809120842986.png"></p>]]></content>
    
    
    <categories>
      
      <category>CS61A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Sciense</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS61A-lab4</title>
    <link href="/2022/08/08/CS61A/lab4/"/>
    <url>/2022/08/08/CS61A/lab4/</url>
    
    <content type="html"><![CDATA[<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220808230840796.png"></p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220808112017089.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>drill = crust <br><span class="hljs-meta">&gt;&gt;&gt; </span>drill = drill() <span class="hljs-comment">#drill = (调用一次curst()) mantle</span><br>______<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>drill = drill() <span class="hljs-comment">#drill = (调用一次mantle()) core</span><br>______<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>drill = drill() <span class="hljs-comment">#drill = (调用一次core() 调用一次mantle()) core </span><br>______<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>drill() <span class="hljs-comment">#即调用了core(),调用完后要显示drill()的返回值哦</span><br></code></pre></td></tr></table></figure><p>注意括号。</p><p>还有注意return 之前调用了什么。core里的<code>mantle( )</code>是直接调用了一次mantle噢</p><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>2简单，这里不写了</p><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220808164126239.png" alt="三角形示意图"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">pascal</span>(<span class="hljs-params">row, column</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Returns the value of the item in Pascal&#x27;s Triangle </span><br><span class="hljs-string">    whose position is specified by row and column.</span><br><span class="hljs-string">    &gt;&gt;&gt; pascal(0, 0)</span><br><span class="hljs-string">    1</span><br><span class="hljs-string">    &gt;&gt;&gt; pascal(0, 5)# Empty entry; outside of Pascal&#x27;s Triangle</span><br><span class="hljs-string">    0</span><br><span class="hljs-string">    &gt;&gt;&gt; pascal(3, 2)# Row 3 (1 3 3 1), Column 2</span><br><span class="hljs-string">    3</span><br><span class="hljs-string">    &gt;&gt;&gt; pascal(4, 2)     # Row 4 (1 4 6 4 1), Column 2</span><br><span class="hljs-string">    6</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    <span class="hljs-keyword">if</span> row &lt; column:    <span class="hljs-comment"># outside of the Pascal&#x27;s Triangle</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> column:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> pascal(row - <span class="hljs-number">1</span>, column - <span class="hljs-number">1</span>) + pascal(row - <span class="hljs-number">1</span>, column)<br><br></code></pre></td></tr></table></figure><p>弄清楚这个三角形的定义，和分清楚每种情况就可以</p><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">paths</span>(<span class="hljs-params">m, n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return the number of paths from one corner of an</span><br><span class="hljs-string">    M by N grid to the opposite corner.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; paths(2, 2)</span><br><span class="hljs-string">    2</span><br><span class="hljs-string">    &gt;&gt;&gt; paths(5, 7)</span><br><span class="hljs-string">    210</span><br><span class="hljs-string">    &gt;&gt;&gt; paths(117, 1)</span><br><span class="hljs-string">    1</span><br><span class="hljs-string">    &gt;&gt;&gt; paths(1, 157)</span><br><span class="hljs-string">    1</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    <span class="hljs-keyword">if</span> m == <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> n == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> paths(m - <span class="hljs-number">1</span>, n) + paths(m, n - <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>这题还是稍稍有点难度</p><p>注意不要重复了。</p><p>思路就是只看最后一步。不管是一次到位还是一次没到位的，都只看一步（否则会重复）</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220808230029873.png" alt="3*3的情况"></p><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220808172611493.png" alt="知识点补充"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">couple</span>(<span class="hljs-params">s, t</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return a list of two-element lists in which the i-th element is [s[i], t[i]].</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; a = [1, 2, 3]</span><br><span class="hljs-string">    &gt;&gt;&gt; b = [4, 5, 6]</span><br><span class="hljs-string">    &gt;&gt;&gt; couple(a, b)</span><br><span class="hljs-string">    [[1, 4], [2, 5], [3, 6]]</span><br><span class="hljs-string">    &gt;&gt;&gt; c = [&#x27;c&#x27;, 6]</span><br><span class="hljs-string">    &gt;&gt;&gt; d = [&#x27;s&#x27;, &#x27;1&#x27;]</span><br><span class="hljs-string">    &gt;&gt;&gt; couple(c, d)</span><br><span class="hljs-string">    [[&#x27;c&#x27;, &#x27;s&#x27;], [6, &#x27;1&#x27;]]</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(s) == <span class="hljs-built_in">len</span>(t)<br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    lst = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>        sublst = []<br>        sublst.append(s[i])<br>        sublst.append(t[i])<br>        lst.append(sublst)<br>    <span class="hljs-keyword">return</span> lst<br></code></pre></td></tr></table></figure><h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">coords</span>(<span class="hljs-params">fn, seq, lower, upper</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    &gt;&gt;&gt; seq = [-4, -2, 0, 1, 3]</span><br><span class="hljs-string">    &gt;&gt;&gt; fn = lambda x: x**2</span><br><span class="hljs-string">    &gt;&gt;&gt; coords(fn, seq, 1, 9)</span><br><span class="hljs-string">    [[-2, 4], [1, 1], [3, 9]]</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    <span class="hljs-keyword">return</span> [[i, fn(i)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> seq <span class="hljs-keyword">if</span> fn(i) &gt;= lower <span class="hljs-keyword">and</span> fn(i) &lt;= upper]<br></code></pre></td></tr></table></figure><h2 id="7"><a href="#7" class="headerlink" title="7"></a>7</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">riffle</span>(<span class="hljs-params">deck</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Produces a single, perfect riffle shuffle of DECK, consisting of</span><br><span class="hljs-string">    DECK[0], DECK[M], DECK[1], DECK[M+1], ... where M is position of the</span><br><span class="hljs-string">    second half of the deck.  Assume that len(DECK) is even.</span><br><span class="hljs-string">    &gt;&gt;&gt; riffle([3, 4, 5, 6])</span><br><span class="hljs-string">    [3, 5, 4, 6]</span><br><span class="hljs-string">    &gt;&gt;&gt; riffle(range(20))</span><br><span class="hljs-string">    [0, 10, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17, 8, 18, 9, 19]</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    lst = []<br>    fr = <span class="hljs-number">0</span><br>    bc = <span class="hljs-built_in">len</span>(deck) // <span class="hljs-number">2</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(deck)):<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span>:<br>            lst.append(deck[bc])<br>            bc += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            lst.append(deck[fr])<br>            fr += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> lst<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CS61A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Sciense</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>李宏毅DL3-CNN</title>
    <link href="/2022/08/03/DL/3-CNN/"/>
    <url>/2022/08/03/DL/3-CNN/</url>
    
    <content type="html"><![CDATA[<h3 id="简介引入"><a href="#简介引入" class="headerlink" title="简介引入"></a>简介引入</h3><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220730105232803.png" name="模型3" style="zoom: 33%;" /><p>输入：</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220730105359479.png" alt="输入" style="zoom: 33%;" /><p>拉直成一个向量。</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803114218263.png" alt="全连接网络" style="zoom: 33%;" /><p>但是参数太多，容易over fitting，考虑图像的特性，不一定需要全神经元。</p><h4 id="观察1—不用全看"><a href="#观察1—不用全看" class="headerlink" title="观察1—不用全看"></a>观察1—不用全看</h4><p>neuron会看到特别的pattern来判断图片是什么，比如鸟嘴，鸟眼睛，翅膀等。所以并不需要看完整的图片~</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803114632246.png" alt="不用全看" style="zoom: 33%;" /><h5 id="简化1"><a href="#简化1" class="headerlink" title="简化1"></a>简化1</h5><p>一个neuron在意自己field里发生的事情就好：</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803114938779.png" alt="只考虑一个Receptive field" style="zoom: 33%;" /><p>那怎么决定看哪个field呢？</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803115154448.png" alt="可以重叠，右边问题的回答都是可以！" style="zoom: 33%;" /><p>第四个问题是指：可不可以不是正方形，长方形怎么样！</p><h5 id="Typical-setting"><a href="#Typical-setting" class="headerlink" title="Typical setting"></a>Typical setting</h5><p>kernel size一般不会设置太大，这里先设置3*3.</p><p>stride：移动的步长</p><p>移到最右边的时候，会超出范围，这时做padding（给超出部分赋值），可以赋值0，也可以赋值平均值。</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803115729043.png" alt="示意图" style="zoom: 33%;" /><h4 id="观察2—–同一个pattern可能在图片的不同地方"><a href="#观察2—–同一个pattern可能在图片的不同地方" class="headerlink" title="观察2—–同一个pattern可能在图片的不同地方"></a>观察2—–同一个pattern可能在图片的不同地方</h4><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803115852270.png" alt="侦测鸟嘴的neuron" style="zoom: 33%;" /><p>难道需要每个位置都放一个侦测鸟嘴的neuron吗？</p><h5 id="简化2"><a href="#简化2" class="headerlink" title="简化2"></a>简化2</h5><p>共享参数！</p><p>守备的field不一样，但是参数一样~这样每个地方都可以做到侦测同个东西。</p><p>那参数一样，输出是否会一样？不会，因为输入不一样。</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803120224229.png" alt="简化2示意图" style="zoom: 33%;" /><h5 id="typical-setting"><a href="#typical-setting" class="headerlink" title="typical setting"></a>typical setting</h5><p>一样的颜色表示一样的参数。参数叫$filter_i$，他们公用一组参数。</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803120420138.png" alt="共用参数" style="zoom:33%;" /><h4 id="整理一下吧"><a href="#整理一下吧" class="headerlink" title="整理一下吧"></a>整理一下吧</h4><p>加了我们的哪些限制，就叫做Convolutional layer 了！</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803162531448.png" alt="conv" style="zoom:33%;" /><h3 id="Conv-Layer-介绍"><a href="#Conv-Layer-介绍" class="headerlink" title="Conv Layer 介绍"></a>Conv Layer 介绍</h3><p>里面有很多filter,filter的作用是抓pattern</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803162710995.png" alt="有很多filter" style="zoom:33%;" /><p>如何抓pattern呢？</p><p>filter和框框里的矩阵相乘，然后移动一个stride，最后形成了新的矩阵：</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803162933785.png" alt="示意图" style="zoom: 33%;" /><p>观察这个filter，发现它很在乎斜线那三个数字，这就是它的效果。</p><p>再用第二个filter：</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803163448363.png" alt="第二个filter" style="zoom:33%;" /><p>用完n个filter会有n个新矩阵，这些叫做Feature map。</p><p>因此通过conv layer会产生一个feature map。有多少filter就有多少channel。</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803163631678.png" alt="注意维度" style="zoom:33%;" /><p>3*3的kernel会不会视野太小？不会噢！</p><p>因为不止一个conv layer！这样原矩阵缩小，缩小，3*3的kernel也能发现原矩阵上距离很远的地方噢！</p><p>在简介里，“共享参数”其实指的就是用一个filter扫过去。这个过程就叫convolution。</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803164029838.png" style="zoom:33%;" /><p>比较两种说法：</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803164106988.png" style="zoom:33%;" /><h2 id="Pooling"><a href="#Pooling" class="headerlink" title="Pooling"></a>Pooling</h2><h4 id="观察3—-可以把图片变小一点！"><a href="#观察3—-可以把图片变小一点！" class="headerlink" title="观察3—-可以把图片变小一点！"></a>观察3—-可以把图片变小一点！</h4><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803164226349.png" style="zoom: 33%;" /><h4 id="Pooling-Max-pooling"><a href="#Pooling-Max-pooling" class="headerlink" title="Pooling-Max pooling"></a>Pooling-Max pooling</h4><p>如何运作的呢：</p><p>拿max-pooling来说，就是选一组里最大的那个值：</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803164417903.png" alt="选择前" style="zoom:33%;" /><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803164437245.png" alt="选择后" style="zoom:33%;" /><p>（哪几个一组是自己定的）</p><p>pooling之后：</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803164529458.png" alt="就变成了这样捏" style="zoom: 33%;" /><p>但是由于计算能力越来越强，有时也不用pooling了。</p><h2 id="CNN架构"><a href="#CNN架构" class="headerlink" title="CNN架构"></a>CNN架构</h2><p>Flatten：把矩阵拉直成一个向量</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803164742494.png" alt="整体架构" style="zoom:33%;" /><h2 id="应用：下围棋Playing-Go"><a href="#应用：下围棋Playing-Go" class="headerlink" title="应用：下围棋Playing Go"></a>应用：下围棋Playing Go</h2><p>把棋盘表示成一个向量，黑子表示值为1，白子-1，没子0.</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803165021469.png" alt="Playing Go" style="zoom:33%;" /><p>48个channel表示有48种位置描述（理解成战术啦）</p><p>为什么可以用在下围棋上呢？因为围棋和图片有共同特性👇</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803165202953.png" style="zoom:33%;" /><p>不过……没有用pooling捏</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803165359600.png" alt="没有pooling" style="zoom:33%;" /><h2 id="CNN的缺陷"><a href="#CNN的缺陷" class="headerlink" title="CNN的缺陷"></a>CNN的缺陷</h2><p>放大缩小之后就看不出来了：</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803165608079.png" style="zoom:33%;" /><p>所以要做data augmentation或者用spatial layer</p>]]></content>
    
    
    <categories>
      
      <category>李宏毅机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deep learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UE5 Tutorial</title>
    <link href="/2022/08/02/virtual%20human/UE5-Tutorial/"/>
    <url>/2022/08/02/virtual%20human/UE5-Tutorial/</url>
    
    <content type="html"><![CDATA[<p>教程地址：<a href="https://www.youtube.com/watch?v=k-zMkzmduqI">https://www.youtube.com/watch?v=k-zMkzmduqI</a></p><p><a href="https://www.bilibili.com/video/BV1mZ4y127eX?p=17&vd_source=3413af2c1f998ce457ec6cf9d0a1f7b6">【UE5】虚幻引擎 5 (UE5)：16.16.构建Nanite对象_哔哩哔哩_bilibili</a></p><h4 id="界面介绍"><a href="#界面介绍" class="headerlink" title="界面介绍"></a>界面介绍</h4><h5 id="enable-windows"><a href="#enable-windows" class="headerlink" title="enable windows"></a>enable windows</h5><p>在窗口界面可以开启被隐藏的windows，如果不小心把Windows搞乱了，就：<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802120229560.png" alt="image-20220802120229560" style="zoom: 50%;" /></p><h5 id="windows介绍"><a href="#windows介绍" class="headerlink" title="windows介绍"></a>windows介绍</h5><p>outliner:当前世界里放的东西，可以在里面选择</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802135113632.png" alt="image-20220802135113632" style="zoom:80%;" /><h5 id="鼠标操作"><a href="#鼠标操作" class="headerlink" title="鼠标操作"></a>鼠标操作</h5><p>用鼠标操作界面：按左键，按右键，一起按（具体什么效果试一试就知道喽）</p><p>其他鼠标操作：</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802120404804.png" alt="image-20220802120404804" style="zoom: 67%;" /><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802120823755.png" alt="image-20220802120823755" style="zoom: 50%;" /><p>觉得移动的慢可以加快摄像机速度：<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802120508508.png" alt="image-20220802120508508" style="zoom:80%;" /></p><h5 id="键盘操作"><a href="#键盘操作" class="headerlink" title="键盘操作"></a>键盘操作</h5><p><code>ctrl+z</code>撤销操作</p><p>按<code>空格</code>：切换方式（移动，缩放，…）</p><p>或者，这四个键分别对应qwer：<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802120344395.png" alt="image-20220802120344395" style="zoom:80%;" /></p><p><code>F</code>：focus to the object</p><h5 id="其他窗口"><a href="#其他窗口" class="headerlink" title="其他窗口"></a>其他窗口</h5><p>eye icon：隐藏或展示<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802114533861.png" alt="image-20220802114533861" style="zoom: 80%;" /></p><p>点击后可以看到details panel，可以改变形状大小位置等。</p><p>不过要先 enable details panel，在窗口里可以找到。</p><p>按<code>ctrl+空格</code>：开启文件浏览，就是这个东西👇</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802114817102.png" alt="image-20220802114817102"></p><p>这里有我们可以加的文件（但不是在世界里）</p><p>双击某个物体，可以编辑这个asset：</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802114928634.png" alt="image-20220802114928634"></p><h2 id="view-points"><a href="#view-points" class="headerlink" title="view points"></a>view points</h2><p>在这里选：<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802140116628.png" alt="image-20220802140116628" style="zoom:67%;" /></p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802121111984.png" alt="image-20220802121111984" style="zoom:67%;" /><h2 id="打包成游戏"><a href="#打包成游戏" class="headerlink" title="打包成游戏"></a>打包成游戏</h2><p><a href="https://www.bilibili.com/read/cv16022730/">UE5 PC端windows打包教程 - 哔哩哔哩 (bilibili.com)</a></p><p>注：要先安装windows 10 sdk和下载Microsoft Windows Desktop Runtime 3.1.16，否则会像下面一样感叹号</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802164329137.png" alt="image-20220802164329137" style="zoom: 50%;" /><h2 id="物体操作"><a href="#物体操作" class="headerlink" title="物体操作"></a>物体操作</h2><p>按住<code>alt</code>：复制物体</p><p>按<code>end</code>：自动把物体放在某个东西上</p><h2 id="素材"><a href="#素材" class="headerlink" title="素材"></a>素材</h2><p>素材网：<a href="http://www.uemodel.com/">UE素材网 (uemodel.com)</a></p><p><a href="https://www.modongwang.com/list-49-1.html">UE4虚幻引擎资源网,Unreal Engine免费素材下载网站 (modongwang.com)</a></p><p><a href="https://www.aigei.com/">爱给网_音效配乐_3D模型_视频素材_游戏素材_免费下载 (aigei.com)</a></p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809171001280.png" alt="爱给网UE资源的位置"></p><p>注意要选对应UE版本的素材，否则会导入失败</p><p>如何导入素材：直接拖拽或点击导入（建议不要直接拖拽）</p><h2 id="蓝图"><a href="#蓝图" class="headerlink" title="蓝图"></a>蓝图</h2><p>选中actor，然后：</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802172645147.png" alt="image-20220802172645147" style="zoom:67%;" /><p>点击添加新的组件，选中，在右边下拉可以看到很多events</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802173023158.png" alt="image-20220802173023158" style="zoom:67%;" />]]></content>
    
    
    <categories>
      
      <category>数字虚拟人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UE开源游戏调查</title>
    <link href="/2022/08/02/virtual%20human/UE%E5%BC%80%E6%BA%90%E6%B8%B8%E6%88%8F%E8%B0%83%E6%9F%A5/"/>
    <url>/2022/08/02/virtual%20human/UE%E5%BC%80%E6%BA%90%E6%B8%B8%E6%88%8F%E8%B0%83%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<p>开源项目合集：<a href="https://github.com/hui211314dd/UE4GameList">https://github.com/hui211314dd/UE4GameList</a></p>]]></content>
    
    
    <categories>
      
      <category>数字虚拟人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何设置博客</title>
    <link href="/2022/08/01/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/08/01/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>博客网站：<a href="https://tangpizhijisu.github.io/">Hexo (tangpizhijisu.github.io)</a></p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><p>创建过程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br><span class="hljs-comment">#&quot;tag:&quot;后要有个空格</span><br><span class="hljs-comment">#写完后：</span><br>清理命令：<br>hexo clean<br>生成命令：<br>hexo g<br>运行博客命令：<br>hexo s<br>上传到github：<br>hexo d<br></code></pre></td></tr></table></figure><p>引号内换成博客名</p><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220801234117742.png"></p><p>这种情况是网不好，再来一次就可以</p><h3 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h3><p>主题用户配置手册：<a href="https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B">开始使用 | Hexo Fluid 用户手册 (fluid-dev.com)</a></p><p>主题改完记得按主题文档里的更新方法更新</p><p>注意如果要改图片，要修改<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220801233850951.png"></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="Git相关"><a href="#Git相关" class="headerlink" title="Git相关"></a>Git相关</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">退一层：<span class="hljs-keyword">cd</span> <span class="hljs-string">..</span><br>退两层：<span class="hljs-keyword">cd</span> <span class="hljs-string">../..</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
